{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\n/* Test deposit penalties with a number of human accounts and number of bot accounts */\r\ncontract TestBotAttack {\r\n    \r\n    uint public numUsers;\r\n\r\n    uint humanAccounts;\r\n    uint botAccounts;\r\n    uint maximumAccounts;\r\n    \r\n    uint nymsToControlGroup;\r\n\r\n    bytes32 maxHash = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    uint groupSize;\r\n    uint denominator;\r\n    uint numGroups;\r\n    \r\n    function TestBotAttack() {\r\n        groupSize = 7;\r\n        nymsToControlGroup = 4;\r\n        botAccounts = 1000;\r\n        humanAccounts = 4 * botAccounts;\r\n        maximumAccounts = humanAccounts + botAccounts;\r\n        numGroups = maximumAccounts / groupSize;\r\n        denominator = uint(maxHash) / numGroups;\r\n    }\r\n    \r\n    modifier belowMaximumAccounts {\r\n        if(numUsers >= botAccounts) throw;\r\n        _;\r\n    }\r\n    \r\n    function botControlledPOIs() public returns (uint) { return groupsControlledByBots * nymsToControlGroup; }\r\n    function depositsPenaltiesPerBotPOI() public returns (uint) { return (botAccounts - botControlledPOIs()) / botControlledPOIs(); }\r\n    \r\n    mapping(uint => uint) pseudonymGroup;\r\n    mapping(uint => bool) groupControlled;\r\n    mapping(uint => uint) botCount;\r\n\r\n    uint public groupsControlledByBots;\r\n    \r\n    function create50accounts() belowMaximumAccounts{\r\n        uint commited = numUsers;\r\n        for(uint i = commited; i < commited + 50; i++) {\r\n        commit();\r\n        }\r\n    }\r\n    function create100accounts() belowMaximumAccounts{\r\n        uint commited = numUsers;\r\n        for(uint i = commited; i < commited + 100; i++) {\r\n        commit();\r\n        }\r\n    }\r\n    \r\n    function commit() internal {\r\n      \r\n      uint groupNumber = uint(sha3(numUsers)) / (denominator) + 1; \r\n      \r\n      if(pseudonymGroup[groupNumber] >= groupSize) {\r\n          for(uint i = 0; i < numGroups; i++) {\r\n              if(groupNumber >= i + 1) {\r\n                  if(pseudonymGroup[groupNumber - i] < groupSize) { groupNumber -= i; break; }\r\n              }\r\n              if(groupNumber + i <= numGroups) {\r\n                  if(pseudonymGroup[groupNumber + i] < groupSize) { groupNumber += i; break; }\r\n              }\r\n          }\r\n      }\r\n      pseudonymGroup[groupNumber]++;\r\n      numUsers++;\r\n\r\n      botCount[groupNumber] += 1; \r\n      if(botCount[groupNumber] == nymsToControlGroup && groupControlled[groupNumber] == false) {\r\n          groupControlled[groupNumber] = true;\r\n          groupsControlledByBots++;\r\n      }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupsControlledByBots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"botControlledPOIs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create100accounts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create50accounts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositsPenaltiesPerBotPOI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]", "ContractName": "TestBotAttack", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}