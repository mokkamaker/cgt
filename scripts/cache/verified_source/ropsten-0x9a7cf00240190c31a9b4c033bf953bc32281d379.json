{"status": "1", "message": "OK", "result": [{"SourceCode": "contract mortal{\r\n    address public admin;\r\n    function mortal(){\r\n        admin=msg.sender;\r\n    }\r\n    modifier onlyAdmin{\r\n        if (msg.sender != admin) throw;\r\n            _;\r\n    }\r\n    function kill() onlyAdmin{\r\n        suicide(admin);\r\n    }\r\n}\r\ncontract PoQ is mortal{\r\n    struct Trc{\r\n        address     owner; \r\n        bytes32     tophashanalisimp;\r\n        bytes32     hashelencocomp;\r\n        bytes32     hcprodlotto;\r\n    }\r\n    struct Prd{\r\n        address     owner;\r\n        string      prodotto; \r\n        string      lotto;\r\n        string      descrizione;\r\n        uint        datainserimento;\r\n        bytes32     tophashanalisiprod;\r\n    }\r\n\r\n    \r\n    //trackings indicizzato tramite tophash analisi prodotto (garantisce che siano univoche)\r\n    mapping (bytes32 => Trc)  trcs;\r\n    mapping (bytes32 => Prd)  prds;\r\n\r\n    \r\n    uint totprodotti;\r\n\r\n    event insPrd(string tipo, string _prod,string _lott, bytes32 _tophasprod,bytes32 _tophashmp);\r\n\r\n    /*event eliminatoProdotto(address _eliminatoda, bytes32 _hashprodlotto);*/\r\n  \r\n    function aggiungi(string _prodotto,string _lotto, string _descrizione, bytes32 _tophashanalisiprod,bytes32 _tophashanalisimp, bytes32 _hashelencocomp)\r\n    onlyAdmin  returns (bool result) {\r\n        bytes32 _hashcodeprodlotto=sha3(_prodotto,_lotto);\r\n        Prd p = prds[_hashcodeprodlotto];\r\n        if (p.owner != 0) throw; \r\n        Trc t = trcs[_tophashanalisiprod];\r\n        if (t.owner!=0) throw; \r\n\r\n       \r\n        p.owner=msg.sender;\r\n        p.datainserimento=now;\r\n        p.prodotto=_prodotto;\r\n        p.lotto=_lotto;\r\n        p.descrizione= _descrizione;\r\n\t\tp.tophashanalisiprod=_tophashanalisiprod;\r\n        t.owner=msg.sender;\r\n        t.tophashanalisimp=_tophashanalisimp;\r\n        t.hashelencocomp=_hashelencocomp;\r\n        t.hcprodlotto=_hashcodeprodlotto;\r\n        \r\n        totprodotti++;\r\n        insPrd(\"AGGIUNTO\", _prodotto, _lotto, _tophashanalisiprod,_tophashanalisimp);\r\n        result=true;\r\n    }\r\n\r\n\r\n    function infoProd(string _prodotto,string _lotto) public constant returns(uint _indiceProdotto, string _descrizione, bytes32 _tophashanalisiprodotto, bytes32 _tophashanalisimp, bytes32 _hashelencocomp,  uint _dataInserimento){\r\n        bytes32 hcprodlot=sha3(_prodotto,_lotto);\r\n        if (prds[hcprodlot].owner== 0) throw; \r\n        _tophashanalisiprodotto=prds[hcprodlot].tophashanalisiprod;\r\n        _descrizione = prds[hcprodlot].descrizione;\r\n        _tophashanalisimp=trcs[_tophashanalisiprodotto].tophashanalisimp;\r\n        _hashelencocomp=trcs[_tophashanalisiprodotto].hashelencocomp;\r\n        _dataInserimento=prds[hcprodlot].datainserimento;\r\n    }\r\n    \r\n    function cercaTopHashAnalisiProdotto(bytes32 _topHashAnProdotto) public constant returns(string _prodotto, string _lotto, bytes32 _tophashanalisiprodotto, bytes32 _tophashanalisimp, bytes32 _hashelencocomp, uint _dataInserimento){\r\n        if (trcs[_topHashAnProdotto].owner==0) throw; //se il tophash non esiste sollevo eccezione\r\n        _tophashanalisimp=trcs[_topHashAnProdotto].tophashanalisimp;\r\n        bytes32 hcprodlot=trcs[_topHashAnProdotto].hcprodlotto;\r\n        _prodotto=prds[hcprodlot].prodotto;\r\n        _lotto=prds[hcprodlot].lotto;\r\n        _tophashanalisiprodotto=prds[hcprodlot].tophashanalisiprod;\r\n        _tophashanalisimp=trcs[_tophashanalisiprodotto].tophashanalisimp;\r\n        _dataInserimento=prds[hcprodlot].datainserimento;\r\n        _hashelencocomp=trcs[_topHashAnProdotto].hashelencocomp;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_prodotto\",\"type\":\"string\"},{\"name\":\"_lotto\",\"type\":\"string\"}],\"name\":\"infoProd\",\"outputs\":[{\"name\":\"_indiceProdotto\",\"type\":\"uint256\"},{\"name\":\"_descrizione\",\"type\":\"string\"},{\"name\":\"_tophashanalisiprodotto\",\"type\":\"bytes32\"},{\"name\":\"_tophashanalisimp\",\"type\":\"bytes32\"},{\"name\":\"_hashelencocomp\",\"type\":\"bytes32\"},{\"name\":\"_dataInserimento\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_topHashAnProdotto\",\"type\":\"bytes32\"}],\"name\":\"cercaTopHashAnalisiProdotto\",\"outputs\":[{\"name\":\"_prodotto\",\"type\":\"string\"},{\"name\":\"_lotto\",\"type\":\"string\"},{\"name\":\"_tophashanalisiprodotto\",\"type\":\"bytes32\"},{\"name\":\"_tophashanalisimp\",\"type\":\"bytes32\"},{\"name\":\"_hashelencocomp\",\"type\":\"bytes32\"},{\"name\":\"_dataInserimento\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prodotto\",\"type\":\"string\"},{\"name\":\"_lotto\",\"type\":\"string\"},{\"name\":\"_descrizione\",\"type\":\"string\"},{\"name\":\"_tophashanalisiprod\",\"type\":\"bytes32\"},{\"name\":\"_tophashanalisimp\",\"type\":\"bytes32\"},{\"name\":\"_hashelencocomp\",\"type\":\"bytes32\"}],\"name\":\"aggiungi\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tipo\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_prod\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_lott\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_tophasprod\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tophashmp\",\"type\":\"bytes32\"}],\"name\":\"insPrd\",\"type\":\"event\"}]", "ContractName": "PoQ", "CompilerVersion": "v0.4.4+commit.4633f3de", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}