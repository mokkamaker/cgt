{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.8;\r\n\r\n/*\r\n  \r\n  Crowdsale Smart Contract for the iEx.ec project\r\n\r\n  This smart contract collects ETH and BTC, and in turn emits RLC tokens\r\n\r\n  Thanks to BeyondTheVoid who helped us shaping this code.\r\n\r\n */\r\ncontract Token {\r\n\tfunction balanceOf(address user) constant returns (uint256 balance);\r\n\tfunction transfer(address receiver, uint amount) returns(bool);\r\n}\r\n\r\n\r\ncontract Crowdsale {\r\n\r\n  \tstruct BackerETH {\r\n\t  uint weiReceived;\t// Amount of ETH given\r\n\t  uint rlcToSend;  \t// rlc to distribute when the min cap is reached\r\n\t}\r\n\r\n  \tstruct BackerBTC {\r\n\t  string btc_address;  //store the btc address (?)\r\n\t  uint satoshiReceived;\t// Amount of BTC given\r\n\t  uint rlcToSend;   \t// rlc to distribute when the min cap is reached\r\n\t}\r\n\r\n\tToken \tpublic RLC;         // RLC contract reference\r\n\taddress public owner;       // Contract owner (iEx.ec team)\r\n\taddress public multisigETH; // Multisig contract that will receive the ETH\r\n\tuint public RLCPerETH;      // Number of RLC per ETH\r\n\tuint public RLCPerBTC;      // Number of RLC per BTC\r\n\tuint public receivedETH;    // Number of ETH received\r\n\tuint public receivedBTC;    // Number of BTC received\r\n\tuint public RLCSentToETH;   // Number of RLC sent to ETH contributors\r\n\tuint public RLCSentToBTC;   // Number of RLC sent to BTC contributors\r\n\tuint public startBlock;     // Crowdsale start block\r\n\tuint public endBlock;       // Crowdsale end block\r\n\tuint public minCap;         // Minimum number of RLC to distribute\r\n\tuint public maxCap;         // Maximum number of RLC to distribute\r\n\tbool public minCapReached;  // Min cap has been reached\r\n\tbool public maxCapReached;  // Max cap has been reached\r\n\tuint public minInvestETH;   // Minimum amount to invest\r\n\tuint public minInvestBTC;   // Minimum amount to invest\r\n\r\n\tmapping(address => BackerETH) public backersETH; //backersETH indexed by their ETH address\r\n\tmapping(address => BackerBTC) public backersBTC; //backersBTC indexed by their (BTC,ETH) address\r\n\r\n    // Auth modifier, if the msg.sender isn't the expected address, throw.\r\n\tmodifier onlyBy(address a){\r\n\t    if (msg.sender != a) throw;  \r\n\t    _;\r\n\t}\r\n\r\n\tevent ETHReceived(address);\r\n\tevent BTCReceived(string,address);\r\n\r\n\t// Constructor of the contract.\r\n\tfunction Crowdsale() {\r\n\t\t\r\n\t  //set the different variables\r\n\t  owner = msg.sender;\r\n\t  RLC = Token(0x0a8f269d52fad5f0f6297a264f48cbb290c68130); \t// RLC contract address\r\n\t  multisigETH = 0x8cd6B3D8713df6aA35894c8beA200c27Ebe92550;\r\n\t  owner = msg.sender;\r\n\t  minInvestETH = 100 finney; // approx 1 USD\r\n\t  minInvestBTC = 100000;     // approx 1 USD\r\n\t  startBlock = 1 ;            // now (testnet)\r\n\t  endBlock =  1578450;        // ever (testnet) startdate + 30 days\r\n\t  RLCPerBTC = 50000;         // 5000 RLC par BTC == 50,000 RLC per satoshi\r\n\t  RLCPerETH = 5000;          // FIXME\r\n\t  minCap=10;\r\n\t}\r\n\r\n\t// The anonymous function corresponds to a donation in ETH\r\n\tfunction(){\r\n\t  receiveETH(msg.sender);\r\n\t}\r\n\t\r\n\tfunction receiveETH(address beneficiary) payable{\r\n\t  //don't accept funding under a predefined treshold\r\n\t  if (msg.value > minInvestETH) throw;\r\n\r\n\t  // if we are in the correct time slot\r\n\t  if ((now > endBlock) || (now < startBlock )) throw;  \r\n\r\n\t  //compute the number of RLC to send\r\n\t  uint rlcToSend = bonus((msg.value*RLCPerETH)/(1 ether));\r\n\t  \r\n\t  //update the backer\r\n\t  BackerETH backer = backersETH[beneficiary];\r\n\t  backer.weiReceived += msg.value;\r\n\t  \r\n\t  if (!transferRLC(beneficiary, rlcToSend)) throw;     \r\n\t  \r\n\t  receivedETH += msg.value;    // Update the total wei collcted during the crowdfunding     \r\n\t  RLCSentToETH += rlcToSend;\r\n\t  minCapReached = (RLCSentToETH + RLCSentToBTC) > minCap;\r\n\r\n\t  ETHReceived(beneficiary);\r\n\t  \r\n\t}\r\n\r\n\t// When the minimum cap is reached, ETH are moved to a specific address\r\n\tfunction withdrawETH(address to, uint amount) onlyBy (owner){\r\n\t  if (!minCapReached) throw;\r\n\t  var r = to.send(amount);\r\n\t}\r\n\r\n\t// When the minimum cap is reached, RLC are moved to a specific address\r\n\tfunction withdrawRLC(address to, uint amount) onlyBy(owner){\r\n\t  if (!minCapReached) throw;\r\n\t  RLC.transfer(to, amount);\r\n\t}\r\n\r\n\t/*\r\n\t  Compute the RLC bonus\r\n\t  \r\n\t*/\r\n\t\r\n\tfunction bonus(uint amount) returns (uint) {\r\n\t  if (now < (startBlock + 10 days)) return (amount + amount/5);\r\n\t  if (now < startBlock + 20 days) return (amount + amount/10);\r\n\t  return amount;\r\n\t}\r\n\t/*\r\n\t  Transfer RLC to backers\r\n\t  Assumes that the owner of the token contract and the crowdsale contract is the same\r\n\t */\r\n\t\r\n\tfunction transferRLC(address to, uint amount) internal returns (bool) {\r\n\t  return RLC.transfer(to, amount);\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backersBTC\",\"outputs\":[{\"name\":\"btc_address\",\"type\":\"string\"},{\"name\":\"satoshiReceived\",\"type\":\"uint256\"},{\"name\":\"rlcToSend\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RLCSentToBTC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RLCSentToETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RLCPerBTC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RLC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receivedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"receiveETH\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backersETH\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"rlcToSend\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestBTC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receivedBTC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RLCPerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRLC\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"ETHReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"BTCReceived\",\"type\":\"event\"}]", "ContractName": "Crowdsale", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9e5e8c17bab2f77168c5ae811bcf24e189c587c1df933c230cf09dd4373457a3"}]}