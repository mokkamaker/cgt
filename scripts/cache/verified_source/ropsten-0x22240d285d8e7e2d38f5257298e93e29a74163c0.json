{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.0;\r\n\r\n/*\r\nDocumentRegistry\r\n\r\nContract used to register hashes of files to proof the original authoring of them.\r\nAllows to register any attributes to a file;\r\nOwner can transfer the ownership. \r\nContract accept donation to documents registereds.\r\n\r\nWritten by Ricardo Guilherme Schmidt <3esmit@gmail.com>\r\n*/\r\n\r\ncontract DocumentRegistry {\r\n\r\n    event DocumentRegister(address _owner, bytes32 _hash, uint _time);\r\n    event Transfer(bytes32 _hash, address _newOwner);\r\n    event Donate(bytes32 _hash, address _donator, uint _value);\r\n\r\n    struct Document{\r\n        address owner;\r\n        uint owned_pos;\r\n        uint time;\r\n        string[] attributes;\r\n        mapping (string => Attribute) data;\r\n    }\r\n    \r\n    struct Attribute{\r\n        string value;\r\n        uint attributes_pos;\r\n        uint updated;\r\n    }\r\n    \r\n\r\n    modifier only_owner (bytes32 _hash){ if(documents[_hash].owner != msg.sender) throw; _; }\r\n    modifier is_owned (bytes32 _hash){ if(documents[_hash].owner == 0x0) throw; _; }\r\n    modifier not_owned (bytes32 _hash){ if(documents[_hash].owner != 0x0) throw; _; }\r\n    \r\n    mapping(address => bytes32[]) public owned;\r\n    mapping(bytes32 => Document) public documents;\r\n    \r\n    function () { throw; }\r\n    \r\n    function register(bytes32 _hash) not_owned(_hash){\r\n       registerTo(msg.sender, _hash);\r\n    }    \r\n    \r\n    function registerTo(address _owner, bytes32 _hash) not_owned(_hash){\r\n        documents[_hash].owner = _owner; \r\n        documents[_hash].time = now;\r\n        addToOwner(_owner,_hash);\r\n        DocumentRegister(_owner, _hash, block.timestamp);\r\n    }\r\n\r\n    function setData( bytes32 _hash, string _name, string _data)  only_owner(_hash){\r\n        if(documents[_hash].data[_name].updated == 0){\r\n            documents[_hash].data[_name].attributes_pos = documents[_hash].attributes.length;\r\n            documents[_hash].attributes.push(_name);\r\n        }\r\n        documents[_hash].data[_name].value = _data;\r\n        documents[_hash].data[_name].updated = now;\r\n        \r\n    }\r\n    \r\n    function clearData(bytes32 _hash, string _name) only_owner(_hash){\r\n        if(documents[_hash].data[_name].updated == 0) return;\r\n        documents[_hash].attributes[documents[_hash].data[_name].attributes_pos] = documents[_hash].attributes[documents[_hash].attributes.length-1];\r\n        delete documents[_hash].attributes[documents[_hash].attributes.length-1];\r\n        documents[_hash].attributes.length--;\r\n        delete documents[_hash].data[_name];\r\n    }\r\n\r\n    function transfer(bytes32 _hash, address _newOwner) only_owner(_hash){\r\n        if(_newOwner == msg.sender) return;\r\n        removeOwned(msg.sender,_hash);\r\n        addToOwner(_newOwner,_hash);\r\n        documents[_hash].owner = _newOwner;\r\n        Transfer(_hash,_newOwner);\r\n    }\r\n    \r\n    function donate(bytes32 _hash) payable is_owned(_hash){\r\n        if(documents[_hash].owner.send(msg.value))\r\n            Donate(_hash,msg.sender,msg.value);\r\n    }\r\n    \r\n    function getOwned(address _owner) constant returns (bytes32[] documents){\r\n        return owned[_owner];\r\n    }\r\n    \r\n    function getAttributeData(bytes32 _hash, string _name) constant returns (string data,uint updated){\r\n        return (documents[_hash].data[_name].value, documents[_hash].data[_name].updated);\r\n    }\r\n    \r\n    function getAttributeName(bytes32 _hash, uint pos) constant returns (string){\r\n        return documents[_hash].attributes[pos];\r\n    }\r\n   \r\n   function getTotalAttributes(bytes32 _hash) constant returns (uint){\r\n        return documents[_hash].attributes.length;\r\n    }\r\n    \r\n    function removeOwned(address _owner,bytes32 _hash) internal {\r\n        owned[_owner][documents[_hash].owned_pos] = owned[_owner][owned[_owner].length-1];\r\n        delete owned[_owner][owned[_owner].length-1];\r\n        owned[_owner].length--;\r\n    }\r\n    \r\n    function addToOwner(address _owner, bytes32 _hash) internal {\r\n        owned[_owner].push(_hash);\r\n        documents[_hash].owned_pos = owned[_owner].length-1;\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"getAttributeName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"documents\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"owned_pos\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owned\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"registerTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwned\",\"outputs\":[{\"name\":\"documents\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setData\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"clearData\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getTotalAttributes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAttributeData\",\"outputs\":[{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"updated\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"DocumentRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_donator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"}]", "ContractName": "DocumentRegistry", "CompilerVersion": "v0.4.9+commit.364da425", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f0626bddecf1fa6bd15af43eec9b6296cf89c7c91238332d0ca37dd085a380a2"}]}