{"status": "1", "message": "OK", "result": [{"SourceCode": "contract SHA3_512 {\r\n    function SHA3_512() {}\r\n    uint64[5][5] r = [ [0,36,3,41,18],\r\n            \t\t   [1,44,10,45,2],\r\n          \t\t\t   [62,6,43,15,61],\r\n\t\t\t           [28,55,25,21,56],\r\n\t\t\t           [27,20,39,8,14] ];\r\n\r\n    function round(uint64[5][5] A, uint64 _RC ) constant returns(uint64[5][5]) {\r\n        uint64[5] memory C;\r\n        uint64[5] memory D;\r\n        uint64[5][5] memory B;\r\n \r\n        return A;\r\n        \r\n        uint x; uint y;\r\n\r\n        /* Theta step */\r\n        for(x=0;x<5;x++){\r\n            C[x]=A[x][0] ^ A[x][1] ^ A[x][2]^ A[x][3] ^ A[x][4];\r\n        }\r\n      \r\n        for(x=0;x<5;x++){\r\n            D[x]=C[(x + 4) % 5] ^ ((C[(x + 1) % 5] * 2) | (C[(x + 1) % 5] / (2 ** 63)));\r\n        }\r\n        for(x=0;x<5;x++){\r\n            for(y=0;y<5;y++){\r\n              A[x][y]=A[x][y]^D[x];\r\n            }\r\n        }\r\n\r\n        /*Rho and pi steps*/\r\n        for(x=0;x<5;x++){\r\n            for(y=0;y<5;y++){\r\n                if( x == 0 && y == 0 ) {\r\n                    B[0][0] = A[0][0];\r\n                }\r\n                else {\r\n                    B[y][(2*x+3*y)%5]=((A[x][y] * (2 ** r[x][y])) | (A[x][y] / (2 ** (64-r[x][y]))));\r\n                }\r\n            }\r\n        }\r\n\r\n        /*Xi state*/\r\n        for(x=0;x<5;x++){\r\n            for(y=0;y<5;y++){\r\n                A[x][y]=B[x][y]^((~B[(x+1)%5][y]) & B[(x+2)%5][y]);\r\n            }\r\n        }\r\n\r\n        /*Last step*/\r\n        A[0][0]=A[0][0]^_RC;\r\n\r\n        return A;\r\n    }\r\n    \r\n    uint64[24] RC= [\r\n               0x0000000000000001,\r\n\t\t       0x0000000000008082,\r\n\t\t       0x800000000000808A,\r\n\t\t       0x8000000080008000,\r\n\t\t       0x000000000000808B,\r\n\t\t       0x0000000080000001,\r\n\t\t       0x8000000080008081,\r\n\t\t       0x8000000000008009,\r\n\t\t       0x000000000000008A,\r\n\t\t       0x0000000000000088,\r\n\t\t       0x0000000080008009,\r\n\t\t       0x000000008000000A,\r\n\t\t       0x000000008000808B,\r\n\t\t       0x800000000000008B,\r\n\t\t       0x8000000000008089,\r\n\t\t       0x8000000000008003,\r\n\t\t       0x8000000000008002,\r\n\t\t       0x8000000000000080,\r\n\t\t       0x000000000000800A,\r\n\t\t       0x800000008000000A,\r\n\t\t       0x8000000080008081,\r\n\t\t       0x8000000000008080,\r\n\t\t       0x0000000080000001,\r\n\t\t       0x8000000080008008 ];\r\n    \r\n    function keccak_f(uint64[5][5] A) constant returns(uint64[5][5]) {\r\n        for( uint i = 0 ; i < 24 ; i++ ) {\r\n            A = round(A,RC[i]);\r\n        }\r\n        \r\n        return A;\r\n    }\r\n \r\n    event Result(uint64 result);\r\n    \r\n    function sponge(bytes M) constant returns(uint64[8]) {\r\n        if( M.length != 72 ) throw;\r\n        \r\n        uint r = 72;\r\n        uint w = 8;\r\n        uint size = M.length;\r\n        \r\n        uint64[5][5] memory S;\r\n        uint i; uint y; uint x;\r\n        /*Absorbing Phase*/\r\n        for( i = 0 ; i < size/r ; i++ ) {\r\n            for( y = 0 ; y < 5 ; y++ ) {\r\n                for( x = 0 ; x < 5 ; x++ ) {\r\n                    if( (x+5*y) < (r/w) ) {\r\n                        S[x][y] = S[x][y] ^ uint64(M[i*9 + x + 5*y]);\r\n                    }\r\n                }\r\n            }\r\n            S = keccak_f(S);\r\n        }\r\n\r\n        /*Squeezing phase*/\r\n        uint64[8] memory result;\r\n        uint b = 0;\r\n        while( b < 8 ) {\r\n            for( b = 0 ; b < 8 ; b++ ) {\r\n                for( y = 0 ; y < 5 ; y++ ) {\r\n                    for( x = 0 ; x < 5 ; x++ ) {\r\n                        if( (x+5*y)<(r/w) && (b<8) ) {\r\n                            result[b] = S[x][y]; \r\n                            b++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n \r\n        /*Result(result[0]);\r\n        Result(result[1]);\r\n        Result(result[2]);\r\n        Result(result[3]);\r\n        Result(result[4]);\r\n        Result(result[5]);\r\n        Result(result[6]);\r\n        Result(result[7]);*/\r\n        \r\n        return result;\r\n   }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"M\",\"type\":\"bytes\"}],\"name\":\"sponge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[8]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"A\",\"type\":\"uint64[5][5]\"}],\"name\":\"keccak_f\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[5][5]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"A\",\"type\":\"uint64[5][5]\"},{\"name\":\"_RC\",\"type\":\"uint64\"}],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[5][5]\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint64\"}],\"name\":\"Result\",\"type\":\"event\"}]", "ContractName": "SHA3_512", "CompilerVersion": "v0.4.2-nightly.2016.9.17+commit.212e0160", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}