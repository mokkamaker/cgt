{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.9;\r\n\r\ncontract CoinbasePriceTicker {\r\n      function getCurrentTimestamp() constant returns (uint);\r\n      function getPrice(uint) constant returns (uint);\r\n      function getCurrentPrice() constant returns(uint);\r\n}\r\n\r\ncontract Seglos{\r\n\r\n    address Admin;\r\n    CoinbasePriceTicker public PriceContract;\r\n    bool public Open;\r\n    uint public Fee; // current fee charged on each trade, out of 1000\r\n    uint public liquidityPool; // the ammount in the lending pool not loaned out\r\n    uint public tradeId; // unique auto incromented id given to each trade\r\n    uint public tradingLimit;\r\n\r\n    struct Trade { // trade assigned to a trader\r\n      address trader;\r\n      uint eth;\r\n      uint time;\r\n      uint exit;\r\n    }\r\n\r\n    mapping ( address => uint[] ) private trader; // to find the list of a traders trades\r\n    mapping ( uint => Trade ) private trades; // to give a unique id to each trader\r\n\r\n    event createTradeEvent(address user, uint tradeId);\r\n    event exitTradeEvent(address user, uint tradeId);\r\n\r\n    function Seglos() {\r\n      Admin = msg.sender;\r\n      liquidityPool = 0;\r\n      tradeId = 0;\r\n      Open = true;\r\n      tradingLimit = 1;\r\n      PriceContract = CoinbasePriceTicker(\"0x1A3f9356356b9423BFb465316e889EBBEBEde1ED\");\r\n    }\r\n\r\n    function createTrade() payable {\r\n      // creates the trade by subtracting a fee and recording trade data\r\n\r\n      uint fee = msg.value * Fee / 100000;\r\n      uint eth = msg.value - fee;\r\n\r\n      if (!Open)\r\n        throw; // asserst that the exchange is open\r\n\r\n      if (eth < tradingLimit)\r\n        throw; // asserts the trade ammount meets the trading limit\r\n\r\n      if (liquidityPool < eth)\r\n        throw; // asserts that the liquidityPool has enough ethereum\r\n\r\n      liquidityPool = liquidityPool - eth + fee;\r\n\r\n      tradeId++;\r\n\r\n      trades[tradeId] = Trade(msg.sender, eth*2, getCurrentTimestamp(), 0);\r\n\r\n      trader[msg.sender].push(tradeId);\r\n\r\n      createTradeEvent(msg.sender, tradeId);\r\n    }\r\n\r\n    function exitTrade(uint _trade) {\r\n      // distributes profits and loses from the trade\r\n\r\n      Trade trade = trades[_trade];\r\n      bool expired = false;\r\n      bool marginCall = false;\r\n\r\n      if (trade.exit != 0)\r\n        throw;\r\n\r\n      if (now >= trade.time + 1 weeks)\r\n        expired = true;\r\n\r\n      if (getCurrentPrice() <= getPrice(trade.time)/2)\r\n        marginCall = true;\r\n\r\n      // if the trade has expired or hit the margin call anyone can exit the trade\r\n      if ((msg.sender != trade.trader && msg.sender != Admin) && !(expired || marginCall)) // some how allow admin\r\n        throw;\r\n\r\n      trade.exit = getCurrentTimestamp();\r\n\r\n      if (marginCall){\r\n\r\n        liquidityPool = liquidityPool + trade.eth;\r\n\r\n      }else {\r\n\r\n        uint fundEth = trade.eth * getPrice(trade.time) / (2 * getCurrentPrice());\r\n\r\n        liquidityPool = liquidityPool + fundEth;\r\n\r\n        uint traderEth = trade.eth - fundEth;\r\n\r\n        bool sent = trade.trader.send(traderEth);\r\n\r\n        if(!sent)\r\n          throw;\r\n\r\n      }\r\n\r\n      exitTradeEvent(trade.trader, _trade);\r\n    }\r\n\r\n    function getTradersList() constant returns (uint[]) {\r\n      // returns an array of trade Id's that belong to the user\r\n      return trader[msg.sender];\r\n    }\r\n\r\n    function getTrade(uint _trade) constant returns (uint eth, uint time, uint exit) {\r\n      // When given the trade id it returns the data for that trade\r\n      Trade trade = trades[_trade];\r\n      return (trade.eth, trade.time, trade.exit );\r\n    }\r\n\r\n    function getCurrentPrice() constant returns (uint currentPrice) {\r\n      // gets the current exchange rate of ETH/USD from the price contract\r\n      return PriceContract.getCurrentPrice();\r\n    }\r\n\r\n    function getPrice(uint _time) constant returns (uint price) {\r\n      // gets the current exchange of ETH/USD at a certain time from the price contract\r\n      return PriceContract.getPrice(_time);\r\n    }\r\n\r\n    function getCurrentTimestamp() constant returns (uint currentTimestamp){\r\n      // gets the current timestamp of the most recent exchange rate from the price contract\r\n      return PriceContract.getCurrentTimestamp();\r\n    }\r\n\r\n    function Door(bool _door){\r\n      // to close down the exchange or open it back up and allow the creation of new trades\r\n      if ( msg.sender != Admin)\r\n          throw;\r\n      Open = _door;\r\n    }\r\n\r\n    function setFee(uint _fee) {\r\n      // the percentage to charge of each trade, out of 100000\r\n      if ( msg.sender != Admin)\r\n          throw;\r\n      Fee = _fee;\r\n    }\r\n\r\n    function setTradingLimit(uint _limit) {\r\n      // the percentage to charge of each trade, out of 100000\r\n      if ( msg.sender != Admin)\r\n          throw;\r\n      tradingLimit = _limit;\r\n    }\r\n\r\n    function depositLiquidity() payable {\r\n      if ( msg.sender != Admin)\r\n          throw;\r\n      liquidityPool = liquidityPool + msg.value;\r\n    }\r\n\r\n    function withdrawLiquidity(uint _eth) {\r\n\r\n      if ( msg.sender != Admin)\r\n          throw;\r\n\r\n      if (liquidityPool < _eth)\r\n          throw;\r\n\r\n      liquidityPool = liquidityPool - _eth;\r\n\r\n      if(!msg.sender.send(_eth))\r\n        throw;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"tradeId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trade\",\"type\":\"uint256\"}],\"name\":\"exitTrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PriceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setTradingLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trade\",\"type\":\"uint256\"}],\"name\":\"getTrade\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"exit\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTradersList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_door\",\"type\":\"bool\"}],\"name\":\"Door\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTrade\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositLiquidity\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"createTradeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"exitTradeEvent\",\"type\":\"event\"}]", "ContractName": "Seglos", "CompilerVersion": "v0.4.9+commit.364da425", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4c600f489e16676c5b9e694a1d3fe2fa75481bcae70c94b5f807a437284df500"}]}