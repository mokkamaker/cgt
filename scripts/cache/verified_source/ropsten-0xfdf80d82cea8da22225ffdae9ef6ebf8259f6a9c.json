{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.1;\r\ncontract SHA3_512 {\r\n    function SHA3_512() {}\r\n\r\n    event Result(uint result);\r\n\r\n\r\n    function keccak_f(uint[5][5] A) constant returns(uint[5][5]) {\r\n        //uint[5][5] memory A = _A;\r\n        uint[5] memory C;\r\n        uint D_0;uint D_1;uint D_2;uint D_3;uint D_4;\r\n        uint[5][5] memory B;\r\n        \r\n        uint[24] memory RC= [\r\n                   uint(0x0000000000000001),\r\n    \t\t       0x0000000000008082,\r\n    \t\t       0x800000000000808A,\r\n    \t\t       0x8000000080008000,\r\n    \t\t       0x000000000000808B,\r\n    \t\t       0x0000000080000001,\r\n    \t\t       0x8000000080008081,\r\n    \t\t       0x8000000000008009,\r\n    \t\t       0x000000000000008A,\r\n    \t\t       0x0000000000000088,\r\n    \t\t       0x0000000080008009,\r\n    \t\t       0x000000008000000A,\r\n    \t\t       0x000000008000808B,\r\n    \t\t       0x800000000000008B,\r\n    \t\t       0x8000000000008089,\r\n    \t\t       0x8000000000008003,\r\n    \t\t       0x8000000000008002,\r\n    \t\t       0x8000000000000080,\r\n    \t\t       0x000000000000800A,\r\n    \t\t       0x800000008000000A,\r\n    \t\t       0x8000000080008081,\r\n    \t\t       0x8000000000008080,\r\n    \t\t       0x0000000080000001,\r\n    \t\t       0x8000000080008008 ];\r\n        \r\n         \r\n        for( uint i = 0 ; i < 24 ; i++ ) {\r\n\t\t\t/* Theta step */\r\n\t\t\tC[0]=A[0][0]^A[0][1]^A[0][2]^A[0][3]^A[0][4];\r\n\t\t\tC[1]=A[1][0]^A[1][1]^A[1][2]^A[1][3]^A[1][4];\r\n\t\t\tC[2]=A[2][0]^A[2][1]^A[2][2]^A[2][3]^A[2][4];\r\n\t\t\tC[3]=A[3][0]^A[3][1]^A[3][2]^A[3][3]^A[3][4];\r\n\t\t\tC[4]=A[4][0]^A[4][1]^A[4][2]^A[4][3]^A[4][4];\r\n\r\n\t\t\tD_0=C[4] ^ ((C[1] * 2) | (C[1] / (2 ** 63)));\r\n\t\t\tD_1=C[0] ^ ((C[2] * 2) | (C[2] / (2 ** 63)));\r\n\t\t\tD_2=C[1] ^ ((C[3] * 2) | (C[3] / (2 ** 63)));\r\n\t\t\tD_3=C[2] ^ ((C[4] * 2) | (C[4] / (2 ** 63)));\r\n\t\t\tD_4=C[3] ^ ((C[0] * 2) | (C[0] / (2 ** 63)));\r\n\r\n\t\t\tA[0][0]=A[0][0] ^ D_0;\r\n\t\t\tA[0][1]=A[0][1] ^ D_0;\r\n\t\t\tA[0][2]=A[0][2] ^ D_0;\r\n\t\t\tA[0][3]=A[0][3] ^ D_0;\r\n\t\t\tA[0][4]=A[0][4] ^ D_0;\r\n\t\t\tA[1][0]=A[1][0] ^ D_1;\r\n\t\t\tA[1][1]=A[1][1] ^ D_1;\r\n\t\t\tA[1][2]=A[1][2] ^ D_1;\r\n\t\t\tA[1][3]=A[1][3] ^ D_1;\r\n\t\t\tA[1][4]=A[1][4] ^ D_1;\r\n\t\t\tA[2][0]=A[2][0] ^ D_2;\r\n\t\t\tA[2][1]=A[2][1] ^ D_2;\r\n\t\t\tA[2][2]=A[2][2] ^ D_2;\r\n\t\t\tA[2][3]=A[2][3] ^ D_2;\r\n\t\t\tA[2][4]=A[2][4] ^ D_2;\r\n\t\t\tA[3][0]=A[3][0] ^ D_3;\r\n\t\t\tA[3][1]=A[3][1] ^ D_3;\r\n\t\t\tA[3][2]=A[3][2] ^ D_3;\r\n\t\t\tA[3][3]=A[3][3] ^ D_3;\r\n\t\t\tA[3][4]=A[3][4] ^ D_3;\r\n\t\t\tA[4][0]=A[4][0] ^ D_4;\r\n\t\t\tA[4][1]=A[4][1] ^ D_4;\r\n\t\t\tA[4][2]=A[4][2] ^ D_4;\r\n\t\t\tA[4][3]=A[4][3] ^ D_4;\r\n\t\t\tA[4][4]=A[4][4] ^ D_4;\r\n\r\n\t\t\t/*Rho and pi steps*/\r\n\t\t\tB[0][0]=A[0][0];\r\n\t\t\tB[1][3]=((A[0][1] * (2 ** 36)) | (A[0][1] / (2 ** 28)));\r\n\t\t\tB[2][1]=((A[0][2] * (2 ** 3)) | (A[0][2] / (2 ** 61)));\r\n\t\t\tB[3][4]=((A[0][3] * (2 ** 41)) | (A[0][3] / (2 ** 23)));\r\n\t\t\tB[4][2]=((A[0][4] * (2 ** 18)) | (A[0][4] / (2 ** 46)));\r\n\t\t\tB[0][2]=((A[1][0] * (2 ** 1)) | (A[1][0] / (2 ** 63)));\r\n\t\t\tB[1][0]=((A[1][1] * (2 ** 44)) | (A[1][1] / (2 ** 20)));\r\n\t\t\tB[2][3]=((A[1][2] * (2 ** 10)) | (A[1][2] / (2 ** 54)));\r\n\t\t\tB[3][1]=((A[1][3] * (2 ** 45)) | (A[1][3] / (2 ** 19)));\r\n\t\t\tB[4][4]=((A[1][4] * (2 ** 2)) | (A[1][4] / (2 ** 62)));\r\n\t\t\tB[0][4]=((A[2][0] * (2 ** 62)) | (A[2][0] / (2 ** 2)));\r\n\t\t\tB[1][2]=((A[2][1] * (2 ** 6)) | (A[2][1] / (2 ** 58)));\r\n\t\t\tB[2][0]=((A[2][2] * (2 ** 43)) | (A[2][2] / (2 ** 21)));\r\n\t\t\tB[3][3]=((A[2][3] * (2 ** 15)) | (A[2][3] / (2 ** 49)));\r\n\t\t\tB[4][1]=((A[2][4] * (2 ** 61)) | (A[2][4] / (2 ** 3)));\r\n\t\t\tB[0][1]=((A[3][0] * (2 ** 28)) | (A[3][0] / (2 ** 36)));\r\n\t\t\tB[1][4]=((A[3][1] * (2 ** 55)) | (A[3][1] / (2 ** 9)));\r\n\t\t\tB[2][2]=((A[3][2] * (2 ** 25)) | (A[3][2] / (2 ** 39)));\r\n\t\t\tB[3][0]=((A[3][3] * (2 ** 21)) | (A[3][3] / (2 ** 43)));\r\n\t\t\tB[4][3]=((A[3][4] * (2 ** 56)) | (A[3][4] / (2 ** 8)));\r\n\t\t\tB[0][3]=((A[4][0] * (2 ** 27)) | (A[4][0] / (2 ** 37)));\r\n\t\t\tB[1][1]=((A[4][1] * (2 ** 20)) | (A[4][1] / (2 ** 44)));\r\n\t\t\tB[2][4]=((A[4][2] * (2 ** 39)) | (A[4][2] / (2 ** 25)));\r\n\t\t\tB[3][2]=((A[4][3] * (2 ** 8)) | (A[4][3] / (2 ** 56)));\r\n\t\t\tB[4][0]=((A[4][4] * (2 ** 14)) | (A[4][4] / (2 ** 50)));\r\n\r\n\t\t\t/*Xi state*/\r\n\t\t\tA[0][0]=B[0][0]^((~B[1][0]) & B[2][0]);\r\n\t\t\tA[0][1]=B[0][1]^((~B[1][1]) & B[2][1]);\r\n\t\t\tA[0][2]=B[0][2]^((~B[1][2]) & B[2][2]);\r\n\t\t\tA[0][3]=B[0][3]^((~B[1][3]) & B[2][3]);\r\n\t\t\tA[0][4]=B[0][4]^((~B[1][4]) & B[2][4]);\r\n\t\t\tA[1][0]=B[1][0]^((~B[2][0]) & B[3][0]);\r\n\t\t\tA[1][1]=B[1][1]^((~B[2][1]) & B[3][1]);\r\n\t\t\tA[1][2]=B[1][2]^((~B[2][2]) & B[3][2]);\r\n\t\t\tA[1][3]=B[1][3]^((~B[2][3]) & B[3][3]);\r\n\t\t\tA[1][4]=B[1][4]^((~B[2][4]) & B[3][4]);\r\n\t\t\tA[2][0]=B[2][0]^((~B[3][0]) & B[4][0]);\r\n\t\t\tA[2][1]=B[2][1]^((~B[3][1]) & B[4][1]);\r\n\t\t\tA[2][2]=B[2][2]^((~B[3][2]) & B[4][2]);\r\n\t\t\tA[2][3]=B[2][3]^((~B[3][3]) & B[4][3]);\r\n\t\t\tA[2][4]=B[2][4]^((~B[3][4]) & B[4][4]);\r\n\t\t\tA[3][0]=B[3][0]^((~B[4][0]) & B[0][0]);\r\n\t\t\tA[3][1]=B[3][1]^((~B[4][1]) & B[0][1]);\r\n\t\t\tA[3][2]=B[3][2]^((~B[4][2]) & B[0][2]);\r\n\t\t\tA[3][3]=B[3][3]^((~B[4][3]) & B[0][3]);\r\n\t\t\tA[3][4]=B[3][4]^((~B[4][4]) & B[0][4]);\r\n\t\t\tA[4][0]=B[4][0]^((~B[0][0]) & B[1][0]);\r\n\t\t\tA[4][1]=B[4][1]^((~B[0][1]) & B[1][1]);\r\n\t\t\tA[4][2]=B[4][2]^((~B[0][2]) & B[1][2]);\r\n\t\t\tA[4][3]=B[4][3]^((~B[0][3]) & B[1][3]);\r\n\t\t\tA[4][4]=B[4][4]^((~B[0][4]) & B[1][4]);\r\n\r\n\t\t\t/*Last step*/\r\n\t\t\tA[0][0]=A[0][0]^RC[i];            \r\n        }\r\n\r\n        \r\n        return A;\r\n    }\r\n \r\n    \r\n    function sponge(uint[] M) constant returns(uint[8]) {\r\n        if( (M.length * 8) != 72 ) throw;\r\n        \r\n        uint r = 72;\r\n        uint w = 8;\r\n        uint size = M.length * 8;\r\n        \r\n        uint[5][5] memory S;\r\n        uint i; uint y; uint x;\r\n        /*Absorbing Phase*/\r\n        for( i = 0 ; i < size/r ; i++ ) {\r\n            for( y = 0 ; y < 5 ; y++ ) {\r\n                for( x = 0 ; x < 5 ; x++ ) {\r\n                    if( (x+5*y) < (r/w) ) {\r\n                        S[x][y] = S[x][y] ^ M[i*9 + x + 5*y];\r\n                    }\r\n                }\r\n            }\r\n            S = keccak_f(S);\r\n        }\r\n\r\n        /*Squeezing phase*/\r\n        uint[8] memory result;\r\n        uint b = 0;\r\n        while( b < 8 ) {\r\n            for( y = 0 ; y < 5 ; y++ ) {\r\n                for( x = 0 ; x < 5 ; x++ ) {\r\n                    if( (x+5*y)<(r/w) && (b<8) ) {\r\n                        result[b] = S[x][y]; \r\n                        b++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n \r\n        Result(result[0]);\r\n        Result(result[1]);\r\n        Result(result[2]);\r\n        Result(result[3]);\r\n        Result(result[4]);\r\n        Result(result[5]);\r\n        Result(result[6]);\r\n        Result(result[7]);\r\n        \r\n        return result;\r\n   }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"A\",\"type\":\"uint256[5][5]\"}],\"name\":\"keccak_f\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5][5]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"M\",\"type\":\"uint256[]\"}],\"name\":\"sponge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[8]\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"}]", "ContractName": "SHA3_512", "CompilerVersion": "v0.4.2-nightly.2016.9.17+commit.212e0160", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}