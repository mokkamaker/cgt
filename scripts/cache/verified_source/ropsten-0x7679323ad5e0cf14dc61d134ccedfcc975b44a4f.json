{"status": "1", "message": "OK", "result": [{"SourceCode": "contract FairExchange {\r\n\r\n    struct Instance{\r\n\t    uint NumberOfParties;\r\n\t    uint Fee;\r\n\t    uint JoinDeadline;\r\n\t    uint DeliverDeadline;\r\n\t    uint NumberJoined;\r\n\t    uint NumberDelivered;\r\n        uint[] DeliverData;\r\n\t    bool distributed;\r\n        mapping(uint => party) parties;\r\n    }\r\n    \r\n    \r\n    mapping(uint => Instance) instance;\r\n    \r\n    uint counter;\r\n\r\n\r\n\taddress constant owner = 0x0200D9d495E7d6aaDb0ce1470c42d9Ee995AbA11;\r\n\r\n\r\n    enum State {waiting, joined, delivered, finished}\r\n\t\r\n\tstruct party {\r\n\t\taddress adr;\r\n\t\tState state;\r\n\t\tuint balance;\r\n\t}\r\n\t\r\n\tfunction FairExchange(){\r\n\t    counter = 0;\r\n\t}\r\n\r\n\t\r\n\tfunction newInstance(address[] AddressesOfParties, uint _Fee, uint[] _DeliverData, uint _JoinDeadline, uint _DeliverDeadline) returns(uint){\r\n\t    counter += 1;\r\n\t    \r\n\t    Instance inst = instance[counter];\r\n\t    \r\n\t    inst.NumberOfParties = AddressesOfParties.length;\r\n\t    inst.Fee = _Fee;\r\n\t\tparty temp = inst.parties[1];\r\n        for(uint i = 0; i < AddressesOfParties.length; i++){\r\n            temp = inst.parties[i+1];\r\n            temp.adr = AddressesOfParties[i];\r\n            temp.state = State.waiting;\r\n        }\r\n\t\tinst.JoinDeadline = block.number + _JoinDeadline;\r\n\t\tinst.DeliverDeadline = inst.JoinDeadline + _DeliverDeadline;\r\n        for(i = 0; i < _DeliverData.length; i++)\r\n            inst.DeliverData.push(_DeliverData[i]);\r\n        inst.distributed = false;\r\n        \r\n\t    return counter;\r\n\t}\r\n\t\r\n\tfunction getData(uint index, uint number) constant returns(uint data){\r\n\t    if(number == 0)\r\n\t        return data = instance[index].DeliverData.length;\r\n\t    return data = instance[index].DeliverData[number-1];\r\n\t}\r\n\r\n\tfunction status(uint index) constant returns (uint numberJoined, uint numberDelivered){\r\n\t\tnumberJoined = instance[index].NumberJoined;\r\n\t\tnumberDelivered = instance[index].NumberDelivered;\r\n\t}\r\n\t\r\n\tfunction getDeadlines(uint index) constant returns(uint[2] Deadlines){\r\n\t    Deadlines[0] = instance[index].JoinDeadline;\r\n\t    Deadlines[1] = instance[index].DeliverDeadline;\r\n\t}\r\n\r\n\tfunction deposit(uint index, uint PartyNumber) payable{\r\n\t    Instance inst = instance[index];\r\n\t\tif(msg.value == inst.Fee){\r\n\t\t\tparty temp = inst.parties[PartyNumber];\r\n\t\t\tif(msg.sender == temp.adr && temp.state == State.waiting && block.number <= inst.JoinDeadline){\r\n\t\t\t\tinst.NumberJoined += 1;\r\n\t\t\t\ttemp.state = State.joined;\r\n\t\t\t} else throw;\r\n\t\t} else throw;\r\n\t}\r\n\r\n\tfunction deliver(uint index, uint PartyNumber, uint token, uint randomness){\r\n\t    Instance inst = instance[index];\r\n\t\tparty temp = inst.parties[PartyNumber];\r\n\t\tif(msg.sender == temp.adr && temp.state == State.joined && inst.NumberJoined == inst.NumberOfParties && block.number <= inst.DeliverDeadline && checkInput(index, PartyNumber, token, randomness)){\r\n\t\t\ttemp.state = State.delivered;\r\n\t\t\tinst.NumberDelivered += 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction finish(uint index, uint PartyNumber){\r\n\t    Instance inst = instance[index];\r\n\t\tparty temp = inst.parties[PartyNumber];\r\n\t\tif(msg.sender == temp.adr && inst.DeliverDeadline < block.number && (inst.distributed || distributeEther(index))){\r\n\t\t\ttemp.state == State.finished;\r\n            if(!msg.sender.send(temp.balance))\r\n                throw;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction refund(uint index, uint PartyNumber){\r\n\t    Instance inst = instance[index];\r\n\t\tparty temp = inst.parties[PartyNumber];\r\n\t\tif(msg.sender == temp.adr && temp.state == State.joined && inst.JoinDeadline < block.number && inst.NumberJoined < inst.NumberOfParties){\r\n\t\t\ttemp.state = State.finished;\r\n\t\t\tif(!msg.sender.send(inst.Fee))\r\n\t\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction checkInput(uint index, uint PartyNumber, uint token, uint randomness) private returns(bool){\r\n\t    if(instance[index].DeliverData[2*PartyNumber-2] == uint(sha3(token, randomness))){\r\n\t        instance[index].DeliverData[2*PartyNumber-1] = token;\r\n\t        return true;\r\n\t    }\r\n\t    return false;\r\n\t}\r\n\t\r\n\tfunction distributeEther(uint index) private returns (bool){\r\n\t    Instance inst = instance[index];\r\n\t    for(uint PartyNumber = 1; PartyNumber <= inst.NumberOfParties; PartyNumber++){\r\n\t        if(inst.parties[PartyNumber].state == State.delivered)\r\n\t            inst.parties[PartyNumber].balance = inst.Fee + (inst.NumberOfParties - inst.NumberDelivered)*inst.Fee/inst.NumberDelivered;\r\n\t    }\r\n\t    inst.distributed = true;\r\n\t    return true;\r\n\t}\r\n\r\n\tfunction kill(){\r\n\t\tif(msg.sender == owner)\r\n\t\t\tselfdestruct(owner);\r\n\t}\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"AddressesOfParties\",\"type\":\"address[]\"},{\"name\":\"_Fee\",\"type\":\"uint256\"},{\"name\":\"_DeliverData\",\"type\":\"uint256[]\"},{\"name\":\"_JoinDeadline\",\"type\":\"uint256\"},{\"name\":\"_DeliverDeadline\",\"type\":\"uint256\"}],\"name\":\"newInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"status\",\"outputs\":[{\"name\":\"numberJoined\",\"type\":\"uint256\"},{\"name\":\"numberDelivered\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"PartyNumber\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"data\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"PartyNumber\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDeadlines\",\"outputs\":[{\"name\":\"Deadlines\",\"type\":\"uint256[2]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"PartyNumber\",\"type\":\"uint256\"}],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"PartyNumber\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]", "ContractName": "FairExchange", "CompilerVersion": "v0.4.2+commit.af6afb04", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}