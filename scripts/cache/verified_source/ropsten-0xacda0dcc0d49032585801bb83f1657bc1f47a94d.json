{"status": "1", "message": "OK", "result": [{"SourceCode": "// Code is written for Solidity version 0.4.0 or newer (but not including 0.5.0)\r\npragma solidity ^0.4.0;\r\n\r\n// This contract is a simple greeter. \r\n/* It can \r\n        --> greet you\r\n        --> personalise your greeting\r\n        --> selfdestruct\r\n*/\r\n\r\ncontract Greeter{\r\n\t// The address of the creator should always be stored in order to reserve some rights, such as selfdestruction only for the creator of the contract.\r\n    // By default, the creator of a contract has no privileges.\r\n    address owner;\r\n    string public defaultGreeting = \"Hi!\";\r\n    // Similar to a hashtable: creates Person objects for every possible address.\r\n    mapping (address => Person) persons;\r\n\r\n    event OutputString(string output);\r\n    \r\n    // Functions in general are the executable units of code within a contract\r\n    // This function is the constructor --> It will be called during creation of the contract and cannot be called afterwards.\r\n    function Greeter() {\r\n        // this. is not needed in order to access a state variable\r\n        owner = msg.sender;\r\n        // Sets a special greeting for the contract owner.\r\n        persons[msg.sender].greeting = \"Aloha, chef!\";\r\n    }\r\n    \r\n    // Structs are custom defined types that can group several variables\r\n    struct Person {\r\n        // public address of an account \r\n        address addr;\r\n        string greeting;\r\n    }\r\n\r\n\t// Allows everyone to set a personal greeting or reset to default.\r\n    function setPersonalHi(string personalGreeting) public {\r\n        // The default value for every variable is 0. \r\n        if (bytes(personalGreeting).length != 0) {\r\n            persons[msg.sender].greeting = personalGreeting;\r\n        }\r\n        else {\r\n            persons[msg.sender].greeting = defaultGreeting;\r\n        }\r\n        OutputString(\"You successfully changed your personal greeting.\");\r\n    }\r\n\r\n\t// Greets a user\r\n    function sayHiToMe() constant public returns (string) {\r\n        if(bytes(persons[msg.sender].greeting).length == 0){\r\n            return defaultGreeting;\r\n        }\r\n        else{\r\n            return persons[msg.sender].greeting;\r\n        }\r\n    }\r\n    \r\n    // Selfdestructs the contract\r\n    function killMe() public {\r\n        \r\n        if (msg.sender == owner) {\r\n            // selfdestructs contract and sends remaining money to msg.sender\r\n            OutputString(\"The contract is dead now.\");\r\n            selfdestruct(owner);\r\n        }\r\n        else {\r\n            OutputString(\"Nice try. The contract is still up and alive!\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"defaultGreeting\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"personalGreeting\",\"type\":\"string\"}],\"name\":\"setPersonalHi\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sayHiToMe\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"output\",\"type\":\"string\"}],\"name\":\"OutputString\",\"type\":\"event\"}]", "ContractName": "Greeter", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://3cc9d0c855bb765cce037c85d91995f354beb1726d612766197787fe11ddce32"}]}