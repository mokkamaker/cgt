{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.7; \r\n \r\ncontract BaseSmartContract {\r\n    address creator; \r\n    function BaseSmartContract() public    {   creator = msg.sender;   }\r\n    \r\n    modifier onlyBy(address _account)\r\n    {\r\n        if (msg.sender != _account)\r\n            throw;\r\n        _;\r\n    }\r\n    \r\n    function kill() onlyBy(creator)\r\n    {               suicide(creator);     }\r\n    \r\n     function setCreator(address _creator)  onlyBy(creator)\r\n    {           creator = _creator;     }\r\n  \r\n}\r\ncontract SmartFoodProductionContract   is BaseSmartContract    \r\n{\r\n    string  public  Organization;\r\n    string  public  Product ;\r\n    address public  Production;\r\n    \r\n    function setOrganization(string _Organization)  onlyBy(creator)\r\n    {\r\n          Organization = _Organization;\r\n       \r\n    }\r\n    \r\n    function setProduct(string _Product)  onlyBy(creator)\r\n    {\r\n          Product = _Product;\r\n        \r\n    }\r\n    function setProduction(address _Production)  onlyBy(creator)\r\n    {\r\n         Production = _Production;\r\n         \r\n    }\r\n}\r\n\r\ncontract SmartFoodIter is BaseSmartContract    \r\n{\r\n    struct LogRowLog \r\n{\r\n    byte     DateYY;\r\n    string   Message;   \r\n    string   DocUri;\r\n    bytes32   DocSHA3;    \r\n    address   NextLog;\r\n    address   PrecLog;\r\n}\r\n\r\n   struct LogRow\r\n{\r\n    uint     Pos;\r\n    string   Message;   \r\n    \r\n}\r\n    \r\n \r\n    uint  HistoryNum;\r\n    mapping (uint => LogRow) public History;\r\n    \r\n    LogRow[]  public HistoryArr;\r\n    \r\n    byte   public DateYY;\r\n    byte   public DateMM;\r\n    byte   public DateDD;\r\n    string public Message;   \r\n    string public DocUri;\r\n    bytes32 public DocSHA3;    \r\n    address public NextLog;\r\n    address public PrecLog;\r\n\r\n\r\n    event InitLog(address indexed _sender,  uint256 _time,byte _DateYY,byte _DateMM,byte _DateDD,string _Message, bytes32  _DocSHA3,address _NextLog ,address _PrecLog);\r\n\r\n    function IterLog() public   \r\n    {\r\n       \r\n        //ts=block.timestamp;\r\n        PrecLog=address(this);\r\n        NextLog=address(this);\r\n        \r\n      \r\n    }\r\n    \r\n    function  HistoryTo(uint  pos)  public onlyBy(creator)\r\n    {\r\n     \r\n    // History[pos]=LogRow(DateYY,Message ,\"\", DocSHA3,  NextLog, PrecLog);    \r\n    History[pos]=LogRow(pos,Message );    \r\n    \r\n        \r\n    }\r\n    function   HistorySet(uint  _pos,string _Message )  public onlyBy(creator)\r\n    {\r\n   \r\n    // History[pos]=LogRow(DateYY,Message ,\"\", DocSHA3,  NextLog, PrecLog);    \r\n    History[_pos]=LogRow(_pos,_Message );\r\n    HistoryArr.push( History[_pos]);\r\n    }\r\n    \r\n     \r\n\r\n    function Init(byte _DateYY,byte _DateMM,byte _DateDD,string _Message, \r\n    //string _DocUri,\r\n    bytes32  _DocSHA3,\r\n    address _NextLog,\r\n    address _PrecLog\r\n    ) public onlyBy(creator)\r\n    {\r\n       \r\n    DateYY    = _DateYY;\r\n    DateMM    = _DateMM;\r\n    DateDD    = _DateDD;\r\n    \r\n    \r\n    Message = _Message;\r\n    //DocUri=_DocUri;\r\n    DocSHA3=  _DocSHA3;\r\n    //DocSIG =   _DocSIG;\r\n    \r\n    NextLog=_NextLog;\r\n    PrecLog=_PrecLog;\r\n    //ts=block.timestamp;\r\n    //InitLog(msg.sender,now,_DateYY,_DateMM,_DateDD,_Message,_DocSHA3,_NextLog ,_PrecLog);\r\n        \r\n    }\r\n\r\n    function setMessage(string _Message)  onlyBy(creator)\r\n    {\r\n          Message = _Message;\r\n          \r\n       \r\n    }\r\n    \r\n     \r\n      function setDate(byte _DateYY,byte _DateMM,byte _DateDD)  onlyBy(creator)\r\n    {\r\n          DateYY = _DateYY;\r\n          DateMM = _DateMM;\r\n          DateDD = _DateDD;\r\n          \r\n          \r\n    }\r\n    \r\n    \r\n    \r\n       function setDocUri(string _DocUri)  onlyBy(creator)\r\n    {\r\n          DocUri = _DocUri;\r\n      \r\n    }\r\n    \r\n     \r\n       function setDocSHA3(bytes32  _DocSHA3)  onlyBy(creator)\r\n    {\r\n          DocSHA3 = _DocSHA3;\r\n        \r\n    }\r\n    \r\n       \r\n     function setNextLog(address _NextLog)  onlyBy(creator)\r\n    {\r\n          NextLog = _NextLog;\r\n         \r\n    }\r\n    \r\n   \r\n        \r\n      function setPrecLog(address _PrecLog)  onlyBy(creator)\r\n    {\r\n         PrecLog = _PrecLog;\r\n     \r\n    }\r\n\r\n\r\n  function appendTo(address _PrecLog)  onlyBy(creator) \r\n    {\r\n        PrecLog = _PrecLog;\r\n        SmartFoodIter  p  = SmartFoodIter(_PrecLog);\r\n     \r\n        p.setNextLog(address(this));\r\n        \r\n        \r\n         \r\n        //ts=block.timestamp;\r\n    }\r\n\r\n \r\n    \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_Organization\",\"type\":\"string\"}],\"name\":\"setOrganization\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Product\",\"type\":\"string\"}],\"name\":\"setProduct\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Organization\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Product\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Production\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Production\",\"type\":\"address\"}],\"name\":\"setProduction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]", "ContractName": "SmartFoodProductionContract", "CompilerVersion": "v0.4.8-nightly.2017.1.11+commit.4f5da2ea", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://369ef5be210fa76eede5e8582bd6a38731cef91dbca79fe74288f11afbeb95ff"}]}