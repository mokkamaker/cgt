{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\ncontract PasswordMarket {\r\n\taddress public owner;\r\n\tuint128 feeratemul = 1; uint128 feeratediv = 20; // fraction to calculate contract fee\r\n\tuint public minRewardAmount = 0.01 ether; // 10 finney\r\n\t\r\n\tstruct Offer2 {\r\n\t\tuint weiAmount;\r\n\t\taddress who;\r\n  \t}\r\n\tmapping (bytes32 => Offer2) public dHashes;\r\n\r\n\t// Events\r\n\tevent hashSubmitted(address indexed author, bytes32 indexed hash, uint amount);\r\n\tevent hashResolved(address indexed author, bytes32 indexed hash, string s, uint amount);\r\n\r\n\tfunction PasswordMarket() {\r\n    \towner = msg.sender;\r\n    }\r\n\t\r\n\tfunction isHashHere(bytes32 hash) internal returns(bool) {\r\n\t\treturn !(dHashes[hash].weiAmount==0);\r\n\t}\r\n\t\r\n\tfunction submitHash(bytes32 h) payable {\r\n\t\tif((!isHashHere(h))&&(msg.value>=minRewardAmount)) { \r\n\t\t\tdHashes[h].who = msg.sender;\r\n\t\t\tdHashes[h].weiAmount = msg.value;\r\n\t\t\thashSubmitted(msg.sender, h, msg.value);\r\n\t\t\t/*o.hash = h;\r\n\t\t\to.weiAmount = weiOffered;\r\n\t\t\to.who = msg.sender;\r\n\t\t\tlHashes.push(o);*/\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// The hash already exists\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction submitAnswer(string s) {\r\n\t\tbytes32 hash = sha256(s);\r\n\t\tuint reward = dHashes[hash].weiAmount;\r\n\t\tif(reward>0) {\r\n\t\t    uint fees = reward*feeratemul/feeratediv;\r\n\t\t\tuint netreward = reward-fees;\r\n\t\t\tif(!msg.sender.send(netreward)) throw; // pay finder, check for security flaw here\r\n\t\t\tif(!owner.send(fees)) throw; // pay owner, check for security flaw here\r\n\t\t\thashResolved(msg.sender, hash, s, netreward);\r\n\t\t\tdelete dHashes[hash];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n\r\n\t// ANON DONATIONS\r\n\r\n\t/* Allow anonymous donation */\r\n\tfunction () payable {\r\n\t\t// throw;     // Prevents accidental sending of ether\r\n\t\tpayOwner(msg.value);\r\n\t}\r\n\r\n\t// FOR OWNER ONLY\r\n\r\n\tmodifier onlyOwner() {\r\n\t\tif(msg.sender != owner) throw; // rollback puis erreur\r\n\t\t_;\r\n    }\r\n    \r\n    function payOwner(uint amount) private onlyOwner() {\r\n        if(!owner.send(amount)) throw; // pay owner\r\n    }\r\n\r\n    function modifyFees(uint128 frm, uint128 frd) onlyOwner() {\r\n    \tif((frd!=0)&&(frm<=frd)) {\r\n    \t\tfeeratemul = frm; feeratediv = frd;\r\n    \t}\r\n    }\r\n\r\n\tfunction withdrawFunds() onlyOwner() {\r\n\t\tpayOwner(this.balance);\r\n\t}\r\n\r\n\tfunction autokill() onlyOwner() {\r\n        suicide(owner);\r\n\t}\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"h\",\"type\":\"bytes32\"}],\"name\":\"submitHash\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"frm\",\"type\":\"uint128\"},{\"name\":\"frd\",\"type\":\"uint128\"}],\"name\":\"modifyFees\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dHashes\",\"outputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"who\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"submitAnswer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"autokill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashResolved\",\"type\":\"event\"}]", "ContractName": "PasswordMarket", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}