{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\ncontract token { function saleTransfer(address receiver, uint amount) returns(bool success){  } }\r\n\r\ncontract Crowdsale {\r\n    address public beneficiary;\r\n    uint public fundingGoal; \r\n    uint public maxGoal;\r\n    uint public amountRaised; \r\n    uint public start;\r\n    uint[4] public deadlines;// = [1484150400, 1484755200, 1485360000,1485964800];\r\n    uint[4] public prices = [909090909090909,952380952380952,970873786407766, 1000000000000000];\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool fundingGoalReached = false;\r\n    event GoalReached(address beneficiary, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    bool crowdsaleClosed = false;\r\n\r\n    /* data structure to hold information about campaign contributors */\r\n\r\n    /*  at initialization, setup the owner */\r\n    function Crowdsale( ) {\r\n        beneficiary = 0x2aA2B0Ca9405B882e02851B81706904829C4AF17;\r\n        fundingGoal = 50000000;//in tokens\r\n        maxGoal = 394240000;\r\n        start = now;//1484146800;\r\n        tokenReward = token(0xCe6C866D5B28DC8bA4aA72Ad3d57A8CE2d11C4Db);\r\n        deadlines[0]=now;\r\n        deadlines[1]=now + 10 minutes;\r\n        deadlines[2]=now + 20 minutes;\r\n        deadlines[3]=now + 30 minutes;\r\n    }\r\n\r\n    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\r\n    function () payable{\r\n        if (crowdsaleClosed||now<start||amountRaised+amount>maxGoal) throw;\r\n        uint amount = msg.value;\r\n        balanceOf[msg.sender] = amount;\r\n        amountRaised += amount;\r\n        //if(!tokenReward.saleTransfer(msg.sender, amount / getPrice())) throw;\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n    \r\n    function getPrice() constant returns (uint256 price){\r\n        for(var i = 0; i < deadlines.length; i++)\r\n            if(now<deadlines[i])\r\n                return prices[i];\r\n        return prices[prices.length-1];//should never be returned, but to be sure to not divide by 0\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadlines[deadlines.length-1]) _; }\r\n\r\n    /* checks if the goal or time limit has been reached and ends the campaign */\r\n    function checkGoalReached() afterDeadline {\r\n        if (amountRaised >= fundingGoal){\r\n            fundingGoalReached = true;\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n\r\n    function safeWithdrawal() afterDeadline {\r\n        if (!fundingGoalReached) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n            if (beneficiary.send(amountRaised)) {\r\n                FundTransfer(beneficiary, amountRaised, false);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deadlines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]", "ContractName": "Crowdsale", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}