{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\ncontract Seglos{\r\n    address Admin;\r\n    bool public Open;\r\n    uint public Fee; // current fee charged on each trade, out of 1000\r\n    uint public offerPool; // the ammount in the lending pool not loaned out\r\n    uint public feePool; // the pool that collects fee to be distributed to the lenders\r\n    uint public tradeId; // unique auto incromented id given to each trade\r\n    uint[] public Timestamp; // an array of all the timestamps with prices\r\n\r\n\r\n    struct Trade { // trade assigned to a trader\r\n      address trader;\r\n      uint lev;\r\n      uint lock;\r\n      uint eth;\r\n      uint time;\r\n      bool expired;\r\n    }\r\n\r\n    mapping ( address => uint[] ) private trader; // to find the list of a traders trades\r\n    mapping ( uint => Trade ) private trades; // to give a unique id to each trader\r\n    mapping ( address => uint ) private deposits; // to find how much eth a trader has in their account\r\n    mapping ( uint => uint ) private Price; // timestamp to price\r\n\r\n\r\n    function Seglos() {\r\n      Admin = msg.sender;\r\n      offerPool = 0;\r\n      feePool = 0;\r\n      tradeId = 0;\r\n      Open = true;\r\n    }\r\n\r\n    function Door(bool _door){ // to close down the exchange or open it back up and allow the creation of new trades\r\n      if ( msg.sender != Admin)\r\n          throw;\r\n      Open = _door;\r\n    }\r\n\r\n    function setPrice(uint _time ,uint _price) { // the exchange rate of eth/usd\r\n      if ( msg.sender != Admin )\r\n          throw;\r\n      Timestamp.push(_time);\r\n      Price[_time] = _price;\r\n    }\r\n\r\n    function setFee(uint _fee) { // the percentage to charge of each trade, out of 10000\r\n      if ( msg.sender != Admin || _fee > 25 )\r\n          throw;\r\n      Fee = _fee;\r\n    }\r\n\r\n    function depositOffer() payable {\r\n      if ( msg.sender != Admin)\r\n          throw;\r\n      offerPool = offerPool + msg.value;\r\n    }\r\n\r\n    function withdrawOffer(uint _eth) {\r\n      if ( msg.sender != Admin || offerPool < _eth)\r\n          throw;\r\n      offerPool = offerPool - _eth;\r\n      bool sent = msg.sender.send(_eth);\r\n      if (!sent)\r\n        throw;\r\n    }\r\n\r\n    function withdrawFee() {\r\n      if ( msg.sender != Admin)\r\n          throw;\r\n      bool sent = msg.sender.send(feePool);\r\n      feePool = 0;\r\n      if (!sent)\r\n        throw;\r\n    }\r\n\r\n    function getPrice(uint _timestamp) constant returns (uint price) { // get price at time\r\n      return Price[_timestamp];\r\n    }\r\n\r\n    function currentTimestamp() constant returns (uint) {\r\n      return Timestamp[Timestamp.length - 1];\r\n    }\r\n\r\n    function timestampLength() constant returns (uint) {\r\n      return Timestamp.length;\r\n    }\r\n\r\n    function getTradersList() constant returns (uint[]) {\r\n      return trader[msg.sender];\r\n    }\r\n\r\n    function getTrade(uint _trade) constant returns (uint lev , uint lock, uint eth, uint time) {\r\n      Trade trade = trades[_trade];\r\n      return (trade.lev, trade.lock, trade.eth, trade.time );\r\n    }\r\n\r\n    function getDeposit() constant returns (uint eth) { // for traders to see how much eth they have in their account\r\n      return deposits[msg.sender];\r\n    }\r\n\r\n    function Deposit() payable { // for users to deposit eth into their account\r\n      deposits[msg.sender] = deposits[msg.sender] + msg.value;\r\n    }\r\n\r\n    function Withdraw(uint _eth) { // for users to withdraw money from their account\r\n      if (deposits[msg.sender] >= _eth){\r\n        deposits[msg.sender] = deposits[msg.sender] - _eth;\r\n        bool sent = msg.sender.send(_eth);\r\n        if (!sent)\r\n          throw;\r\n      }else{\r\n        throw;\r\n      }\r\n    }\r\n\r\n    function createTrade(uint _eth, uint _lev) {\r\n      // add in the fee from the total subtracted\r\n      uint fee = _eth * _lev * Fee / 10000;\r\n      uint eth = _eth + fee;\r\n\r\n      if (!Open)\r\n        throw;\r\n\r\n      if (_lev < 2 || _lev > 10)\r\n        throw;\r\n\r\n      if (deposits[msg.sender] < eth)\r\n        throw;\r\n\r\n      if (offerPool < eth * (_lev - 1))\r\n        throw;\r\n\r\n      deposits[msg.sender] = deposits[msg.sender] - eth;\r\n\r\n      offerPool = offerPool - _eth * (_lev - 1);\r\n\r\n      feePool = feePool + fee;\r\n\r\n      tradeId++;\r\n\r\n      trades[tradeId].trader = msg.sender;\r\n      trades[tradeId].lev = _lev;\r\n      trades[tradeId].lock = Price[currentTimestamp()];\r\n      trades[tradeId].eth = _eth*_lev;\r\n      trades[tradeId].time = now;\r\n      trades[tradeId].expired = false;\r\n\r\n      trader[msg.sender].push(tradeId);\r\n\r\n    }\r\n\r\n    function exitTrade(uint _trade) {\r\n      Trade trade = trades[_trade];\r\n      uint price;\r\n\r\n      if (msg.sender == trade.trader && now < trade.time + 6 hours)\r\n        price = Price[currentTimestamp()];\r\n      else if (now > trade.time + 6 hours)\r\n        price = Price[trade.time + 6 hours];\r\n      else\r\n        throw;\r\n\r\n      trade.expired = true;\r\n\r\n      if (Price[currentTimestamp()] <= trade.lock*(1/trade.lev)){\r\n        offerPool = offerPool + trade.eth;\r\n      }else {\r\n        uint lenderEth = trade.eth * trade.lock * (trade.lev - 1) / (trade.lev * Price[currentTimestamp()]);\r\n        offerPool = offerPool + lenderEth;\r\n        deposits[msg.sender] = deposits[msg.sender] + trade.eth - lenderEth;\r\n      }\r\n    }\r\n\r\n    function() payable { Deposit(); }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"tradeId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trade\",\"type\":\"uint256\"}],\"name\":\"exitTrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trade\",\"type\":\"uint256\"}],\"name\":\"getTrade\",\"outputs\":[{\"name\":\"lev\",\"type\":\"uint256\"},{\"name\":\"lock\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTradersList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositOffer\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_door\",\"type\":\"bool\"}],\"name\":\"Door\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"withdrawOffer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_lev\",\"type\":\"uint256\"}],\"name\":\"createTrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestampLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]", "ContractName": "Seglos", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}