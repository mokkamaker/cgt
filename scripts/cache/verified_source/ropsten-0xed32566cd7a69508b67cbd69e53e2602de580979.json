{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\n/* \r\n   The hangouts use a gamified system where each attendee gets 5000 points to portion out. Participants can \r\n   use it to \"guide each other's attention\", and also to downvote multi-group scammers. \r\n   Hangout-attendees get to deal out +5000 points, and -2000 points, \r\n   and need to receive +4000 to be verified. The point-system has been balanced so that\r\n   if 2 multi-group scammers are grouped togeher, the 3 other hangout-attendees have\r\n   the power to down-vote those two with 3x-2000 points, preventing them from being verified.\r\n   It has also been balanced so that in a group where only 2 people show up for some reason, \r\n   those 2 are not penalized and can verify one another.\r\n*/\r\n\r\ncontract Registration { function submitVerifiedUsers(address[] _verifiedUsers) {}}\r\n\r\ncontract hangout {\r\n\r\n    Registration public registrationContract;\r\n\r\n    uint public hangoutBegins;\r\n    uint public hangoutEnds;\r\n    \r\n    bytes32 public hangoutAddress;\r\n\r\n    mapping(address => int256) positiveRewards;\r\n    mapping(address => int256) negativeRewards;\r\n    mapping(address => int256) recievedPoints; \r\n\r\n    address[] public participants;\r\n\r\n    address[] public verifiedUsers;\r\n\r\n    modifier hasBegun {\r\n      if(now < hangoutBegins) throw;\r\n      _;\r\n    }\r\n\r\n    function hangout(address[] _hangoutGroup, address _registrationContract, uint _hangoutBegins, bytes32 _hangoutAddress ) {\r\n        registrationContract = Registration(_registrationContract);\r\n        for (uint i = 0; i < _hangoutGroup.length; i++) {\r\n            participants.push(_hangoutGroup[i]);\r\n        }\r\n        hangoutBegins = _hangoutBegins;\r\n        hangoutEnds = hangoutBegins + 15 minutes;\r\n        hangoutAddress = _hangoutAddress;\r\n    }\r\n\r\n    function positiveReward(address _to, int256 _value) hasBegun {\r\n        int giveLimit;\r\n        int recieveLimit;\r\n        if (positiveRewards[msg.sender] + _value > 5000) {\r\n            giveLimit = 5000 - positiveRewards[msg.sender]; \r\n        }\r\n        if (recievedPoints[_to] + _value > 5000) {        \r\n            recieveLimit = 5000 - recievedPoints[_to];      \r\n        }\r\n        if(giveLimit < recieveLimit) _value = giveLimit;\r\n        else _value = recieveLimit;\r\n        \r\n        positiveRewards[msg.sender] +=_value;\r\n        recievedPoints[_to] +=_value;\r\n    }\r\n    \r\n    function negativeReward(address _to, int256 _value) hasBegun {\r\n        if (negativeRewards[msg.sender] + _value > 2000) {       // If the sent amount is bigger than the maximum amount\r\n          _value = 2000 - negativeRewards[msg.sender];           // one can give, send max amount\r\n        }\r\n        /* transfer the anti sybil fuel */\r\n        negativeRewards[msg.sender] +=_value;\r\n        recievedPoints[_to] -=_value;\r\n    }\r\n\r\n    function closeSession() {\r\n        if(now < hangoutEnds) throw;\r\n        for(uint i = 0; i < participants.length; i++){\r\n            if(recievedPoints[participants[i]] > 4000) verifiedUsers.push(participants[i]);\r\n        }\r\n        registrationContract.submitVerifiedUsers(verifiedUsers);\r\n  \r\n        suicide(registrationContract);\r\n    }\r\n\r\n}\r\n\r\ncontract Factory {\r\n    function newHangoutContract(address[] _hangoutGroup, address _registrationContract, uint _hangoutBegins, bytes32 _hangoutAddress) returns (address) {\r\n      return new hangout(_hangoutGroup, _registrationContract, _hangoutBegins, _hangoutAddress);   \r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_hangoutGroup\",\"type\":\"address[]\"},{\"name\":\"_registrationContract\",\"type\":\"address\"},{\"name\":\"_hangoutBegins\",\"type\":\"uint256\"},{\"name\":\"_hangoutAddress\",\"type\":\"bytes32\"}],\"name\":\"newHangoutContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"}]", "ContractName": "Factory", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}