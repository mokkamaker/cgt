{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.2;\r\n\r\ncontract Owned {\r\n    address private _owner;\r\n\r\n    function Owned() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function getOwner() constant returns (address owner) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\ncontract Remittances is Owned {\r\n    uint public maxNumberOfBlocksInFuture;\r\n\r\n    struct Remittance {\r\n        address sender;\r\n        uint amount;\r\n        uint blockDeadline;\r\n    }\r\n\r\n    mapping (bytes32 => Remittance) public remittances;\r\n\r\n    event LogRemittanceAdded(address indexed sender, bytes32 indexed hash, uint value, uint blockDeadline);\r\n    event LogRemittanceCollected(address indexed sender, bytes32 hash, bytes8 indexed agentCode, bytes8 indexed receiverCode);\r\n    event LogRemittanceReturned(address indexed sender, bytes32 indexed hash);\r\n\r\n    /**\r\n     * @notice Constructor.\r\n     * @param _maxNumberOfBlocksInFuture Number of blocks from the height of sending will \r\n     * a remittance remain valid.\r\n     * At a block every 15 seconds, you can expect 5,760 per day.\r\n     * To prevent remittances valid for longer than 30 days, choose 30 * 5,760..\r\n     */\r\n    function Remittances(uint _maxNumberOfBlocksInFuture) {\r\n        maxNumberOfBlocksInFuture = _maxNumberOfBlocksInFuture;\r\n    }\r\n\r\n    /**\r\n     * @notice Anonymise agent and receiver.\r\n     * To collect a remittance, the agent and the receiver need both to provide a code.\r\n     * This code is the official code to calculate the anonymised hash.\r\n     * param agentCode The code provided by the agent.\r\n     * param receiverCode The code provided by the receiver.\r\n     */\r\n    function anonymise(bytes8 agentCode, bytes8 receiverCode)\r\n        constant\r\n        returns (bytes32 hash) {\r\n        return sha3(agentCode, receiverCode);\r\n    }\r\n\r\n    /**\r\n     * @notice The action of sending a remittance.\r\n     * @param hash The hash that results from a call to anonymise.\r\n     * @param blockDeadline The max block number by which the remittance can be collected.\r\n     */\r\n    function sendTo(bytes32 hash, uint blockDeadline)\r\n        payable\r\n        returns (bool success) {\r\n        if (remittances[hash].amount > 0\r\n            || block.number + maxNumberOfBlocksInFuture < blockDeadline) {\r\n            throw;\r\n        }\r\n        remittances[hash] = Remittance({\r\n            sender: msg.sender,\r\n            amount: msg.value,\r\n            blockDeadline: blockDeadline\r\n        });\r\n        LogRemittanceAdded(msg.sender, hash, msg.value, blockDeadline);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice The action of collecting the remittance.\r\n     * To be able to collect, the caller needs to provide 2 codes that hash to the proper\r\n     * value.\r\n     * @param agentCode The code provided by the agent.\r\n     * @param receiverCode The code provided by the receiver.\r\n     */\r\n    function collect(bytes8 agentCode, bytes8 receiverCode)\r\n        returns (bool success) {\r\n        bytes32 hash = anonymise(agentCode, receiverCode);\r\n        Remittance storage remittance = remittances[hash];\r\n        if (remittance.blockDeadline < block.number) {\r\n            throw;\r\n        }\r\n        uint amount = remittance.amount;\r\n        remittance.amount = 0;\r\n        if (!msg.sender.call.value(amount)()) {\r\n            throw;\r\n        }\r\n        LogRemittanceCollected(remittance.sender, hash, agentCode, receiverCode);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice The action of sending back to the sender in case the remittance was not\r\n     * collected\r\n     * @param hash The hash that the sender used when sending.\r\n     */\r\n    function returnToSender(bytes32 hash)\r\n        returns (bool success) {\r\n        Remittance storage remittance = remittances[hash];\r\n        if (block.number <= remittance.blockDeadline) {\r\n            throw;\r\n        }\r\n        uint amount = remittance.amount;\r\n        remittance.amount = 0;\r\n        if (!remittance.sender.call.value(amount)()) {\r\n            throw;\r\n        }\r\n        LogRemittanceReturned(remittance.sender, hash);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxNumberOfBlocksInFuture\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"blockDeadline\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agentCode\",\"type\":\"bytes8\"},{\"name\":\"receiverCode\",\"type\":\"bytes8\"}],\"name\":\"collect\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"returnToSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"remittances\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"blockDeadline\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"agentCode\",\"type\":\"bytes8\"},{\"name\":\"receiverCode\",\"type\":\"bytes8\"}],\"name\":\"anonymise\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxNumberOfBlocksInFuture\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockDeadline\",\"type\":\"uint256\"}],\"name\":\"LogRemittanceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"agentCode\",\"type\":\"bytes8\"},{\"indexed\":true,\"name\":\"receiverCode\",\"type\":\"bytes8\"}],\"name\":\"LogRemittanceCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"LogRemittanceReturned\",\"type\":\"event\"}]", "ContractName": "Remittances", "CompilerVersion": "v0.4.7+commit.822622cf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000002a300", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ff01c2112bf2414985999459037bc1b40304fd5a8db5976a5c4431c1e9175e83"}]}