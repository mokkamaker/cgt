{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\n\tSocial Insurance - \r\n\tProposal for Blockchain UAE GovHack Competition\r\n\t(C) 2016 etherisc.com\r\n\t@Author Christoph Mussenbrock\r\n\r\n */\r\n\r\npragma solidity ^0.4.7;\r\n\r\ncontract SocialInsurance {\r\n\r\n\tmodifier onlyOwner {\r\n\t\tif (msg.sender != owner) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tevent LOG_memberPaidPremium(address _member, uint _value);\r\n\r\n\tuint8 public constant MAX_MEMBERS = 12;\r\n\tuint8 public constant MAX_LEVEL = 4;\r\n\tuint8 public constant LOCAL_LEVEL = 1;\r\n\tuint8 public constant NONE = 0x0;\r\n\tuint public constant WAIT_BLOCKS = 0; // could be 4 * 60 * 24 * 180; // blocks to wait till first payout\r\n\tuint public constant WAIT_NEXT_PAYOUT_BLOCKS = 0; // some time to pass between succeeding payouts\r\n\r\n\r\n\t/**\r\n\t * A peergroup is either a local group of members (level == 0)\r\n\t * or a group of groups (level > 0).\r\n\t * A peergroup is identified by the address of its spokesperson.\r\n\t */\r\n\tstruct Peergroup {\r\n\t\t\r\n\t\taddress parentGroup;\r\n\t\tstring group_name;\r\n\t\tstring spokesperson_name;\r\n\t\tstring spokesperson_contact;\r\n\t\tuint balance;\r\n\t\tuint payouts;\r\n\t\tuint8 level;\r\n\t\tuint8 numberOfMembers;\r\n\t\tuint lastPayout; // block number of last payout;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A member has a group (identified by its spokesperson) \r\n\t * a balance (sum of all paid premiums) and\r\n\t * a payouts (sum of all payouts)\r\n\t */\r\n\r\n\tstruct Membership {\r\n\t\taddress group_spokesperson;\r\n\t\tuint joinedAtBlock;\r\n\t\tuint balance;\r\n\t\tuint payouts;\r\n\t\tuint joinedTime;\r\n\t}\r\n\r\n\taddress public owner;\r\n\taddress public rootSpokesperson; // spokesperson of top-level group\r\n\r\n\tuint public maxPayout;\r\n\tuint public premium_propagate_divisor;\r\n\tuint public payouts_propagate_divisor;\r\n\r\n\tmapping(address => Peergroup) public groups;\t\t\t\t\t// mapping of spokespersons to groups\r\n\tmapping(address => Membership) public members;\t\t\t\t\t// mapping of members to spokespersons\r\n\tmapping(address => address[]) public group_members;\t// \r\n\r\n\tfunction SocialInsurance() {\r\n\t\towner = msg.sender;\r\n\t\tmaxPayout = 500 ether;\r\n\t\tpremium_propagate_divisor = 2;\r\n\t\tpayouts_propagate_divisor = 2;\r\n\t}\r\n\r\n\tfunction createTopGroup (address _root_spokesperson, string _group_name, string _spokesperson_name, string _spokesperson_contact) \r\n\t\tonlyOwner {\r\n\t\tif (rootSpokesperson != 0x0) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tPeergroup topGroup = groups[_root_spokesperson];\r\n\t\ttopGroup.parentGroup = _root_spokesperson;\t\t\t// only in topGroup\r\n\t\ttopGroup.group_name = _group_name;\r\n\t\ttopGroup.spokesperson_name = _spokesperson_name;\r\n\t\ttopGroup.spokesperson_contact = _spokesperson_contact;\r\n\t\ttopGroup.level = MAX_LEVEL;\r\n\t\trootSpokesperson = _root_spokesperson;\r\n\t}\r\n\r\n\tfunction createGroup(address _spokesperson, string _group_name, string _spokesperson_name, string _spokesperson_contact) {\r\n\t\tPeergroup group = groups[msg.sender];\r\n\t\t// Sanity check:\r\n\t\tif (group.parentGroup == NONE\t\t\t\t\t\t// group doesn't exist\r\n\t\t\t|| group.level == LOCAL_LEVEL\t\t\t\t\t// local groups can't have subgroups\r\n\t\t\t|| group.numberOfMembers >= MAX_MEMBERS) {\t\t// group is full\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t// create new group and assign to _elder's group\r\n\t\tgroup.numberOfMembers++;\r\n\t\tPeergroup childGroup = groups[_spokesperson];\r\n\t\tif (childGroup.parentGroup != NONE) {\t\t\t\t// spokesperson must be unique\r\n\t\t\tthrow;\t\t\t\t\t\t\r\n\t\t}\r\n\t\tchildGroup.parentGroup = msg.sender;\r\n\t\tchildGroup.level = group.level - 1;\r\n\t\tchildGroup.group_name = _group_name;\r\n\t\tchildGroup.spokesperson_name = _spokesperson_name;\r\n\t\tchildGroup.spokesperson_contact = _spokesperson_contact;\r\n\t\tgroup_members[msg.sender].push(_spokesperson);\r\n\t\t// other fields don't need initialization.\r\n\t}\r\n\r\n\tfunction setParameter(uint _new_maxPayout, uint _new_premium_propagate_divisor, uint _new_payouts_propagate_divisor)\r\n\t\tonlyOwner {\r\n\t\tmaxPayout = _new_maxPayout;\r\n\t\tpremium_propagate_divisor = _new_premium_propagate_divisor;\r\n\t\tpayouts_propagate_divisor = _new_payouts_propagate_divisor;\r\n\t}\r\n\r\n\tfunction isMember(address _member) constant returns (bool) {\r\n\t\treturn members[_member].group_spokesperson != NONE;\r\n\t}\r\n\r\n\tfunction admitMember (address _member) {\r\n\t\tPeergroup group = groups[msg.sender];\r\n\t\tif (isMember(_member) \t\t\t\t\t\t\t\t// Already member.\r\n\t\t\t|| group.parentGroup == NONE \t\t\t\t\t// group doesn't exist\r\n\t\t\t|| group.level > LOCAL_LEVEL\t\t\t\t\t// not a local group\r\n\t\t\t|| group.numberOfMembers >= MAX_MEMBERS) \t\t// group is full\r\n\t\t{\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tgroup.numberOfMembers++;\r\n\t\tmembers[_member].group_spokesperson = msg.sender;\r\n\t\tmembers[_member].joinedAtBlock = block.number;\r\n\t\tmembers[_member].joinedTime = now;\r\n\t\tgroup_members[msg.sender].push(_member);\r\n\t} \r\n\r\n\tfunction propagatePremium(address _spokesperson, uint _premium) {\r\n\t\tPeergroup group = groups[_spokesperson];\r\n\t\tif (group.level == MAX_LEVEL) {\r\n\t\t\tgroup.balance += _premium;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint remain = _premium / premium_propagate_divisor;\r\n\t\tuint propagate = _premium - remain;\r\n\t\tgroup.balance += remain;\r\n\t\tpropagatePremium(group.parentGroup, propagate);\r\n\t}\r\n\r\n\tfunction () payable {\r\n\t\tif (!isMember(msg.sender)) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\taddress spokesperson = members[msg.sender].group_spokesperson;\r\n\t\tPeergroup group = groups[spokesperson];\r\n\t\tmembers[msg.sender].balance += msg.value;\r\n\t\tpropagatePremium(spokesperson, msg.value);\r\n\t\tLOG_memberPaidPremium(msg.sender, msg.value);\r\n\t}\r\n\r\n\tfunction propagatePayout(address _spokesperson, uint _payout) returns (uint) {\r\n\t\tPeergroup group = groups[_spokesperson];\r\n\t\tuint actual_payout = 0;\r\n\t\tif (group.level == MAX_LEVEL) {\r\n\t\t\tif (group.balance > _payout) {\r\n\t\t\t\tactual_payout = _payout;\r\n\t\t\t} else {\r\n\t\t\t\tactual_payout = group.balance;\r\n\t\t\t}\r\n\t\t\tgroup.balance -= actual_payout;\r\n\t\t\tgroup.payouts += actual_payout;\r\n\t\t\treturn actual_payout;\r\n\t\t}\r\n\t\tuint remain = _payout / payouts_propagate_divisor;\r\n\t\tif (group.balance > remain) {\r\n\t\t\tactual_payout = remain;\r\n\t\t} else {\r\n\t\t\tactual_payout = group.balance;\r\n\t\t}\r\n\t\tgroup.balance -= actual_payout;\r\n\t\tgroup.payouts += actual_payout;\r\n\t\tactual_payout = actual_payout + propagatePayout(group.parentGroup, _payout - actual_payout);\r\n\t\treturn actual_payout;\r\n\t}\r\n\r\n\tfunction payout(address _member, uint _payout) {\r\n\t\tif (!isMember(_member) || _payout > maxPayout) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tif (members[_member].joinedAtBlock + WAIT_BLOCKS > block.number) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\taddress spokesperson = members[_member].group_spokesperson;\r\n\t\tif (spokesperson != msg.sender) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tPeergroup group = groups[spokesperson];\r\n\t\tuint actual_payout = propagatePayout(spokesperson, _payout);\r\n\t\tif (group.lastPayout + WAIT_NEXT_PAYOUT_BLOCKS > block.number) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tmembers[_member].payouts += actual_payout;\r\n\t\tgroup.lastPayout = block.number;\r\n\t\tif (!_member.send(actual_payout)) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"group_spokesperson\",\"type\":\"address\"},{\"name\":\"joinedAtBlock\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"payouts\",\"type\":\"uint256\"},{\"name\":\"joinedTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_payout\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payouts_propagate_divisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"groups\",\"outputs\":[{\"name\":\"parentGroup\",\"type\":\"address\"},{\"name\":\"group_name\",\"type\":\"string\"},{\"name\":\"spokesperson_name\",\"type\":\"string\"},{\"name\":\"spokesperson_contact\",\"type\":\"string\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"payouts\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"numberOfMembers\",\"type\":\"uint8\"},{\"name\":\"lastPayout\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spokesperson\",\"type\":\"address\"},{\"name\":\"_group_name\",\"type\":\"string\"},{\"name\":\"_spokesperson_name\",\"type\":\"string\"},{\"name\":\"_spokesperson_contact\",\"type\":\"string\"}],\"name\":\"createGroup\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WAIT_BLOCKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"admitMember\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootSpokesperson\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCAL_LEVEL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spokesperson\",\"type\":\"address\"},{\"name\":\"_payout\",\"type\":\"uint256\"}],\"name\":\"propagatePayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premium_propagate_divisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spokesperson\",\"type\":\"address\"},{\"name\":\"_premium\",\"type\":\"uint256\"}],\"name\":\"propagatePremium\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"group_members\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_maxPayout\",\"type\":\"uint256\"},{\"name\":\"_new_premium_propagate_divisor\",\"type\":\"uint256\"},{\"name\":\"_new_payouts_propagate_divisor\",\"type\":\"uint256\"}],\"name\":\"setParameter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MEMBERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WAIT_NEXT_PAYOUT_BLOCKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root_spokesperson\",\"type\":\"address\"},{\"name\":\"_group_name\",\"type\":\"string\"},{\"name\":\"_spokesperson_name\",\"type\":\"string\"},{\"name\":\"_spokesperson_contact\",\"type\":\"string\"}],\"name\":\"createTopGroup\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LOG_memberPaidPremium\",\"type\":\"event\"}]", "ContractName": "SocialInsurance", "CompilerVersion": "v0.4.7+commit.822622cf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0cbc6bce6186d950a03f12233c6f674b60bf405e015153ee01424e060a72d8d4"}]}