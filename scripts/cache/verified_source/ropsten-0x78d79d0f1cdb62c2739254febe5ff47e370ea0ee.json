{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\n/* Test deposit penalties with 1000 user accounts and 200 bot accounts, 200 groups */\r\ncontract TestBotAttack {\r\n    \r\n    uint16 public numUsers;\r\n    uint16 public commited;\r\n    \r\n    uint16 public maximumAccounts;\r\n\r\n    uint16 public humanAccounts;\r\n\r\n    bytes32 public maxHash = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    uint8 public groupSize;\r\n    uint public denominator;\r\n    uint numGroups;\r\n    \r\n    function TestBotAttack() {\r\n        groupSize = 6;\r\n        maximumAccounts = 1200;\r\n        humanAccounts = 1000;\r\n        numGroups = maximumAccounts / groupSize;\r\n        denominator = uint(maxHash) / numGroups;\r\n    }\r\n    \r\n    modifier belowMaximumAccounts {\r\n        if(numUsers >= maximumAccounts) throw;\r\n        _;\r\n    }\r\n    \r\n    mapping(uint => uint) public pseudonymGroup;\r\n    mapping(uint => bool) public groupsWithThree;\r\n    uint public groupsControlledByBots;\r\n    mapping(uint => uint) public botCount;\r\n    \r\n    uint[] public groupsWithThreeBots;      \r\n    \r\n    function create1account() belowMaximumAccounts {\r\n        for(uint i = commited; i < commited + 1; i++) {\r\n        commit();\r\n        }\r\n        commited += 1;\r\n    }\r\n    function create2accounts() belowMaximumAccounts {\r\n        for(uint i = commited; i < commited + 2; i++) {\r\n        commit();\r\n        }\r\n        commited += 2;\r\n    }\r\n    function create10accounts() belowMaximumAccounts {\r\n        for(uint i = commited; i < commited + 10; i++) {\r\n        commit();\r\n        }\r\n        commited += 10;\r\n    }\r\n    \r\n    function create50accounts() belowMaximumAccounts{\r\n        for(uint i = commited; i < commited + 50; i++) {\r\n        commit();\r\n        }\r\n        commited += 50;\r\n    }\r\n    function create100accounts() belowMaximumAccounts {\r\n        for(uint i = commited; i < commited + 100; i++) {\r\n        commit();\r\n        }\r\n        commited += 100;\r\n    }\r\n    \r\n\r\n    function commit() internal {\r\n      \r\n      uint groupNumber = uint(sha3(numUsers)) / (denominator) + 1; // masHash / 120 groups = 964934076977634961863091541739065898777249872213671366995479866732609413666\r\n      \r\n      if(pseudonymGroup[groupNumber] >= groupSize) {\r\n          for(uint i = 0; i < numGroups; i++) {\r\n              if(groupNumber >= i + 1) {\r\n                  if(pseudonymGroup[groupNumber - i] < groupSize) { groupNumber -= i; break; }\r\n              }\r\n              if(groupNumber + i <= numGroups) {\r\n                  if(pseudonymGroup[groupNumber + i] < groupSize) { groupNumber += i; break; }\r\n              }\r\n          }\r\n      }\r\n      pseudonymGroup[groupNumber]++;\r\n      numUsers++;\r\n      if(numUsers > humanAccounts) {\r\n          botCount[groupNumber] += 1; \r\n          if(botCount[groupNumber] == 4 && groupsWithThree[groupNumber] == false) {\r\n              groupsWithThreeBots.push(groupNumber);\r\n              groupsWithThree[groupNumber] = true;\r\n              groupsControlledByBots++;\r\n          }\r\n      }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupsWithThree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupsControlledByBots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create10accounts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupsWithThreeBots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create1account\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"botCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create100accounts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create50accounts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create2accounts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"humanAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pseudonymGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]", "ContractName": "TestBotAttack", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}