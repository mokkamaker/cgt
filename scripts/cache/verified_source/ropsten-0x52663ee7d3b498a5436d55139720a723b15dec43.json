{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.1;\r\ncontract SHA3_512 {\r\n    function SHA3_512() {}\r\n\r\n    event Result(uint result);\r\n\r\n    \r\n    function keccak_f(uint[25] A) constant returns(uint[25]) {\r\n        uint[5] memory C;\r\n        uint D_0; uint D_1; uint D_2; uint D_3; uint D_4;\r\n        uint[25] memory B;\r\n        \r\n        uint[24] memory RC= [\r\n                   uint(0x0000000000000001),\r\n    \t\t       0x0000000000008082,\r\n    \t\t       0x800000000000808A,\r\n    \t\t       0x8000000080008000,\r\n    \t\t       0x000000000000808B,\r\n    \t\t       0x0000000080000001,\r\n    \t\t       0x8000000080008081,\r\n    \t\t       0x8000000000008009,\r\n    \t\t       0x000000000000008A,\r\n    \t\t       0x0000000000000088,\r\n    \t\t       0x0000000080008009,\r\n    \t\t       0x000000008000000A,\r\n    \t\t       0x000000008000808B,\r\n    \t\t       0x800000000000008B,\r\n    \t\t       0x8000000000008089,\r\n    \t\t       0x8000000000008003,\r\n    \t\t       0x8000000000008002,\r\n    \t\t       0x8000000000000080,\r\n    \t\t       0x000000000000800A,\r\n    \t\t       0x800000008000000A,\r\n    \t\t       0x8000000080008081,\r\n    \t\t       0x8000000000008080,\r\n    \t\t       0x0000000080000001,\r\n    \t\t       0x8000000080008008 ];\r\n        \r\n         \r\n        for( uint i = 0 ; i < 24 ; i++ ) {\r\n\t\t\t/* Theta step */\r\n\t\t\tC[0]=A[0]^A[1]^A[2]^A[3]^A[4];\r\n\t\t\tC[1]=A[5]^A[6]^A[7]^A[8]^A[9];\r\n\t\t\tC[2]=A[10]^A[11]^A[12]^A[13]^A[14];\r\n\t\t\tC[3]=A[15]^A[16]^A[17]^A[18]^A[19];\r\n\t\t\tC[4]=A[20]^A[21]^A[22]^A[23]^A[24];\r\n\r\n\t\t\tD_0=C[4] ^ ((C[1] * 2)&0xffffffffffffffff | (C[1] / (2 ** 63)));\r\n\t\t\tD_1=C[0] ^ ((C[2] * 2)&0xffffffffffffffff | (C[2] / (2 ** 63)));\r\n\t\t\tD_2=C[1] ^ ((C[3] * 2)&0xffffffffffffffff | (C[3] / (2 ** 63)));\r\n\t\t\tD_3=C[2] ^ ((C[4] * 2)&0xffffffffffffffff | (C[4] / (2 ** 63)));\r\n\t\t\tD_4=C[3] ^ ((C[0] * 2)&0xffffffffffffffff | (C[0] / (2 ** 63)));\r\n\r\n\t\t\tA[0]=A[0] ^ D_0;\r\n\t\t\tA[1]=A[1] ^ D_0;\r\n\t\t\tA[2]=A[2] ^ D_0;\r\n\t\t\tA[3]=A[3] ^ D_0;\r\n\t\t\tA[4]=A[4] ^ D_0;\r\n\t\t\tA[5]=A[5] ^ D_1;\r\n\t\t\tA[6]=A[6] ^ D_1;\r\n\t\t\tA[7]=A[7] ^ D_1;\r\n\t\t\tA[8]=A[8] ^ D_1;\r\n\t\t\tA[9]=A[9] ^ D_1;\r\n\t\t\tA[10]=A[10] ^ D_2;\r\n\t\t\tA[11]=A[11] ^ D_2;\r\n\t\t\tA[12]=A[12] ^ D_2;\r\n\t\t\tA[13]=A[13] ^ D_2;\r\n\t\t\tA[14]=A[14] ^ D_2;\r\n\t\t\tA[15]=A[15] ^ D_3;\r\n\t\t\tA[16]=A[16] ^ D_3;\r\n\t\t\tA[17]=A[17] ^ D_3;\r\n\t\t\tA[18]=A[18] ^ D_3;\r\n\t\t\tA[19]=A[19] ^ D_3;\r\n\t\t\tA[20]=A[20] ^ D_4;\r\n\t\t\tA[21]=A[21] ^ D_4;\r\n\t\t\tA[22]=A[22] ^ D_4;\r\n\t\t\tA[23]=A[23] ^ D_4;\r\n\t\t\tA[24]=A[24] ^ D_4;\r\n\r\n\t\t\t/*Rho and pi steps*/\r\n\t\t\tB[0]=A[0];\r\n\t\t\tB[8]=((A[1] * (2 ** 36))&0xffffffffffffffff | (A[1] / (2 ** 28)));\r\n\t\t\tB[11]=((A[2] * (2 ** 3))&0xffffffffffffffff | (A[2] / (2 ** 61)));\r\n\t\t\tB[19]=((A[3] * (2 ** 41))&0xffffffffffffffff | (A[3] / (2 ** 23)));\r\n\t\t\tB[22]=((A[4] * (2 ** 18))&0xffffffffffffffff | (A[4] / (2 ** 46)));\r\n\t\t\tB[2]=((A[5] * (2 ** 1))&0xffffffffffffffff | (A[5] / (2 ** 63)));\r\n\t\t\tB[5]=((A[6] * (2 ** 44))&0xffffffffffffffff | (A[6] / (2 ** 20)));\r\n\t\t\tB[13]=((A[7] * (2 ** 10))&0xffffffffffffffff | (A[7] / (2 ** 54)));\r\n\t\t\tB[16]=((A[8] * (2 ** 45))&0xffffffffffffffff | (A[8] / (2 ** 19)));\r\n\t\t\tB[24]=((A[9] * (2 ** 2))&0xffffffffffffffff | (A[9] / (2 ** 62)));\r\n\t\t\tB[4]=((A[10] * (2 ** 62))&0xffffffffffffffff | (A[10] / (2 ** 2)));\r\n\t\t\tB[7]=((A[11] * (2 ** 6))&0xffffffffffffffff | (A[11] / (2 ** 58)));\r\n\t\t\tB[10]=((A[12] * (2 ** 43))&0xffffffffffffffff | (A[12] / (2 ** 21)));\r\n\t\t\tB[18]=((A[13] * (2 ** 15))&0xffffffffffffffff | (A[13] / (2 ** 49)));\r\n\t\t\tB[21]=((A[14] * (2 ** 61))&0xffffffffffffffff | (A[14] / (2 ** 3)));\r\n\t\t\tB[1]=((A[15] * (2 ** 28))&0xffffffffffffffff | (A[15] / (2 ** 36)));\r\n\t\t\tB[9]=((A[16] * (2 ** 55))&0xffffffffffffffff | (A[16] / (2 ** 9)));\r\n\t\t\tB[12]=((A[17] * (2 ** 25))&0xffffffffffffffff | (A[17] / (2 ** 39)));\r\n\t\t\tB[15]=((A[18] * (2 ** 21))&0xffffffffffffffff | (A[18] / (2 ** 43)));\r\n\t\t\tB[23]=((A[19] * (2 ** 56))&0xffffffffffffffff | (A[19] / (2 ** 8)));\r\n\t\t\tB[3]=((A[20] * (2 ** 27))&0xffffffffffffffff | (A[20] / (2 ** 37)));\r\n\t\t\tB[6]=((A[21] * (2 ** 20))&0xffffffffffffffff | (A[21] / (2 ** 44)));\r\n\t\t\tB[14]=((A[22] * (2 ** 39))&0xffffffffffffffff | (A[22] / (2 ** 25)));\r\n\t\t\tB[17]=((A[23] * (2 ** 8))&0xffffffffffffffff | (A[23] / (2 ** 56)));\r\n\t\t\tB[20]=((A[24] * (2 ** 14))&0xffffffffffffffff | (A[24] / (2 ** 50)));\r\n\r\n\t\t\t/*Xi state*/\r\n\t\t\tA[0]=B[0]^((~B[5]) & B[10]);\r\n\t\t\tA[1]=B[1]^((~B[6]) & B[11]);\r\n\t\t\tA[2]=B[2]^((~B[7]) & B[12]);\r\n\t\t\tA[3]=B[3]^((~B[8]) & B[13]);\r\n\t\t\tA[4]=B[4]^((~B[9]) & B[14]);\r\n\t\t\tA[5]=B[5]^((~B[10]) & B[15]);\r\n\t\t\tA[6]=B[6]^((~B[11]) & B[16]);\r\n\t\t\tA[7]=B[7]^((~B[12]) & B[17]);\r\n\t\t\tA[8]=B[8]^((~B[13]) & B[18]);\r\n\t\t\tA[9]=B[9]^((~B[14]) & B[19]);\r\n\t\t\tA[10]=B[10]^((~B[15]) & B[20]);\r\n\t\t\tA[11]=B[11]^((~B[16]) & B[21]);\r\n\t\t\tA[12]=B[12]^((~B[17]) & B[22]);\r\n\t\t\tA[13]=B[13]^((~B[18]) & B[23]);\r\n\t\t\tA[14]=B[14]^((~B[19]) & B[24]);\r\n\t\t\tA[15]=B[15]^((~B[20]) & B[0]);\r\n\t\t\tA[16]=B[16]^((~B[21]) & B[1]);\r\n\t\t\tA[17]=B[17]^((~B[22]) & B[2]);\r\n\t\t\tA[18]=B[18]^((~B[23]) & B[3]);\r\n\t\t\tA[19]=B[19]^((~B[24]) & B[4]);\r\n\t\t\tA[20]=B[20]^((~B[0]) & B[5]);\r\n\t\t\tA[21]=B[21]^((~B[1]) & B[6]);\r\n\t\t\tA[22]=B[22]^((~B[2]) & B[7]);\r\n\t\t\tA[23]=B[23]^((~B[3]) & B[8]);\r\n\t\t\tA[24]=B[24]^((~B[4]) & B[9]);\r\n\r\n\t\t\t/*Last step*/\r\n\t\t\tA[0]=A[0]^RC[i];            \r\n        }\r\n\r\n        \r\n        return A;\r\n    }\r\n \r\n    \r\n    function sponge(uint[] M) constant returns(uint[8]) {\r\n        if( (M.length * 8) != 72 ) throw;\r\n        \r\n        uint r = 72;\r\n        uint w = 8;\r\n        uint size = M.length * 8;\r\n        \r\n        uint[25] memory S;\r\n        uint i; uint y; uint x;\r\n        /*Absorbing Phase*/\r\n        for( i = 0 ; i < size/r ; i++ ) {\r\n            for( y = 0 ; y < 5 ; y++ ) {\r\n                for( x = 0 ; x < 5 ; x++ ) {\r\n                    if( (x+5*y) < (r/w) ) {\r\n                        S[5*x+y] = S[5*x+y] ^ M[i*9 + x + 5*y];\r\n                    }\r\n                }\r\n            }\r\n            S = keccak_f(S);\r\n        }\r\n\r\n        /*Squeezing phase*/\r\n        uint[8] memory result;\r\n        uint b = 0;\r\n        while( b < 8 ) {\r\n            for( y = 0 ; y < 5 ; y++ ) {\r\n                for( x = 0 ; x < 5 ; x++ ) {\r\n                    if( (x+5*y)<(r/w) && (b<8) ) {\r\n                        result[b] = S[5*x+y]; \r\n                        b++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n \r\n        Result(result[0]);\r\n        Result(result[1]);\r\n        Result(result[2]);\r\n        Result(result[3]);\r\n        Result(result[4]);\r\n        Result(result[5]);\r\n        Result(result[6]);\r\n        Result(result[7]);\r\n        \r\n        return result;\r\n   }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"A\",\"type\":\"uint256[25]\"}],\"name\":\"keccak_f\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[25]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"M\",\"type\":\"uint256[]\"}],\"name\":\"sponge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[8]\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"}]", "ContractName": "SHA3_512", "CompilerVersion": "v0.4.2-nightly.2016.9.17+commit.212e0160", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}