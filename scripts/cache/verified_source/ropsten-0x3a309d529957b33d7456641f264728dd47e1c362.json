{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract epocum {\r\n  \r\n    uint public nodes = 0;\r\n    uint public smartCount = 0;\r\n    address public _epocum;\r\n    \r\n    function epocum() public{\r\n       _epocum = msg.sender;\r\n    }\r\n    \r\n     struct Websites {\r\n\t\tstring url;\r\n\t\tbool cert;\r\n\t} \r\n\t\r\n    struct Delegate {\r\n\t\tstring ipfs;\r\n\t\taddress wallet;\r\n\t\tuint id;\r\n\t}\r\n\r\n    struct SmartSharingContract {\r\n\t\taddress proprietary;\r\n\t\tbytes32 smartHash;\r\n\t\tstring website;\r\n\t\tuint target;\r\n\t\tstring tag;\r\n\t\tstring ipfs;\r\n\t\tuint duration;\r\n\t\tuint acceptances;\r\n\t\tstring info;\r\n\t\tuint tokenAmount;\r\n\t\tstring tokenSymbol;\r\n\t}\r\n\t\r\n\tstruct Acceptance {\r\n\t    uint id;\r\n\t\tbytes32 smartHash;\r\n\t\tstring website;\r\n\t\taddress advertiser;\r\n\t\tstring dLink;\r\n\t\tstring info;\r\n\t\tuint numAcceptancesBywallet;\r\n\t}\r\n\t\r\n    mapping (uint => Delegate) DelegatesById;\r\n    mapping (address => Delegate) DelegatesByAddr;\r\n\r\n    mapping (address => mapping (uint => Websites)) WebChain;\r\n    \r\n    mapping (uint => SmartSharingContract) SmartChainId;\r\n    mapping (bytes32 => SmartSharingContract) SmartChainHash;\r\n\r\n    mapping (address => mapping (bytes32 => Acceptance)) acceptByAddress;\r\n    mapping (address => mapping (uint => Acceptance)) myAcceptance;\r\n    mapping (string => Acceptance) acceptByIpfs;\r\n    mapping (address => Acceptance) Acceptances;\r\n    \r\n    function () payable public {\r\n        uint amount = msg.value;\r\n    }\r\n\r\n    function resetEpocum(address _newEpocum)  public constant returns (bool) {\r\n        if (msg.sender != _epocum) revert();\r\n\t\t _epocum = _newEpocum;\r\n\t}\r\n\t\r\n    function isEpocum() public constant returns (bool) {\r\n\t\treturn msg.sender == _epocum;\r\n\t}\r\n\r\n\tfunction isAlreadyDelegate() public constant returns (bool) {\r\n\t\treturn msg.sender == DelegatesByAddr[msg.sender].wallet;\r\n\t}\r\n\r\n    function addDelegate(string ipfs) public {\r\n\t    nodes++;\r\n\t    DelegatesByAddr[msg.sender] = Delegate(ipfs,msg.sender,nodes++);\r\n\t} \r\n\t\r\n\tfunction CertifyDelegate(address inWebAddr, uint x) public {\r\n\t    if (!isEpocum()) revert();\r\n        WebChain[inWebAddr][x].cert = true;\r\n    }\r\n\t\r\n\tfunction NewSmartSharingContract(string _website,uint _target,uint duration,string tags,string dlink,string others,uint tAmount,string tSymbol) public {\r\n        bytes32 _hash = keccak256(msg.sender,_website,smartCount);\r\n        SmartChainId[smartCount].proprietary = msg.sender;\r\n        SmartChainId[smartCount].smartHash =  _hash;\r\n        SmartChainHash[_hash].proprietary = msg.sender;\r\n        SmartChainHash[_hash].website = _website;\r\n        SmartChainHash[_hash].smartHash =  _hash;\r\n        SmartChainHash[_hash].target = _target;\r\n        SmartChainHash[_hash].ipfs = dlink;\r\n        SmartChainHash[_hash].tag = tags;\r\n        SmartChainHash[_hash].duration = duration;\r\n        SmartChainHash[_hash].acceptances = 0;\r\n        SmartChainHash[_hash].info = others;\r\n        SmartChainHash[_hash].tokenAmount = tAmount;\r\n        SmartChainHash[_hash].tokenSymbol = tSymbol;\r\n        smartCount++; \r\n    } \r\n    \r\n\tfunction Accept (bytes32 _smartHash, string _dLink) public {\r\n\t    uint numAcc = SmartChainHash[_smartHash].acceptances;\r\n\t    uint numAcc4wallet = Acceptances[msg.sender].numAcceptancesBywallet;\r\n\t    \r\n\t    string _website = SmartChainHash[_smartHash].website;\r\n\t    string others = SmartChainHash[_smartHash].info;\r\n\t    uint x = acceptByAddress[msg.sender][_smartHash].id;\r\n\t    acceptByAddress[msg.sender][_smartHash].advertiser = msg.sender;\r\n\t    acceptByAddress[msg.sender][_smartHash].dLink = _dLink;\r\n        acceptByAddress[msg.sender][_smartHash].website = _website;\r\n        acceptByIpfs[_dLink].smartHash = _smartHash;\r\n        uint y = x + 1;\r\n        uint z = numAcc + 1;\r\n        uint wa = numAcc4wallet + 1;\r\n        acceptByAddress[msg.sender][_smartHash].id = y;\r\n        SmartChainHash[_smartHash].acceptances = z;\r\n        myAcceptance[msg.sender][wa].dLink = _dLink;\r\n        myAcceptance[msg.sender][wa].smartHash = _smartHash;\r\n        myAcceptance[msg.sender][wa].info = others;\r\n        Acceptances[msg.sender].numAcceptancesBywallet = wa;\r\n    } \r\n    \r\n    function countAllSmartSharingContract() public constant returns(uint count) {\r\n        count = smartCount;\r\n    }\r\n\r\n    function getSmartSharingByID(uint id) public constant returns(address smartOwner, bytes32 smartHash) {\r\n        smartOwner = SmartChainId[id].proprietary;\r\n        smartHash = SmartChainId[id].smartHash;\r\n    }\r\n    \r\n    function getSmartSharingByHash(bytes32 hash) public constant returns(address smartOwner, string smartWebsite, bytes32 smartHash, uint target, string ipfs, uint numAcc, string others) {\r\n        smartOwner = SmartChainHash[hash].proprietary;\r\n        smartWebsite = SmartChainHash[hash].website;\r\n        smartHash = SmartChainHash[hash].smartHash;\r\n        target = SmartChainHash[hash].target;\r\n        numAcc = SmartChainHash[hash].acceptances;\r\n        others = SmartChainHash[hash].info;\r\n    }\r\n    \r\n    function getAcceptance(bytes32 _smartHash,address addr) public constant returns(string dLink,string web,string others) {\r\n\t    dLink = acceptByAddress[addr][_smartHash].dLink;\r\n\t    web = acceptByAddress[addr][_smartHash].website;\r\n\t    others = acceptByAddress[addr][_smartHash].info;\r\n    }\r\n    \r\n    function getMyAcceptance(address addr,uint y) public constant returns(string dLink,bytes32 smartHash,string others) {\r\n       dLink =  myAcceptance[addr][y].dLink;\r\n       smartHash = myAcceptance[addr][y].smartHash;\r\n       others = myAcceptance[addr][y].info;\r\n    }\r\n    \r\n    function getNumAcceptance(address addr) public constant returns(uint num) {\r\n       num = Acceptances[addr].numAcceptancesBywallet;\r\n    }\r\n\r\n    function getSmartHash(string _dLink) public constant returns(bytes32 smartHash) {\r\n\t    smartHash = acceptByIpfs[_dLink].smartHash;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_newEpocum\",\"type\":\"address\"}],\"name\":\"resetEpocum\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ipfs\",\"type\":\"string\"}],\"name\":\"addDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEpocum\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_smartHash\",\"type\":\"bytes32\"},{\"name\":\"_dLink\",\"type\":\"string\"}],\"name\":\"Accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inWebAddr\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"CertifyDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"getMyAcceptance\",\"outputs\":[{\"name\":\"dLink\",\"type\":\"string\"},{\"name\":\"smartHash\",\"type\":\"bytes32\"},{\"name\":\"others\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAlreadyDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_smartHash\",\"type\":\"bytes32\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAcceptance\",\"outputs\":[{\"name\":\"dLink\",\"type\":\"string\"},{\"name\":\"web\",\"type\":\"string\"},{\"name\":\"others\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNumAcceptance\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_website\",\"type\":\"string\"},{\"name\":\"_target\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"tags\",\"type\":\"string\"},{\"name\":\"dlink\",\"type\":\"string\"},{\"name\":\"others\",\"type\":\"string\"},{\"name\":\"tAmount\",\"type\":\"uint256\"},{\"name\":\"tSymbol\",\"type\":\"string\"}],\"name\":\"NewSmartSharingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countAllSmartSharingContract\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_epocum\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSmartSharingByID\",\"outputs\":[{\"name\":\"smartOwner\",\"type\":\"address\"},{\"name\":\"smartHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getSmartSharingByHash\",\"outputs\":[{\"name\":\"smartOwner\",\"type\":\"address\"},{\"name\":\"smartWebsite\",\"type\":\"string\"},{\"name\":\"smartHash\",\"type\":\"bytes32\"},{\"name\":\"target\",\"type\":\"uint256\"},{\"name\":\"ipfs\",\"type\":\"string\"},{\"name\":\"numAcc\",\"type\":\"uint256\"},{\"name\":\"others\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dLink\",\"type\":\"string\"}],\"name\":\"getSmartHash\",\"outputs\":[{\"name\":\"smartHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "epocum", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fd77df330d77c18f314e191a099cd807f4b74eeebf297009c5b07a9ed01ccfde"}]}