{"status": "1", "message": "OK", "result": [{"SourceCode": "contract owned {\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    modifier onlyowner { if (msg.sender != owner) throw; _ }\r\n\r\n    event OwnershipTransfer(address indexed from, address indexed to);\r\n\r\n    function transferOwnership(address to) public onlyowner {\r\n        owner = to;\r\n        OwnershipTransfer(msg.sender, to);\r\n    }\r\n}\r\n// Token standard API\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint supply);\r\n    function balanceOf(address who) constant returns (uint value);\r\n    function allowance(address owner, address spender) constant returns (uint _allowance);\r\n    function transfer(address to, uint value) returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) returns (bool ok);\r\n    function approve(address spender, uint value) returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract Order is owned {\r\n    ERC20 public token;\r\n    uint public weiPerToken;\r\n    uint public decimalPlaces;\r\n\r\n    function Order(address _token, uint _weiPerToken, uint _decimalPlaces) {\r\n        token = ERC20(_token);\r\n        weiPerToken = _weiPerToken;\r\n        decimalPlaces = _decimalPlaces;\r\n    }\r\n\r\n    function sendRobust(address to, uint value) internal {\r\n        if (!to.send(value)) {\r\n            if (!to.call.value(value)()) throw;\r\n        }\r\n    }\r\n\r\n    function min(uint a, uint b) internal returns (uint) {\r\n        if (a <= b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    function getTransferableBalance(address who) internal returns (uint amount) {\r\n        uint allowance = token.allowance(msg.sender, address(this));\r\n        uint balance = token.balanceOf(msg.sender);\r\n\r\n        amount = min(min(allowance, balance), numTokensAbleToPurchase());\r\n\r\n        return amount;\r\n    }\r\n\r\n    function numTokensAbleToPurchase() constant returns (uint) {\r\n        return (this.balance / weiPerToken) * decimalPlaces;\r\n    }\r\n\r\n    event OrderFilled(address _from, uint numTokens);\r\n\r\n    // Fills or partially fills the order.\r\n    function _fillOrder(address _from, uint numTokens) internal returns (bool) {\r\n        if (numTokens == 0) throw;\r\n        if (this.balance < numTokens * weiPerToken / decimalPlaces) throw;\r\n\r\n        if (!token.transferFrom(_from, owner, numTokens)) return false;\r\n        sendRobust(_from, numTokens * weiPerToken / decimalPlaces);\r\n        OrderFilled(_from, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function fillOrder(address _from, uint numTokens) public returns (bool) {\r\n        return _fillOrder(_from, numTokens);\r\n    }\r\n\r\n    // Simpler call signature that uses `msg.sender`\r\n    function fillMyOrder(uint numTokens) public returns (bool) {\r\n        return _fillOrder(msg.sender, numTokens);\r\n    }\r\n\r\n    // Simpler call signature that defaults to the account allowance.\r\n    function fillTheirOrder(address who) public returns (bool) {\r\n        return _fillOrder(who, getTransferableBalance(who));\r\n    }\r\n\r\n    // Simpler call signature that uses `msg.sender` and the current approval\r\n    // value.\r\n    function fillOrderAuto() public returns (bool) {\r\n        return _fillOrder(msg.sender, getTransferableBalance(msg.sender));\r\n    }\r\n\r\n    // Even simpler call signature that tries to transfer as many as possible.\r\n    function () {\r\n        // allow receipt of funds\r\n        if (msg.value > 0) {\r\n            return;\r\n        } else {\r\n            fillOrderAuto();\r\n        }\r\n    }\r\n\r\n    // Cancel the order, returning all funds to the owner.\r\n    function cancel() onlyowner {\r\n        selfdestruct(owner);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"fillOrderAuto\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTokensAbleToPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"fillMyOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalPlaces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"fillTheirOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_weiPerToken\",\"type\":\"uint256\"},{\"name\":\"_decimalPlaces\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]", "ContractName": "Order", "CompilerVersion": "v0.3.0-2016-03-11-1f9578c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c66ea802717bfb9833400264dd12c2bceaa34a6d0000000000000000000000000000000000000000000000005fc1b971363200000000000000000000000000000000000000000000000000000000000000000012", "Library": "", "SwarmSource": ""}]}