{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.0;\r\n\r\n/* Main webgold contract file */\r\n\r\ncontract THX {\r\n  \r\n  mapping (address => uint) public coinBalanceOf;\r\n  mapping (address => uint) public rewardOf;\r\n  uint constant wrgMul = 100; /*  coinBallance is stored in cWRG, 1/100th of WRG */\r\n  address master;\r\n   event CoinTransfer(address sender, address receiver, uint amount);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n\r\n    function THX() {\r\n     coinBalanceOf[msg.sender] = 0;\r\n     master = msg.sender;\r\n    }\r\n\r\n    /* Very simple trade function */\r\n\r\n    function sendCoin(address receiver, uint amount) returns(bool sufficient) {\r\n     if (coinBalanceOf[msg.sender] < amount) return false;\r\n       coinBalanceOf[msg.sender] -= amount;\r\n       coinBalanceOf[receiver] += amount;\r\n       CoinTransfer(msg.sender, receiver, amount);\r\n       return true;\r\n     }\r\n     \r\n     function emitCoin(address receiver, uint amount) returns(bool sufficient) {\r\n       if (msg.sender != master) return false;      \r\n       coinBalanceOf[receiver] += amount;\r\n       CoinTransfer(msg.sender, receiver, amount);\r\n       return true;\r\n     }\r\n     \r\n     \r\n    function getRtxReward(uint amount) internal returns (uint rtx) {\r\n        uint rewardPercent = 100 - getPercent(amount);\r\n        return amount * rewardPercent / 100;\r\n        \r\n    }\r\n\r\n    function getPercent(uint amount) internal returns (uint out_percent) {\r\n\r\n        \r\n        uint inWrg = amount / wrgMul;\r\n\r\n        if ((inWrg >= 0) && (inWrg < 2)) return 50;\r\n        if ((inWrg >= 2) && (inWrg < 4)) return 55;\r\n        if ((inWrg >= 4) && (inWrg < 8)) return 60;\r\n        if ((inWrg >= 8) && (inWrg < 16)) return 65;\r\n        if ((inWrg >= 16) && (inWrg < 32)) return 70;\r\n        if ((inWrg >= 32) && (inWrg < 64)) return 75;\r\n        if ((inWrg >= 64) && (inWrg < 128)) return 80;\r\n        if ((inWrg >= 128) && (inWrg < 256)) return 85;\r\n        if ((inWrg >= 256) && (inWrg < 512)) return 90;\r\n        if (inWrg >= 512) return 95;\r\n        return 95;\r\n\r\n    }\r\n\r\n    function donate(address receiver, uint amount) returns(bool sufficient) {\r\n        if (amount < 1*wrgMul) return false;\r\n\r\n        uint sum_receiver = 0;\r\n        uint sum_master = 0;\r\n        uint percent = 0;\r\n\r\n        percent = getPercent(amount);\r\n        if (percent == 0) {\r\n            return false; // if have too big sum, don't proceed any further\r\n        }\r\n        sum_receiver = percent * amount / 100;\r\n        sum_master = amount - sum_receiver;\r\n        \r\n        uint rtx = getRtxReward(amount);\r\n\r\n        if (coinBalanceOf[msg.sender] < amount) return false;\r\n        \r\n        rewardOf[receiver] += rtx;\r\n        \r\n        coinBalanceOf[msg.sender] -= amount;\r\n        coinBalanceOf[receiver] += sum_receiver;\r\n        // coinBalanceOf[master] += sum_master; // comission disappears\r\n        CoinTransfer(msg.sender, receiver, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitCoin\",\"outputs\":[{\"name\":\"sufficient\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendCoin\",\"outputs\":[{\"name\":\"sufficient\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[{\"name\":\"sufficient\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoinTransfer\",\"type\":\"event\"}]", "ContractName": "THX", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8ad72815bdd0dde3b13a9cb1ec8f69bc519bd6da6b1f48343275b65543aead88"}]}