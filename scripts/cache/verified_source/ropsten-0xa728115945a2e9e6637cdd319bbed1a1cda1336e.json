{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.0;\r\n\r\n// This contract shall represent the bank of Ethereum. \r\n/* It can \r\n        --> transfer balances from one trader to another one\r\n        --> deposit money\r\n        --> transfer money\r\n        --> refund your stored money\r\n        --> selfdestruct\r\n*/\r\n\r\ncontract BankOfEthereum {\r\n\r\n    address owner;\r\n\r\n    mapping (address => Trader) traders;\r\n    \r\n    event OutputString(string output);\r\n\r\n\t// Constructor\r\n    function BankOfEthereum() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    // A Trader reflexts a person in our bank. \r\n    struct Trader {\r\n        address addr;\r\n        string name;\r\n        uint256 balance;\r\n        string greeting;\r\n    }\r\n    \r\n    // Constant prevents function from making changes to the state of the contract \r\n    function getBalance() constant returns (uint256) {\r\n        return traders[msg.sender].balance;\r\n    }\r\n    \r\n    // This function transfers money from the senders balance to the desired destination's balance\r\n    function sendMoneyTo(address destination, uint256 value) returns (bool) {\r\n        if (traders[msg.sender].balance >= value){\r\n            traders[msg.sender].balance -= value;\r\n            traders[destination].balance += value;\r\n            OutputString(\"Transferred money successfully.\");\r\n            return true;\r\n        }\r\n        else {\r\n            OutputString(\"Didn't transfer money.\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // The keyword 'payable' is necessary to make the funtion able to receive Ether.\r\n    function increaseBalance() payable returns (bool) {\r\n        traders[msg.sender].balance =+ msg.value;\r\n        OutputString(\"Increased balance successfully.\");\r\n        return true;\r\n    }\r\n\r\n    function increaseBalanceAndSendMoneyTo(address dest, uint256 val) payable{\r\n        bool increased = false;\r\n        bool sent = false;\r\n        increased = increaseBalance();\r\n        // This way, the function would be called externally. ('this' returns the address of the contract)\r\n        // this.increaseBalance();\r\n\r\n        sent = sendMoneyTo(dest, val);\r\n        // Alternative way to call a function with random order of calling arguments:\r\n        // sendMoneyTo({value: val, destination: dest})\r\n\r\n        if(increased && sent){\r\n        \tOutputString(\"Increased balance and tranferred money.\");\r\n        }\r\n        else{\r\n            OutputString(\"This did not work.\");\r\n            // throw reverts state to before call\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function withdraw() {\r\n        // var can be used for arbitrary types of variables. (This is not possible for function or return parameters)\r\n        var share = traders[msg.sender].balance;\r\n        traders[msg.sender].balance = 0;\r\n        if (!msg.sender.send(share)) {\r\n            throw;\r\n        }\r\n        OutputString(\"You withdrew all your money.\");\r\n    }\r\n\r\n    // Potential security threat:   During send() the fallback function of the destination address will be called. \r\n    //                              This function could reenter the contract and cause it to send the money multiple times.\r\n   \r\n    /*\r\n    function withdraw(){\r\n        if(!msg.sender.send(traders[msg.sender].balance)){\r\n            throw;\r\n        }\r\n        traders[msg.sender].balance = 0;\r\n    }\r\n    */\r\n   \r\n    // Selfdestructs the contract\r\n    function killMe() public {\r\n        if (msg.sender == owner) {\r\n            // selfdestructs contract and sends remaining money to msg.sender\r\n            selfdestruct(owner);\r\n            OutputString(\"Contract is killed.\");\r\n        }            \r\n        else {\r\n            OutputString(\"Nice try. The contract is still up and alive!\");\r\n        }  \r\n    }\r\n    \r\n    // Modifier allow us to add user defined functionality, e.g. access restrictions\r\n    modifier onlyOwner {\r\n        if (msg.sender == owner) {\r\n            // _ is a placeholder for the function body\r\n            _;\r\n        }\r\n        else {\r\n            throw;\r\n        }\r\n    }\r\n    \r\n    // Selfdestruction using a modifier \r\n    function killMe2() public onlyOwner {\r\n        OutputString(\"Contract is killed 2.\");\r\n        selfdestruct(msg.sender);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"increaseBalanceAndSendMoneyTo\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe2\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendMoneyTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"output\",\"type\":\"string\"}],\"name\":\"OutputString\",\"type\":\"event\"}]", "ContractName": "BankOfEthereum", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a470a187fd5d7f4cf63c0cedc0978dfcf3c7fbc5f3511015c8b60f533b48cccd"}]}