{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nMessage Storage Smart Contract v2\r\ndeveloped by: MarketPay.io , 2017\r\n*/\r\n\r\npragma solidity ^0.4.6;\r\n\r\ncontract mortal {\r\n\taddress owner;\r\n\tfunction mortal() { owner = msg.sender; }\r\n\tfunction kill() { if (msg.sender == owner) suicide(owner); }\r\n}\r\n\r\ncontract marketpayUnwiredApp is mortal {\r\n\tuint256 public countMessage;\r\n\r\n\tstruct mssg {\r\n\t\tuint256 idMessage;\r\n\t\tuint256 idPrevious;\r\n\t\tuint256 timestamp;\r\n\t\taddress from;\r\n\t\taddress to;\r\n\t\tstring message;\r\n\t}\r\n\r\n\t/* Array of incoming messages with structure messages[to][idMessage] */\r\n\tmapping (address => mapping (uint256 => mssg)) public messagesTo;\r\n\r\n\t/* Array of sent messages with structure messages[from][idMessage] */\r\n\tmapping (address => mapping (uint256 => mssg)) public messagesFrom;\r\n\r\n\t/* Array storing last message id for a given account */\r\n\tmapping (address => uint256) public lastIdMessageTo;\r\n\tmapping (address => uint256) public lastIdMessageFrom;\r\n\t\r\n\t\r\n\t// Events\r\n\tevent calledRefillFunds(address from, uint256 timestamp, uint256 amount);\r\n\tevent faucetResult(address from, address to, string result);\r\n\tevent calledSendMessage(address from, address to, uint256 timestamp);\r\n\r\n\r\n\t/* Read a given message specified by id whose recipient is sender */\r\n\tfunction readYourMessageById(uint256 idMessage) constant returns (string message) {\r\n\t\treturn messagesTo[msg.sender][idMessage].message;\r\n\t}\r\n\r\n\t/* Read a given message specified by id sent by user */\r\n\tfunction readSentMessageById(uint256 idMessage) constant returns (string message) {\r\n\t\treturn messagesFrom[msg.sender][idMessage].message;\r\n\t}\r\n\r\n\t/* Read metadata of a message specified by id whose recipient is sender */\r\n\tfunction readYourMessageMetadataById(uint256 idMessage) constant returns (uint256 _idMessage, uint256 _idPrevious, uint256 _timestamp, address _from, address _to, string _message) {\r\n\t\treturn (messagesTo[msg.sender][idMessage].idMessage, messagesTo[msg.sender][idMessage].idPrevious, messagesTo[msg.sender][idMessage].timestamp, messagesTo[msg.sender][idMessage].from, messagesTo[msg.sender][idMessage].to, messagesTo[msg.sender][idMessage].message);\r\n\t}\r\n\r\n\t/* Read metadata of a message specified by id and sent by user */\r\n\tfunction readSentMessageMetadataById(uint256 idMessage) constant returns (uint256 _idMessage, uint256 _idPrevious, uint256 _timestamp, address _from, address _to, string _message) {\r\n\t\treturn (messagesFrom[msg.sender][idMessage].idMessage, messagesFrom[msg.sender][idMessage].idPrevious, messagesFrom[msg.sender][idMessage].timestamp, messagesFrom[msg.sender][idMessage].from, messagesFrom[msg.sender][idMessage].to, messagesFrom[msg.sender][idMessage].message);\r\n\t}\r\n\r\n\t/* Read last message whose recipient is sender */\r\n\tfunction readYourLastMessage() constant returns (string message) {\r\n\t\treturn readYourMessageById(lastIdMessageTo[msg.sender]);\r\n\t}\r\n\r\n\t/* Read last message sent by user */\r\n\tfunction readSentLastMessage() constant returns (string message) {\r\n\t\treturn readSentMessageById(lastIdMessageFrom[msg.sender]);\r\n\t}\r\n\r\n\t/* Record new message from sender */\r\n\tfunction sendMessage(address to, string message) {\r\n\t\tif (countMessage == 0) countMessage = 1; // Set init countMessage to 1\r\n\t\tmessagesTo[to][countMessage].idMessage = countMessage;\r\n\t\tmessagesTo[to][countMessage].idPrevious = lastIdMessageTo[to];\r\n\t\tmessagesTo[to][countMessage].timestamp = timestamp();\r\n\t\tmessagesTo[to][countMessage].from = msg.sender;\r\n\t\tmessagesTo[to][countMessage].to = to;\r\n\t\tmessagesTo[to][countMessage].message = message;\r\n\r\n\t\tmessagesFrom[msg.sender][countMessage].idMessage = countMessage;\r\n\t\tmessagesFrom[msg.sender][countMessage].idPrevious = lastIdMessageFrom[msg.sender];\r\n\t\tmessagesFrom[msg.sender][countMessage].timestamp = timestamp();\r\n\t\tmessagesFrom[msg.sender][countMessage].from = msg.sender;\r\n\t\tmessagesFrom[msg.sender][countMessage].to = to;\r\n\t\tmessagesFrom[msg.sender][countMessage].message = message;\r\n\r\n\t\tlastIdMessageTo[to] = countMessage;\r\n\t\tlastIdMessageFrom[msg.sender] = countMessage;\r\n\t\t\r\n\t\tcountMessage++;\r\n\t\tcalledSendMessage(msg.sender, to, timestamp()); // Log\r\n\t}\r\n\r\n\t/* For debugging purposes when using solidity online browser */\r\n\tfunction whoAmI() constant returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\t/* Get the current timestamp from last mined block */\r\n\tfunction timestamp() constant returns (uint256) {\r\n\t\treturn block.timestamp;\r\n\t}\r\n\r\n\t/* Refill SC funds to feed faucet requests */\r\n\tfunction refillFunds() payable returns (uint256) {\r\n\t\tcalledRefillFunds(msg.sender, timestamp(), msg.value); // Log\r\n\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\t/* Faucet: Send funds, 1 Ether, to a new contact/friend */\r\n\tfunction sendFundsToFriend(address to) {\r\n\t\tif (to.balance > 1000000000000000000) {\r\n\t\t\tfaucetResult(msg.sender, to, 'Friends balance higher than 1 Ether');\r\n\t\t\tthrow; // If friend has enough funds (> 1 Ether), do not send anymore\r\n\t\t}\r\n\t\tif (this.balance < 1000000000000000000) {\r\n\t\t\tfaucetResult(msg.sender, to, 'Faucets balance lower than 1 Ether');\r\n\t\t\tthrow; // If SC funds are not enough(< 1 Ether), do not send funds\r\n\t\t}\r\n\t\tbool dummy = to.send(1000000000000000000);\r\n\t\tfaucetResult(msg.sender, to, 'Sent 1 Ether to friends account');\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastIdMessageTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readYourLastMessage\",\"outputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messagesTo\",\"outputs\":[{\"name\":\"idMessage\",\"type\":\"uint256\"},{\"name\":\"idPrevious\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readSentLastMessage\",\"outputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idMessage\",\"type\":\"uint256\"}],\"name\":\"readYourMessageById\",\"outputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idMessage\",\"type\":\"uint256\"}],\"name\":\"readSentMessageById\",\"outputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refillFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idMessage\",\"type\":\"uint256\"}],\"name\":\"readYourMessageMetadataById\",\"outputs\":[{\"name\":\"_idMessage\",\"type\":\"uint256\"},{\"name\":\"_idPrevious\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_message\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messagesFrom\",\"outputs\":[{\"name\":\"idMessage\",\"type\":\"uint256\"},{\"name\":\"idPrevious\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idMessage\",\"type\":\"uint256\"}],\"name\":\"readSentMessageMetadataById\",\"outputs\":[{\"name\":\"_idMessage\",\"type\":\"uint256\"},{\"name\":\"_idPrevious\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_message\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastIdMessageFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whoAmI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sendMessage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendFundsToFriend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calledRefillFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"string\"}],\"name\":\"faucetResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calledSendMessage\",\"type\":\"event\"}]", "ContractName": "marketpayUnwiredApp", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://edb655f62893cd4e2a82d2fb03cbd45d8f0676170206be302743345f0b837170"}]}