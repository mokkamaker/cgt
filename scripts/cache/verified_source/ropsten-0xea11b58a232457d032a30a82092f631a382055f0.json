{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\ncontract Atomic {\r\n\r\n    // Hold status:\r\n    // 0: Removed\r\n    // 1: On Hold\r\n    // 2: Confirmed\r\n\r\n    event LogHoldChange(\r\n        bytes32 indexed hold_id, \r\n        address indexed user, \r\n        address indexed company, \r\n        uint256 price, \r\n        uint256 expiry, \r\n        bytes32 external_id, \r\n        uint256 status\r\n    );\r\n\r\n    struct Hold {\r\n        address user;\r\n        address company;\r\n        uint256 price;\r\n        uint256 expiry;\r\n        bytes32 external_id; // For the ID in the company's external database\r\n        uint256 status;\r\n    }\r\n\r\n    mapping(address=>bytes32[]) public user_holds;\r\n    mapping(address=>bytes32[]) public company_holds;\r\n\r\n    mapping(bytes32=>Hold) public holds;\r\n\r\n    function complete(bytes32[] hold_ids) payable returns (bool) {\r\n        uint256 i;\r\n        for(i=0; i<hold_ids.length; i++) {\r\n            bytes32 hold_id = hold_ids[i];\r\n            if (holds[hold_id].status != 1) throw;\r\n            if (holds[hold_id].expiry < now) throw;\r\n            holds[hold_id].status = 2;\r\n            if (!holds[hold_id].company.send(holds[hold_id].price)) throw;\r\n            LogHoldChange(hold_id, holds[hold_id].user, holds[hold_id].company, holds[hold_id].price, holds[hold_id].expiry, holds[hold_id].external_id, 2);\r\n        }\r\n    }\r\n\r\n    function isValid(bytes32[] hold_ids) constant returns (bool) {\r\n        uint256 i;\r\n        for(i=0; i<hold_ids.length; i++) {\r\n            bytes32 hold_id = hold_ids[i];\r\n            if (holds[hold_id].status != 1) return false;\r\n            if (holds[hold_id].expiry < now) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function balancePayable(bytes32[] hold_ids) constant returns (uint256) {\r\n        uint256 i;\r\n        uint256 bal = 0;\r\n        for(i=0; i<hold_ids.length; i++) {\r\n            bytes32 hold_id = hold_ids[i];\r\n            if ( (holds[hold_id].status == 1) && (holds[hold_id].expiry > now) ){\r\n                bal = bal + holds[hold_id].price;\r\n            }\r\n        }\r\n        return bal;\r\n    }\r\n\r\n    // TODO: Pass in a signature for the company... \r\n    // ...so that you can only create holds for the company if they agree\r\n    function createHold(address company, uint256 price, uint256 expiry, bytes32 external_id) returns (bytes32 created_hold_id) {\r\n        bytes32 hold_id = holdIDForParameters(msg.sender, company, price, expiry, external_id);\r\n        holds[hold_id] = Hold(\r\n            msg.sender,\r\n            company,\r\n            price,\r\n            expiry,\r\n            external_id,\r\n            1\r\n        );\r\n        user_holds[msg.sender].push(hold_id);\r\n        company_holds[company].push(hold_id);\r\n        LogHoldChange(hold_id, msg.sender, company, price, expiry, external_id, 1);\r\n        return hold_id;\r\n    }\r\n\r\n    function holdIDForParameters(address user, address company, uint256 price, uint256 expiry, bytes32 external_id) returns (bytes32 hold_id) {\r\n        return sha3(user, company, price, expiry, external_id);\r\n    }\r\n\r\n    function removeHoldByCompany(bytes32 hold_id) returns (bool) {\r\n        if (msg.sender != holds[hold_id].company) throw;\r\n\r\n        // completed, cannot be removed\r\n        if (holds[hold_id].status == 2) {\r\n            return false;\r\n        }\r\n\r\n        holds[hold_id].status = 0;\r\n        LogHoldChange(hold_id, holds[hold_id].user, holds[hold_id].company, holds[hold_id].price, holds[hold_id].expiry, holds[hold_id].external_id, 0);\r\n        return true;\r\n    }\r\n\r\n    function removeHoldByUser(bytes32 hold_id) returns (bool) {\r\n        if (msg.sender != holds[hold_id].user) throw;\r\n\r\n        // completed, cannot be removed\r\n        if (holds[hold_id].status == 2) {\r\n            return false;\r\n        }\r\n\r\n        holds[hold_id].status = 0;\r\n        LogHoldChange(hold_id, holds[hold_id].user, holds[hold_id].company, holds[hold_id].price, holds[hold_id].expiry, holds[hold_id].external_id, 0);\r\n        return true;\r\n    }\r\n\r\n    function getHoldStatus(bytes32 hold_id) constant returns (uint256) {\r\n        return holds[hold_id].status;\r\n    }\r\n\r\n    /*\r\n    function activeHoldIDsForUser(address user) constant returns (bytes32[]){\r\n        uint256 i;\r\n        bytes32[] ret;\r\n        for(i=0; i<user_holds[user].length; i++) {\r\n            bytes32 hold_id = user_holds[user][i];\r\n            if (holds[hold_id].status == 1) {\r\n                ret.push(user_holds[user]);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function activeHoldIDsForCompany(address company) constant returns (bytes32[]){\r\n        uint256 i;\r\n        bytes32[] ret;\r\n        for(i=0; i<company_holds[company].length; i++) {\r\n            bytes32 hold_id = company_holds[company][i];\r\n            if (holds[hold_id].status == 1) {\r\n                ret.push(company_holds[company]);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    */\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"hold_id\",\"type\":\"bytes32\"}],\"name\":\"removeHoldByCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hold_id\",\"type\":\"bytes32\"}],\"name\":\"getHoldStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hold_ids\",\"type\":\"bytes32[]\"}],\"name\":\"complete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"holds\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"external_id\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hold_ids\",\"type\":\"bytes32[]\"}],\"name\":\"balancePayable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_holds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hold_id\",\"type\":\"bytes32\"}],\"name\":\"removeHoldByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"external_id\",\"type\":\"bytes32\"}],\"name\":\"createHold\",\"outputs\":[{\"name\":\"created_hold_id\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"external_id\",\"type\":\"bytes32\"}],\"name\":\"holdIDForParameters\",\"outputs\":[{\"name\":\"hold_id\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"company_holds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hold_ids\",\"type\":\"bytes32[]\"}],\"name\":\"isValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hold_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"external_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"LogHoldChange\",\"type\":\"event\"}]", "ContractName": "Atomic", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://bfb7cc6c0cfb69703e9056743c6bc5d27d1aec07e0098d2e497ffc8ad3582fe8"}]}