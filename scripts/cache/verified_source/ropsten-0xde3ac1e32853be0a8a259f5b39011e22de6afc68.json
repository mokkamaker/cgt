{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\ncontract PseudonymRoundFactory { \r\n    function newRound(address _proofOfIndividuality,\r\n                        uint _deployment, \r\n                        uint _groupSize,\r\n                        uint _depositSize,\r\n                        uint _commitment,\r\n                        uint _generateAddress,\r\n                        uint _pseudonymEvent,\r\n                        uint _issuePOIs,\r\n                        uint _withdrawals,\r\n                        address _previousPOIround\r\n                        ) \r\n    \r\n        returns (address) \r\n    {}\r\n}\r\n\r\ncontract PseudonymRound {   \r\n    function verifyPOI(address _nym) public returns (bool) { }  \r\n}\r\n\r\ncontract ProofOfIndividuality {\r\n\r\n  PseudonymRoundFactory public pseudonymRoundFactory;\r\n\r\n  PseudonymRound public currentPOIs;\r\n\r\n  address public currentRound;\r\n  uint public groupSize;\r\n\r\n  uint public commitment;\r\n  uint public generateAddress;\r\n  uint public pseudonymEvent;\r\n  uint public issuePOIs;\r\n  uint public withdrawals;\r\n  uint public roundLength;\r\n  uint public previousRound;\r\n\r\n  function ProofOfIndividuality() {\r\n    groupSize = 5;\r\n    roundLength = 24 hours;\r\n    commitment = 11 hours;\r\n    generateAddress = 22 hours;\r\n    pseudonymEvent = 24 hours - 15 minutes;\r\n    issuePOIs = 24 hours;\r\n    withdrawals = 26 hours;\r\n    pseudonymRoundFactory = PseudonymRoundFactory(0xb7266f6ed39D60e765362037d8453f39A433107c);\r\n  }\r\n\r\n  function firstRound() {\r\n    if(currentRound != 0) throw;\r\n    currentRound = pseudonymRoundFactory.newRound(\r\n                          this,\r\n                          now,\r\n                          groupSize, \r\n                          0,\r\n                          commitment,\r\n                          generateAddress,\r\n                          pseudonymEvent,\r\n                          issuePOIs,\r\n                          withdrawals,\r\n                          0\r\n                        );\r\n    previousRound = now;  \r\n  }\r\n\r\n  function newRound(uint _newDepositSize) {\r\n    if(msg.sender != currentRound) throw;\r\n    if(address(currentPOIs) != 0x0000000000000000000000000000000000000000) {\r\n        address previousPOIround = address(currentPOIs);\r\n    }\r\n    currentPOIs = PseudonymRound(currentRound);\r\n    currentRound = pseudonymRoundFactory.newRound(\r\n                          this,\r\n                          previousRound + roundLength,\r\n                          groupSize, \r\n                          _newDepositSize,\r\n                          commitment,\r\n                          generateAddress,\r\n                          pseudonymEvent,\r\n                          issuePOIs,\r\n                          withdrawals,\r\n                          previousPOIround\r\n                        );\r\n    previousRound += roundLength;\r\n  }\r\n\r\n  function verifyPOI(address _nym) public returns (bool) {\r\n    return currentPOIs.verifyPOI(_nym);\r\n  }\r\n\r\n  function dissolveCurrentPOIs() {\r\n    if(msg.sender != address(currentPOIs)) throw;\r\n    currentPOIs = PseudonymRound(0x0000000000000000000000000000000000000000);\r\n  }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_nym\",\"type\":\"address\"}],\"name\":\"verifyPOI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"firstRound\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dissolveCurrentPOIs\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pseudonymRoundFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPOIs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pseudonymEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuePOIs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDepositSize\",\"type\":\"uint256\"}],\"name\":\"newRound\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]", "ContractName": "ProofOfIndividuality", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}