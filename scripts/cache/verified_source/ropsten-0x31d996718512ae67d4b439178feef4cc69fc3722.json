{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.22;\r\n\r\ncontract proforma  {\r\n    address public owner;\r\n    \r\n    struct proformaStruct {\r\n        address client;     //the person who pay the money\r\n        string fName;\r\n        string lName;\r\n        string email;\r\n        address company;    //who receive the request(money)\r\n        address validator;  //the person who says if the task is completed or not\r\n        \r\n        uint pay_step1;      //answer client email(request),50% return to client of total amount if the company respond in 24 h\r\n        uint pay_step2;      //sent to client initial documentation(offer,research,demo...),  pay_step1+25% of total amount\r\n        uint pay_step3;      //return the rest of 25 % to the client if the offer is accepted by the client\r\n        uint commission_company;    //if the client reject the offer, we keep 25%\r\n        uint client_amount;         //the amount sent by the client\r\n        \r\n        bool iscompleted ;    //client step validation\r\n        }\r\n        \r\n    struct TransactionStruct\r\n        {                        \r\n            //Links to transaction from buyer\r\n            address client;             //person who is making payment\r\n            uint client_nounce;         //nounce of client transaction                            \r\n        }\r\n\r\n    //database of clients, each client then contain an array of his transactions\r\n    //    mapping(address => proformaStruct[]) public clientsDatabase;\r\n     \r\n        //mapping addresses- clients\r\n    mapping (address => proformaStruct) clients;\r\n    //define an address array that will store all of the instructor addresses\r\n    address[] public clientsDatabase; \r\n     \r\n\r\n    //set the owner of the contract  \r\n    constructor () public {\r\n         owner = msg.sender;\r\n        } \r\n        \r\n    \r\n    function setClient(address _address, string _fName, string _lName, string _email) public {\r\n       var client = clients[_address];\r\n\r\n        client.fName = _fName;\r\n        client.lName = _lName;\r\n        client.email   =_email;\r\n        \r\n        clientsDatabase.push(_address) -1;\r\n    }\r\n    \r\n    \r\n    function getClient() view public returns (address[]) {\r\n        return clientsDatabase ;\r\n    }\r\n    \r\n    //get fname and last name, email\r\n    function getAllClients(address cli) view public returns (string, string, string){\r\n        return (clients[cli].fName, clients[cli].lName, clients[cli].email);\r\n    }\r\n    \r\n    //count the clients\r\n    function countClients() view public returns (uint){\r\n        return clientsDatabase.length;\r\n    }\r\n    \r\n    \r\n    \r\n        \r\n   \r\n   /* \r\n    function setcommissionCompany(uint comission){\r\n        require comission = 50;\r\n        commissionCompany[msg.sender]=comission;\r\n    }\r\n        \r\n    //used by the company in 24 h to accept the ticket\r\n    //used to sent back to client 50 % of total amount\r\n    function answerRequest() public {\r\n      uint backToClient  = msg.value/2;\r\n      balanceOf[msg.sender] += backToClient;\r\n     \r\n    } \r\n    */\r\n         \r\n         \r\n\r\n         //function for the contract to accept ethereum\r\n           function() payable public\r\n        {\r\n        }\r\n        \r\n        \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"getClient\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countClients\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clientsDatabase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cli\",\"type\":\"address\"}],\"name\":\"getAllClients\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_fName\",\"type\":\"string\"},{\"name\":\"_lName\",\"type\":\"string\"},{\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"setClient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "proforma", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e7aa92b9f567a7752448931b9cd36fc72f614b430f2cbe436f3be54641feb331"}]}