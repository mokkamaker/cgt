{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.0;\r\n\r\ncontract Attestation{\r\n  address attestor;\r\n  string attestationType;\r\n  bool agree;\r\n\r\n  function Attestation(string _attestationType, bool _agree, address _attestor) {\r\n  attestor = _attestor;\r\n  attestationType = _attestationType;\r\n  agree = _agree;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Contract{\r\n  string contractHash;\r\n  string title;\r\n  address author;\r\n  address liveAddress;\r\n  Attestation[] attList;\r\n\r\n  function Contract(string _contractHash, string _title, address _author) {\r\n  contractHash = _contractHash;\r\n  title = _title;\r\n  author = _author;\r\n  }\r\n\r\n  function changeAddress(address _newAddress){\r\n    if (msg.sender == author){\r\n      liveAddress = _newAddress;\r\n    } else {\r\n      throw;\r\n    }\r\n  }\r\n  function addAttestation(string attestationType, bool agree, address attestor){\r\n    Attestation newAtt = new Attestation(attestationType, agree, attestor);\r\n\r\n    attList.push(newAtt);\r\n    //make new attestation struct with given type, agreement, and attestor is msg.sender\r\n    //should check to see that attestor hasn't done so previously\r\n\r\n    //Should check with AttRegistry to ensure that only the owner of a given att.type can attest?\r\n    //Different attestation types have different ownders\r\n    //registry allows for creation of att-type with att rules (only one person can make it, one person must approve requests?)\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract AttestationManager {\r\n  string contractHash;\r\n  Contract[] contracts;\r\n  address creator;\r\n\r\n  /*****   Constructor   *****/\r\n\r\n  function AttestationManager () {\r\n  }\r\n\r\n  function addContractWithInfo(string _contractHash, string _title) returns (uint newId){\r\n    newId = contracts.length;\r\n    Contract newContract = new Contract(_contractHash, _title, msg.sender);\r\n    contracts.push(newContract);\r\n  }\r\n\r\n  function attestToContract(uint id, bool attestation, string attestationType){\r\n    if (id >= contracts.length){\r\n      throw;\r\n    }\r\n    contracts[id].addAttestation(attestationType, attestation, msg.sender);\r\n  }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_contractHash\",\"type\":\"string\"},{\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"addContractWithInfo\",\"outputs\":[{\"name\":\"newId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"attestation\",\"type\":\"bool\"},{\"name\":\"attestationType\",\"type\":\"string\"}],\"name\":\"attestToContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]", "ContractName": "AttestationManager", "CompilerVersion": "v0.4.4+commit.4633f3de", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}