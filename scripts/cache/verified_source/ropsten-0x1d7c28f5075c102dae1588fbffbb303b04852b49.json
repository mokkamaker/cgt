{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\ncontract KobyShop {\r\n    struct Item {\r\n        string name;\r\n        uint price;\r\n        bool forSale;\r\n        address owner;\r\n        bool initialized;\r\n    }\r\n    \r\n    mapping(bytes32 => Item) private items;\r\n    mapping(address => uint) private pendingWithdrawals;\r\n    \r\n    event NewSale(bytes32 itemId, address seller);\r\n    event NewPurchase(bytes32 itemId, address buyer);\r\n    \r\n    function sell(string _name, uint _price){\r\n        var itemId = keccak256(_name);\r\n        \r\n        // if item already exists we just update it if same owner\r\n        if(items[itemId].initialized){\r\n            if(items[itemId].owner != msg.sender) throw;\r\n            items[itemId].price = _price;\r\n            items[itemId].forSale = true;\r\n        }else{\r\n            items[itemId] = Item({\r\n                name: _name,\r\n                price: _price,\r\n                forSale: true,\r\n                owner: msg.sender,\r\n                initialized: true\r\n            });\r\n        }\r\n        NewSale(itemId, msg.sender);\r\n    }\r\n    \r\n    function buy(bytes32 _itemId) payable {\r\n        var itm = items[_itemId];\r\n        \r\n        if(!itm.initialized) throw;\r\n        if(!itm.forSale) throw;\r\n        if(msg.value < itm.price) throw;\r\n        \r\n        pendingWithdrawals[itm.owner] += itm.price;\r\n        \r\n        itm.owner = msg.sender;\r\n        itm.forSale = false;\r\n        \r\n        // Send any excess back\r\n        if (msg.value > itm.price){\r\n            if(!msg.sender.send(msg.value - itm.price)){\r\n                throw;\r\n            }\r\n        }\r\n        NewPurchase(_itemId, msg.sender);\r\n    }\r\n    \r\n    function details(bytes32 _itemId) constant returns (string, uint, address, bool){\r\n        return (\r\n            items[_itemId].name, \r\n            items[_itemId].price, \r\n            items[_itemId].owner,\r\n            items[_itemId].forSale\r\n        );\r\n    }\r\n    \r\n    function withdraw() returns (bool) {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        \r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        \r\n        if (msg.sender.send(amount)) {\r\n            return true;\r\n        } else {\r\n            pendingWithdrawals[msg.sender] = amount;\r\n            return false;\r\n        }\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"bytes32\"}],\"name\":\"details\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"itemId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"itemId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"NewPurchase\",\"type\":\"event\"}]", "ContractName": "KobyShop", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}