{"status": "1", "message": "OK", "result": [{"SourceCode": "// PriceGeth - feedbase.io based feed which keeps the last 10 prices\r\n// Shayan Eskandari shayan@bitaccess.co\r\npragma solidity ^0.4.0;\r\n\r\n\r\ncontract pricegeth {\r\n\r\n    struct Feed {\r\n      uint    USDBTC;\r\n      uint40    BTCETH;\r\n      uint40    BTCETC;\r\n      uint40    BTCDOGE;\r\n    //  uint    value;\r\n      uint40  timestamp;\r\n      uint    blockNumber;\r\n    //  bool    priceSet; //just as a check to make sure the price was set (e.g if price = 0 or delete required checks)\r\n    }\r\n\r\n    mapping (uint => Feed) priceHistory;\r\n    uint public lastBlock; // TODO: this can be checked on the client side as how updated the price is\r\n    // and maybe as an indicator to check if the procedure should be executed or not (saves gas on client side)\r\n    uint40 public firstBlock;\r\n\r\n    address feedOwner;\r\n\r\n    //returns latest price(USDBTC, BTCETH, BTCETC, BTCDOGE, BlockNumber, Timestamp)\r\n    function getPrices() constant returns (uint, uint, uint, uint, uint, uint) {\r\n      return (priceHistory[lastBlock].USDBTC, priceHistory[lastBlock].BTCETH, priceHistory[lastBlock].BTCETC, priceHistory[lastBlock].BTCDOGE, priceHistory[lastBlock].blockNumber, priceHistory[lastBlock].timestamp);\r\n    }\r\n    //returns (USDBTC, BTCETH, BTCETC, BTCDOGE, BlockNumber, Timestamp)\r\n    function getPrices(uint blockNumber) constant returns (uint, uint, uint, uint, uint, uint) {\r\n      return (priceHistory[blockNumber].USDBTC, priceHistory[blockNumber].BTCETH, priceHistory[blockNumber].BTCETC, priceHistory[blockNumber].BTCDOGE, priceHistory[blockNumber].blockNumber, priceHistory[blockNumber].timestamp);\r\n    }\r\n\r\n    // these functions returns (PRICE, Timestamp, Blocknumber)\r\n    function USDBTC(uint blockNumber) constant returns (uint, uint, uint) {\r\n      return (priceHistory[blockNumber].USDBTC, priceHistory[blockNumber].timestamp, priceHistory[blockNumber].blockNumber);\r\n    }\r\n    function BTCETH(uint blockNumber) constant returns (uint, uint, uint) {\r\n      return (priceHistory[blockNumber].BTCETH, priceHistory[blockNumber].timestamp, priceHistory[blockNumber].blockNumber);\r\n    }\r\n    function BTCETC(uint blockNumber) constant returns (uint, uint, uint) {\r\n      return (priceHistory[blockNumber].BTCETC, priceHistory[blockNumber].timestamp, priceHistory[blockNumber].blockNumber);\r\n    }\r\n    function BTCDOGE(uint blockNumber) constant returns (uint, uint, uint) {\r\n      return (priceHistory[blockNumber].BTCDOGE, priceHistory[blockNumber].timestamp, priceHistory[blockNumber].blockNumber);\r\n    }\r\n    function timestamp(uint blockNumber) constant returns (uint40) { //not exactly needed\r\n        return priceHistory[blockNumber].timestamp;\r\n    }\r\n\r\n    //constructor\r\n    function pricegeth(){\r\n      feedOwner = msg.sender;\r\n      lastBlock = 0; //UI/User should check that priceHistory[0] is always 0 and !priceSet\r\n    }\r\n\r\n    // only feed owner have access to the functions using this modifier\r\n    modifier ifOwner() { if (msg.sender != feedOwner) throw; _ ;}\r\n\r\n    // events\r\n  //  event ValueModified(uint id, uint40 oldTimestamp, uint oldValue, uint40 newTimestamp, uint newValue);\r\n    event PriceUpdated(uint timestamp, uint blocknumber, uint USDBTC, uint BTCETH, uint BTCETC, uint BTCDOGE);\r\n\r\n    //------------------------------------------------------------------\r\n    // Updating price feed\r\n    //------------------------------------------------------------------\r\n\r\n    function setPrice(uint40 timestamp, uint40 blocknumber, uint USDBTC, uint40 BTCETH, uint40 BTCETC, uint40 BTCDOGE) ifOwner() {\r\n      if (firstBlock == 0) firstBlock = blocknumber;\r\n      lastBlock = blocknumber; // changed to use blockNumber instread of an incrementor\r\n    //  priceHistory[lastId].value = block.number; //blocknumber which this transaction was in\r\n      priceHistory[lastBlock].timestamp = timestamp; //uint40(now);\r\n      priceHistory[lastBlock].blockNumber = blocknumber; //block.number;\r\n      //priceHistory[lastId].priceSet = true;\r\n      priceHistory[lastBlock].USDBTC = USDBTC;\r\n      priceHistory[lastBlock].BTCETH = BTCETH;\r\n      priceHistory[lastBlock].BTCETC = BTCETC;\r\n      priceHistory[lastBlock].BTCDOGE = BTCDOGE;\r\n      PriceUpdated(timestamp, blocknumber, USDBTC, BTCETH, BTCETC, BTCDOGE);\r\n    }\r\n\r\n    function queryTimestamp(uint40 timestamp) constant returns(uint, uint) {\r\n      // inputs a timestamp and returns the (blockNumber, timestamp) right before that time.\r\n      Feed memory temp;\r\n      temp = priceHistory[firstBlock];\r\n      for (uint i = 0; i < lastBlock; i++) {\r\n        if ((timestamp >= temp.timestamp) && (timestamp < priceHistory[firstBlock + i].timestamp))\r\n        {\r\n          break;\r\n        }\r\n        if ((timestamp > temp.timestamp) && (timestamp >= priceHistory[firstBlock + i].timestamp))\r\n        {\r\n          temp = priceHistory[firstBlock + i];\r\n        }\r\n      }\r\n    return (temp.blockNumber, temp.timestamp);\r\n    }\r\n\r\n    function recoverFunds(uint amount) ifOwner() returns(bool) {\r\n      return (feedOwner.send(amount)); //maybe not the best way to write this? or maybe it is? who knows!\r\n    }\r\n\r\n    //rejector function\r\n    function() { throw; }\r\n\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint40\"}],\"name\":\"queryTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"BTCETC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"BTCDOGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"BTCETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"USDBTC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint40\"},{\"name\":\"blocknumber\",\"type\":\"uint40\"},{\"name\":\"USDBTC\",\"type\":\"uint256\"},{\"name\":\"BTCETH\",\"type\":\"uint40\"},{\"name\":\"BTCETC\",\"type\":\"uint40\"},{\"name\":\"BTCDOGE\",\"type\":\"uint40\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"USDBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BTCETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BTCETC\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BTCDOGE\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"}]", "ContractName": "pricegeth", "CompilerVersion": "v0.4.7+commit.822622cf", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://000b4937ed9ca9c31d3a0b55b64b6978feeb0a34ef177007d65d740a5564e088"}]}