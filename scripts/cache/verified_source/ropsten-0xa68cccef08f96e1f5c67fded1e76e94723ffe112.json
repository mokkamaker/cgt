{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.4;\r\ncontract UnicornMilk {\r\n    /* Public variables of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name = \"Unicorn Milk\";\r\n    string public symbol = \"liters\";\r\n    uint8 public decimals = 9; //nanoliters\r\n    uint256 public totalSupply;\r\n    address[] public minters;\r\n    address public owner;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balance;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    modifier onlyOwner() {if ( msg.sender != owner ) throw; _;}\r\n    modifier onlyMinters() {if ( !addressInArray(msg.sender) ) throw; _;}\r\n\r\n    function UnicornMilk() {\r\n      owner = msg.sender;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (balance[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balance[_to] + _value < balance[_to]) throw; // Check for overflows\r\n        if (this == _to){throw;}\r\n        balance[msg.sender] -= _value;                     // Subtract from the sender\r\n        balance[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balance[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balance[_to] + _value < balance[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n        if (this == _to){throw;}\r\n        balance[_from] -= _value;                          // Subtract from the sender\r\n        balance[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /*function totalSupply() constant returns (uint256 supply){\r\n\r\n    }*/\r\n\r\n        /*function balanceOf(address _owner) constant returns (uint256){\r\n          return balance[_owner];\r\n        }*/\r\n\r\n        function drink(address _from, uint256 _value/*, uint glassSizeNanoLiters = 200000000*/ ) returns (bool success){\r\n          //glassSizeNanoLiters=200000000 = 2dl\r\n          if (balance[_from] < _value) throw;                 // Check if the sender has enough\r\n          //if (_value > glassSizeNanoLiters) _value = glassSizeNanoLiters;             // Check for overflow\r\n          balance[_from] -= _value;                          // Subtract from the sender\r\n          Transfer(_from, 0x0000000000000000000000000000000000000000, _value);\r\n          return true;\r\n        }\r\n\r\n        /* Mint coins */\r\n        function mint(address _to, uint256 _value) onlyMinters {\r\n\r\n            if (balance[_to] + _value < balance[_to]) throw; // Check for overflows\r\n            if (this == _to){throw;}\r\n            balance[_to] += _value;                            // Add the same to the recipient\r\n          Transfer(this, _to, _value);                           // Notify anyone listening that this transfer took place\r\n        }\r\n\r\n        function addMinter(address addr) returns (bool success) {\r\n          if(!addressInArray(addr)){\r\n            minters.push(addr);\r\n            return true;\r\n          }\r\n          return false;\r\n        }\r\n\r\n        function removeMinter(address addr) returns (bool success) {\r\n          for(uint i=0; i<minters.length;i++){\r\n            if(minters[i]==addr){\r\n              delete minters[i];\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n\r\n\r\n        function addressInArray(address inAddress) private returns (bool inArray){\r\n          for(uint i=0; i<minters.length;i++){\r\n            if(minters[i]==inAddress){\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n\r\n\r\n        function kill() onlyOwner {\r\n          suicide(owner);\r\n        }\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }\r\n}\r\n/*contract token {\r\n    mapping (address => uint256) public balanceOf;\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function mintToken(address target, uint256 mintedAmount);\r\n}*/", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"drink\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "UnicornMilk", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}