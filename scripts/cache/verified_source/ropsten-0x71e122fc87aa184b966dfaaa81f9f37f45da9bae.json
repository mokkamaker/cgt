{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.0;\r\n\r\ncontract AbstractENS {\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n\r\n    event Transfer(bytes32 indexed node, address owner);\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}\r\n\r\n/**\r\n * A simple resolver anyone can use; only allows the owner of a node to set its\r\n * address.\r\n */\r\ncontract PublicResolver {\r\n    AbstractENS ens;\r\n    mapping(bytes32=>address) addresses;\r\n\r\n    modifier only_owner(bytes32 node) {\r\n        if(ens.owner(node) != msg.sender) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param ensAddr The ENS registrar contract.\r\n     */\r\n    function PublicResolver(address ensAddr) {\r\n        ens = AbstractENS(ensAddr);\r\n    }\r\n\r\n    /**\r\n     * Fallback function.\r\n     */\r\n    function() {\r\n        throw;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the specified node has the specified record type.\r\n     * @param node The ENS node to query.\r\n     * @param kind The record type name, as specified in EIP137.\r\n     * @return True if this resolver has a record of the provided type on the\r\n     *         provided node.\r\n     */\r\n    function has(bytes32 node, bytes32 kind) constant returns (bool) {\r\n        return (kind == \"addr\" && addresses[node] != 0);\r\n    }\r\n    \r\n    /**\r\n     * Returns the address associated with an ENS node.\r\n     * @param node The ENS node to query.\r\n     * @return The associated address.\r\n     */\r\n    function addr(bytes32 node) constant returns (address ret) {\r\n        ret = addresses[node];\r\n        if(ret == 0)\r\n            throw;\r\n    }\r\n\r\n    /**\r\n     * Sets the address associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param addr The address to set.\r\n     */\r\n    function setAddr(bytes32 node, address addr) only_owner(node) {\r\n        addresses[node] = addr;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"name\":\"ret\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"kind\",\"type\":\"bytes32\"}],\"name\":\"has\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"ensAddr\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"}]", "ContractName": "PublicResolver", "CompilerVersion": "v0.4.4+commit.4633f3de", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000112234455c3a32fd11230c42e7bccd4a84e02010", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}