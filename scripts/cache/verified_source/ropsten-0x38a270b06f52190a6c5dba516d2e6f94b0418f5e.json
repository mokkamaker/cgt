{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.0;\r\n\r\n/*\r\n* A basic class to introduce an access control.\r\n* All registered manager can access.\r\n* A registered manager is an address mapped with true.\r\n*/\r\ncontract Manageable {\r\n\r\n\tuint public mangerCount;\r\n\tmapping (address=>bool)public managers;\r\n\t// Start of user code Manageable.attributes\r\n\t// End of user code\r\n\t\r\n\tmodifier onlyManager\r\n\t{\r\n\t//    if (!canAccess()) throw;\r\n\t    _;\r\n\t}\r\n\t\r\n\t\r\n\tevent ManagerChanged(uint _state,address _address,uint _managerCount);\r\n\t\r\n\t\r\n\tfunction Manageable() public   {\r\n\t\t//Start of user code Manageable.constructor.Manageable\r\n\t    managers[msg.sender] = true;\r\n\t\tmangerCount++;\r\n//\t\tManagerChanged(0,msg.sender,mangerCount);\r\n\t\t//End of user code\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction canAccess() internal  returns (bool ) {\r\n\t\t \r\n\t\t\r\n\t\t//Start of user code Manageable.function.canAccess\r\n\t\treturn managers[msg.sender];\r\n\t\t//End of user code\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction addManager(address _newManagerAddress) public  onlyManager  {\r\n\t\t \r\n\t\t\r\n\t\t//Start of user code Manageable.function.addManager_address\r\n\t\tif(!managers[_newManagerAddress]){\r\n\t\t\tmangerCount++;\r\n\t\t\tManagerChanged(0,_newManagerAddress,mangerCount);\t\r\n\t\t}\r\n\t\t\r\n\t\tmanagers[_newManagerAddress] = true;\r\n\t\t//End of user code\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction removeManager(address _managerAddress) public  onlyManager  {\r\n\t\t \r\n\t\t\r\n\t\t//Start of user code Manageable.function.removeManager_address\r\n\t\tif(managers[_managerAddress]){\r\n\t\t\tmangerCount--;\r\n\t\t\tManagerChanged(1,_managerAddress,mangerCount);\r\n\t\t}\r\n\t\tmanagers[_managerAddress] = false;\r\n\t\t//End of user code\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction isManager(address _managerAddress) public   constant returns (bool ) {\r\n\t\t//Start of user code Manageable.function.isManager_address\r\n\t\tif( managers[_managerAddress])\r\n\t\t\treturn true;\r\n\t\t\r\n\t\treturn false;\r\n\t\t//End of user code\r\n\t}\r\n\t\r\n\t// Start of user code Manageable.operations\r\n\t//TODO: implement\r\n\t// End of user code\r\n}\r\n\r\n\r\n\r\ncontract MessagePublisher {\r\n\t\r\n\t/*\r\n\t* Publish the message to the blog.\r\n\t* \r\n\t* message -The message to send.\r\n\t* hash -The hash of the message.\r\n\t* er -The external resource of the message.\r\n\t*/\r\n\tfunction publishMessage(string message,string hash,string er) public  ;\r\n}\r\n\r\n/*\r\n* A Short blog can save messages on the blockchain.\r\n*/\r\ncontract ShortBlog is Manageable {\r\n    /*\r\n    * A message in the blog.\r\n    */\r\n    struct Message {\r\n    \tstring message;\r\n    \tuint date;\r\n    \tuint id;\r\n    \taddress sender;\r\n    \tuint blockNumber;\r\n    \tstring hashValue;\r\n    \tstring externalResource;\r\n    }\r\n\r\n\tuint public messageCount;\r\n\tuint public lastMessageDate;\r\n\tstring public name;\r\n\tmapping (uint=>Message)public messages;\r\n\t// Start of user code ShortBlog.attributes\r\n\t//TODO: implement\r\n\t// End of user code\r\n\t\r\n\t/*\r\n\t* Called when a new message is posted.\r\n\t* \r\n\t* message -The message.\r\n\t* messageId -\r\n\t* messageSender -The sender of the message.\r\n\t* messageHashValue -The hash of the message.\r\n\t* externalResource -The external resource (a link) to the message. \r\n\t*/\r\n\tevent NewMessage(string message,uint messageId,address messageSender,string messageHashValue,string externalResource);\r\n\t\r\n\t\r\n\tfunction ShortBlog(string _name) public   {\r\n\t\t//Start of user code ShortBlog.constructor.ShortBlog_string\r\n\t\t//super();\r\n\t\tname = _name;\r\n\t\t//End of user code\r\n\t}\r\n\t\r\n\t\r\n\t/*\r\n\t* Send a message to the blog,\r\n\t* \r\n\t* message -The message as string.\r\n\t* hash -The hash of the external source.\r\n\t* er -The link to the message.\r\n\t*/\r\n\tfunction sendMessage(string message,string hash,string er) public  onlyManager()  {\r\n\t\t \r\n\t\t\r\n\t\t//Start of user code ShortBlog.function.sendMessage_string_string_string\r\n\t\t messages[messageCount].message=message;\r\n\t\t messages[messageCount].id=messageCount;\r\n\t\t messages[messageCount].date=now;\r\n\t\t messages[messageCount].sender=msg.sender;\r\n\t\t messages[messageCount].externalResource = er;\r\n\t\t messages[messageCount].hashValue = hash;\r\n\t\t messages[messageCount].blockNumber=block.number;\r\n\t\t NewMessage(message,messageCount,msg.sender,hash,er);\r\n\t\t lastMessageDate= now;\r\n\t\t messageCount++;\r\n\t\t//End of user code\r\n\t}\r\n\t\r\n\t// Start of user code ShortBlog.operations\r\n\t//TODO: implement\r\n\t// End of user code\r\n}\r\n\r\n/*\r\n* The registry create new blogs.\r\n*/\r\ncontract BlogRegistry is Manageable {\r\n\r\n\tuint public blogCount;\r\n\tmapping (uint=>ShortBlog)public blogs;\r\n\t// Start of user code BlogRegistry.attributes\r\n\t//TODO: implement\r\n\t// End of user code\r\n\t\r\n\t\r\n\tevent NewBlog(uint index,string name,address blogAddress);\r\n\t\r\n\t\r\n\t/*\r\n\t* Register a blog under a name.\r\n\t* returns 0 for ok and 1 else.\r\n\t* \r\n\t* _name -The name of the blog.\r\n\t* returns\r\n\t*  -\r\n\t*/\r\n\tfunction registerBlog(string _name) public  onlyManager() returns (ShortBlog ) {\r\n\t\t\r\n\t\t//Start of user code BlogRegistry.function.registerBlog_string\r\n\t\tShortBlog sb = new ShortBlog(_name);\r\n\t\tsb.addManager(msg.sender);\r\n\t\tblogs[blogCount] = sb;\r\n\t\tNewBlog(blogCount,_name,sb);\r\n\t\tblogCount++;\r\n\t\treturn sb; \r\n\t\t//End of user code\r\n\t}\r\n\t\r\n\t// Start of user code BlogRegistry.operations\r\n\t//TODO: implement\r\n\t// End of user code\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_newManagerAddress\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mangerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blogs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerBlog\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_managerAddress\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blogCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_managerAddress\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"blogAddress\",\"type\":\"address\"}],\"name\":\"NewBlog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_managerCount\",\"type\":\"uint256\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]", "ContractName": "BlogRegistry", "CompilerVersion": "v0.4.4-nightly.2016.10.25+commit.f99a418b", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}