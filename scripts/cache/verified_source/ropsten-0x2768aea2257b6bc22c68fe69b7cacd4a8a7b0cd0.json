{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.8;\r\n\r\ncontract TimeStamp{\r\n\r\n    struct SharedDocument {\r\n\r\n        string sharedDocumentId;\r\n        string dateShared;\r\n        string sharedLogin;\r\n    }\r\n\r\n    struct DocumentRecord {\r\n\r\n        bool exists;\r\n        string dateUploaded;\r\n        string documentHash;\r\n        string ownerLogin;\r\n        SharedDocument[] sharedDocuments;\r\n    }\r\n\r\n\r\n    address owner;\r\n    address newContract;\r\n    address oldContract;\r\n\r\n    //Mapping documentId => DocumentRecord\r\n    mapping(string => DocumentRecord) documentRecords;\r\n\r\n    string[] documentIds;\r\n\r\n\r\n    //modifier ownercontract { if(msg.sender == owner || msg.sender == newContract) _;}\r\n    modifier onlyowner { if(msg.sender == owner) _;}\r\n\r\n\r\n    function TimeStamp() payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    function getDocumentRecord(uint _index) constant returns(string documentId, string dateUploaded, uint numberShares, string documentHash, string ownerLogin){\r\n\r\n        if(_index >= documentIds.length){\r\n            throw;\r\n        }\r\n\r\n        DocumentRecord result = documentRecords[documentIds[_index]];\r\n        return (documentIds[_index], result.dateUploaded, result.sharedDocuments.length, result.documentHash, result.ownerLogin);\r\n    }\r\n\r\n\r\n    function getDocumentRecordById(string _documentId) constant returns(string dateUploaded, uint numberShares, string documentHash, string ownerLogin){\r\n\r\n        DocumentRecord result = documentRecords[_documentId];\r\n        return (result.dateUploaded, result.sharedDocuments.length, result.ownerLogin, result.documentHash);\r\n    }\r\n\r\n\r\n    function getSharedDocument(string _documentId, uint _sharedDocumentIndex) constant returns(string sharedDocumentId, string dateShared, string sharedLogin){\r\n\r\n        DocumentRecord result = documentRecords[_documentId];\r\n        SharedDocument sharedResult = result.sharedDocuments[_sharedDocumentIndex];\r\n\r\n        return (sharedResult.sharedDocumentId, sharedResult.dateShared, sharedResult.sharedLogin);\r\n    }\r\n    \r\n    \r\n    function getDocumentRecordsNumber() constant returns (uint n){\r\n\r\n        return documentIds.length;\r\n    }\r\n\r\n\r\n    function addDocumentRecord(string _documentId, string _dateUploaded, string _documentHash, string _ownerLogin) onlyowner returns (uint _index) {\r\n\r\n        if(documentRecords[_documentId].exists){\r\n            throw;\r\n        }\r\n\r\n        uint index = documentIds.length;\r\n        documentIds.length++;\r\n        documentIds[index] = _documentId;\r\n\r\n        documentRecords[_documentId].exists = true;\r\n        documentRecords[_documentId].dateUploaded = _dateUploaded;\r\n        documentRecords[_documentId].documentHash = _documentHash;\r\n        documentRecords[_documentId].ownerLogin = _ownerLogin;\r\n\r\n        return index;\r\n    }\r\n\r\n\r\n    function addSharedDocument(string _documentId, string _dateShared, string _sharedDocumentId, string _sharedLogin) onlyowner returns (uint _index) {\r\n\r\n        DocumentRecord record = documentRecords[_documentId];\r\n        if(!record.exists){\r\n            throw;\r\n        }\r\n\r\n        uint index = record.sharedDocuments.length;\r\n        record.sharedDocuments.length++;\r\n        record.sharedDocuments[index].sharedDocumentId = _sharedDocumentId;\r\n        record.sharedDocuments[index].dateShared = _dateShared;\r\n        record.sharedDocuments[index].sharedLogin = _sharedLogin;\r\n\r\n        return index;\r\n    }\r\n\r\n\r\n    function setOwner(address _newOwner) onlyowner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n\r\n    function setNewContract(address _newContract) onlyowner {\r\n        newContract = _newContract;\r\n    }\r\n\r\n\r\n    function setOldContract(address _oldContract) onlyowner {\r\n        oldContract = _oldContract;\r\n    }\r\n\r\n\r\n    function getOldContract() onlyowner constant returns (address a){\r\n        return oldContract;\r\n    }\r\n    \r\n    \r\n    function destroy() onlyowner {\r\n        suicide(owner); // send funds to owner\r\n    }\r\n\r\n\r\n    function isOwner() constant onlyowner returns(bool){\r\n        return true;\r\n    }\r\n\r\n\r\n    function getOwner() constant returns (address a){\r\n        return owner;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_documentId\",\"type\":\"string\"},{\"name\":\"_dateUploaded\",\"type\":\"string\"},{\"name\":\"_documentHash\",\"type\":\"string\"},{\"name\":\"_ownerLogin\",\"type\":\"string\"}],\"name\":\"addDocumentRecord\",\"outputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDocumentRecordsNumber\",\"outputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_documentId\",\"type\":\"string\"},{\"name\":\"_sharedDocumentIndex\",\"type\":\"uint256\"}],\"name\":\"getSharedDocument\",\"outputs\":[{\"name\":\"sharedDocumentId\",\"type\":\"string\"},{\"name\":\"dateShared\",\"type\":\"string\"},{\"name\":\"sharedLogin\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_documentId\",\"type\":\"string\"},{\"name\":\"_dateShared\",\"type\":\"string\"},{\"name\":\"_sharedDocumentId\",\"type\":\"string\"},{\"name\":\"_sharedLogin\",\"type\":\"string\"}],\"name\":\"addSharedDocument\",\"outputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setNewContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldContract\",\"type\":\"address\"}],\"name\":\"setOldContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOldContract\",\"outputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDocumentRecord\",\"outputs\":[{\"name\":\"documentId\",\"type\":\"string\"},{\"name\":\"dateUploaded\",\"type\":\"string\"},{\"name\":\"numberShares\",\"type\":\"uint256\"},{\"name\":\"documentHash\",\"type\":\"string\"},{\"name\":\"ownerLogin\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_documentId\",\"type\":\"string\"}],\"name\":\"getDocumentRecordById\",\"outputs\":[{\"name\":\"dateUploaded\",\"type\":\"string\"},{\"name\":\"numberShares\",\"type\":\"uint256\"},{\"name\":\"documentHash\",\"type\":\"string\"},{\"name\":\"ownerLogin\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"}]", "ContractName": "TimeStamp", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8e2b85dff950689e138e185f5f38642b61e1ba126b29991897b84259355b7b9"}]}