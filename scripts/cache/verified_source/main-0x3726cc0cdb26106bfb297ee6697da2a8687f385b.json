{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\ncontract Crypland {\r\n\r\n  struct Element {uint worth; uint level; uint cooldown;}\r\n  struct Offer {uint startPrice; uint endPrice; uint startBlock; uint endBlock; bool isOffer;}\r\n\r\n  bool public paused;\r\n  address public owner;\r\n\r\n  Element[][25][4] public elements;\r\n  mapping (uint => mapping (uint => mapping (uint => address))) public addresses;\r\n  mapping (uint => mapping (uint => mapping (uint => Offer))) public offers;\r\n\r\n  event ElementBought(uint indexed group, uint indexed asset, uint indexed unit, address user, uint price, uint level, uint worth);\r\n  event ElementUpgraded(uint indexed group, uint indexed asset, uint indexed unit, address user, uint price, uint level, uint worth);\r\n  event ElementTransferred(uint indexed group, uint indexed asset, uint indexed unit, address user, uint price, uint level, uint worth);\r\n\r\n  event UserUpgraded(address indexed user, uint group, uint asset, uint unit, uint price);\r\n  event UserSold(address indexed user, uint group, uint asset, uint unit, uint price);\r\n  event UserBought(address indexed user, uint group, uint asset, uint unit, uint price);\r\n\r\n  function Crypland() public {\r\n    owner = msg.sender;\r\n    paused = false;\r\n  }\r\n\r\n  modifier whenOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenElementHolder(uint group, uint asset, uint unit) {\r\n    require(group >= 0 && group < 4);\r\n    require(asset >= 0 && asset < 25);\r\n    require(unit >= 0 && unit < elements[group][asset].length);\r\n    require(addresses[group][asset][unit] == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier whenNotElementHolder(uint group, uint asset, uint unit) {\r\n    require(group >= 0 && group < 4);\r\n    require(asset >= 0 && asset < 25);\r\n    require(unit >= 0 && unit < elements[group][asset].length);\r\n    require(addresses[group][asset][unit] != msg.sender);\r\n    _;\r\n  }\r\n\r\n  function ownerPause() external whenOwner whenNotPaused {\r\n    paused = true;\r\n  }\r\n\r\n  function ownerUnpause() external whenOwner whenPaused {\r\n    paused = false;\r\n  }\r\n\r\n  function ownerWithdraw(uint amount) external whenOwner {\r\n    owner.transfer(amount);\r\n  }\r\n\r\n  function ownerDestroy() external whenOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function publicGetAsset(uint group, uint asset) view public returns (uint, uint, uint, uint, uint) {\r\n    return (\r\n      calcAssetWorthIndex(asset),\r\n      calcAssetBuyPrice(asset),\r\n      calcAssetUpgradePrice(asset),\r\n      calcAssetMax(asset),\r\n      calcAssetAssigned(group, asset)\r\n    );\r\n  }\r\n\r\n  function publicGetElement(uint group, uint asset, uint unit) view public returns (address, uint, uint, uint, uint, bool) {\r\n    return (\r\n      addresses[group][asset][unit],\r\n      elements[group][asset][unit].level,\r\n      calcElementWorth(group, asset, unit),\r\n      calcElementCooldown(group, asset, unit),\r\n      calcElementCurrentPrice(group, asset, unit),\r\n      offers[group][asset][unit].isOffer\r\n    );\r\n  }\r\n\r\n  function publicGetElementOffer(uint group, uint asset, uint unit) view public returns (uint, uint, uint, uint, uint) {\r\n    return (\r\n      offers[group][asset][unit].startPrice,\r\n      offers[group][asset][unit].endPrice,\r\n      offers[group][asset][unit].startBlock,\r\n      offers[group][asset][unit].endBlock,\r\n      block.number\r\n    );\r\n  }\r\n\r\n  function userAssignElement(uint group, uint asset, address ref) public payable whenNotPaused {\r\n    uint price = calcAssetBuyPrice(asset);\r\n\r\n    require(group >= 0 && group < 4);\r\n    require(asset >= 0 && asset < 23);\r\n    require(calcAssetAssigned(group, asset) < calcAssetMax(asset));\r\n    require(msg.value >= price);\r\n\r\n    if (ref == address(0) || ref == msg.sender) {\r\n      ref = owner;\r\n    }\r\n\r\n    uint paidWorth = uint(block.blockhash(block.number - asset)) % 100 + 1;\r\n    Element memory paidElement = Element(paidWorth, 1, 0);\r\n    uint paidUnit = elements[group][asset].push(paidElement) - 1;\r\n    addresses[group][asset][paidUnit] = msg.sender;\r\n\r\n    uint freeWorth = uint(block.blockhash(block.number - paidWorth)) % 100 + 1;\r\n    Element memory freeElement = Element(freeWorth, 1, 0);\r\n    uint freeUnit = elements[group][23].push(freeElement) - 1;\r\n    addresses[group][23][freeUnit] = msg.sender;\r\n\r\n    uint refWorth = uint(block.blockhash(block.number - freeWorth)) % 100 + 1;\r\n    Element memory refElement = Element(refWorth, 1, 0);\r\n    uint refUnit = elements[group][24].push(refElement) - 1;\r\n    addresses[group][24][refUnit] = ref;\r\n\r\n    ElementBought(group, asset, paidUnit, msg.sender, price, 1, paidWorth);\r\n    ElementBought(group, 23, freeUnit, msg.sender, 0, 1, freeWorth);\r\n    ElementBought(group, 24, refUnit, ref, 0, 1, refWorth);\r\n    UserBought(msg.sender, group, asset, paidUnit, price);\r\n    UserBought(msg.sender, group, 23, freeUnit, 0);\r\n    UserBought(ref, group, 24, refUnit, 0);\r\n  }\r\n\r\n  function userUpgradeElement(uint group, uint asset, uint unit) public payable whenNotPaused whenElementHolder(group, asset, unit) {\r\n    uint price = calcAssetUpgradePrice(asset);\r\n\r\n    require(elements[group][asset][unit].cooldown < block.number);\r\n    require(msg.value >= price);\r\n\r\n    elements[group][asset][unit].level = elements[group][asset][unit].level + 1;\r\n    elements[group][asset][unit].cooldown = block.number + ((elements[group][asset][unit].level - 1) * 120);\r\n    \r\n    ElementUpgraded(group, asset, unit, msg.sender, price, elements[group][asset][unit].level, calcElementWorth(group, asset, unit));\r\n    UserUpgraded(msg.sender, group, asset, unit, price);\r\n  }\r\n\r\n  function userOfferSubmitElement(uint group, uint asset, uint unit, uint startPrice, uint endPrice, uint duration) public whenNotPaused whenElementHolder(group, asset, unit) {\r\n    require(!offers[group][asset][unit].isOffer); \r\n    require(startPrice > 0 && endPrice > 0 && duration > 0 && startPrice >= endPrice);\r\n\r\n    offers[group][asset][unit].isOffer = true;\r\n    offers[group][asset][unit].startPrice = startPrice;\r\n    offers[group][asset][unit].endPrice = endPrice;\r\n    offers[group][asset][unit].startBlock = block.number;\r\n    offers[group][asset][unit].endBlock = block.number + duration;\r\n  }\r\n\r\n  function userOfferCancelElement(uint group, uint asset, uint unit) public whenNotPaused whenElementHolder(group, asset, unit) {\r\n    require(offers[group][asset][unit].isOffer);\r\n    offers[group][asset][unit].isOffer = false;\r\n    offers[group][asset][unit].startPrice = 0;\r\n    offers[group][asset][unit].endPrice = 0;\r\n    offers[group][asset][unit].startBlock = 0;\r\n    offers[group][asset][unit].endBlock = 0;\r\n  }\r\n\r\n  function userOfferAcceptElement(uint group, uint asset, uint unit) public payable whenNotPaused whenNotElementHolder(group, asset, unit) {\r\n    uint price = calcElementCurrentPrice(group, asset, unit);\r\n\r\n    require(offers[group][asset][unit].isOffer);\r\n    require(msg.value >= price);\r\n\r\n    address seller = addresses[group][asset][unit];\r\n\r\n    addresses[group][asset][unit] = msg.sender;\r\n    offers[group][asset][unit].isOffer = false;\r\n\r\n    seller.transfer(price * 97 / 100);\r\n    msg.sender.transfer(msg.value - price);\r\n\r\n    ElementTransferred(group, asset, unit, msg.sender, price, elements[group][asset][unit].level, calcElementWorth(group, asset, unit));\r\n    UserBought(msg.sender, group, asset, unit, price);\r\n    UserSold(seller, group, asset, unit, price);\r\n  }\r\n\r\n  function calcAssetWorthIndex(uint asset) pure internal returns (uint) {\r\n    return asset < 23 ? (24 - asset) : 1;\r\n  }\r\n\r\n  function calcAssetBuyPrice(uint asset) pure internal returns (uint) {\r\n    return asset < 23 ? ((24 - asset) * (25 - asset) * 10**15 / 2) : 0;\r\n  }\r\n\r\n  function calcAssetUpgradePrice(uint asset) pure internal returns (uint) {\r\n    return calcAssetWorthIndex(asset) * 10**15;\r\n  }\r\n\r\n  function calcAssetMax(uint asset) pure internal returns (uint) {\r\n    return asset < 23 ? ((asset + 1) * (asset + 2) / 2) : 2300;\r\n  }\r\n\r\n  function calcAssetAssigned(uint group, uint asset) view internal returns (uint) {\r\n    return elements[group][asset].length;\r\n  }\r\n\r\n  function calcElementWorth(uint group, uint asset, uint unit) view internal returns (uint) {\r\n    return elements[group][asset][unit].worth + ((elements[group][asset][unit].level - 1) * calcAssetWorthIndex(asset));\r\n  }\r\n\r\n  function calcElementCooldown(uint group, uint asset, uint unit) view internal returns (uint) {\r\n    return elements[group][asset][unit].cooldown > block.number ? elements[group][asset][unit].cooldown - block.number : 0;\r\n  }\r\n\r\n  function calcElementCurrentPrice(uint group, uint asset, uint unit) view internal returns (uint) {\r\n    uint price = 0;\r\n    if (offers[group][asset][unit].isOffer) {\r\n      if (block.number >= offers[group][asset][unit].endBlock) {\r\n        price = offers[group][asset][unit].endPrice;\r\n      } else if (block.number <= offers[group][asset][unit].startBlock) {\r\n        price = offers[group][asset][unit].startPrice;\r\n      } else if (offers[group][asset][unit].endPrice == offers[group][asset][unit].startPrice) {\r\n        price = offers[group][asset][unit].endPrice;\r\n      } else {\r\n        uint currentBlockChange = block.number - offers[group][asset][unit].startBlock;\r\n        uint totalBlockChange = offers[group][asset][unit].endBlock - offers[group][asset][unit].startBlock;\r\n        uint totalPriceChange = offers[group][asset][unit].startPrice - offers[group][asset][unit].endPrice;\r\n        uint currentPriceChange = currentBlockChange * totalPriceChange / totalBlockChange;\r\n        price = offers[group][asset][unit].startPrice - currentPriceChange;\r\n      }\r\n    }\r\n\r\n    return price;\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"ownerUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerDestroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"uint256\"}],\"name\":\"publicGetAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elements\",\"outputs\":[{\"name\":\"worth\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"cooldown\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"userOfferSubmitElement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"userOfferAcceptElement\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"userUpgradeElement\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"},{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\"},{\"name\":\"isOffer\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"userOfferCancelElement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"publicGetElement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"uint256\"},{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"userAssignElement\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"publicGetElementOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"group\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"asset\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"ElementBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"group\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"asset\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"ElementUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"group\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"asset\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"ElementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UserUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UserSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UserBought\",\"type\":\"event\"}]", "ContractName": "Crypland", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "Library": "", "SwarmSource": "bzzr://b1c60f6868962b5c1fb22e9cd62fa68ad74882ed89d9045fac5436980de08708"}]}