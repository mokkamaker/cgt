{"status": "1", "message": "OK", "result": [{"SourceCode": "//! DappReg is a Dapp Registry\r\n//! By Parity Team (Ethcore), 2016.\r\n//! Released under the Apache Licence 2.\r\n\r\npragma solidity ^0.4.1;\r\n\r\ncontract Owned {\r\n\tevent NewOwner(address indexed old, address indexed current);\r\n\r\n\tmodifier only_owner {\r\n\t\tif (msg.sender != owner) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\taddress public owner = msg.sender;\r\n\r\n\tfunction setOwner(address _new) only_owner {\r\n\t\tNewOwner(owner, _new);\r\n\t\towner = _new;\r\n\t}\r\n}\r\n\r\ncontract DappReg is Owned {\r\n\t// id       - shared to be the same accross all contracts for a specific dapp (including GithuHint for the repo)\r\n\t// owner    - that guy\r\n\t// meta     - meta information for the dapp\r\n\tstruct Dapp {\r\n\t\tbytes32 id;\r\n\t\taddress owner;\r\n\t\tmapping (bytes32 => bytes32) meta;\r\n\t}\r\n\r\n\tmodifier when_fee_paid {\r\n\t\tif (msg.value < fee) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier only_dapp_owner(bytes32 _id) {\r\n\t\tif (dapps[_id].owner != msg.sender) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier either_owner(bytes32 _id) {\r\n\t\tif (dapps[_id].owner != msg.sender && owner != msg.sender) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier when_id_free(bytes32 _id) {\r\n\t\tif (dapps[_id].id != 0) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\tevent MetaChanged(bytes32 indexed id, bytes32 indexed key, bytes32 value);\r\n\tevent OwnerChanged(bytes32 indexed id, address indexed owner);\r\n\tevent Registered(bytes32 indexed id, address indexed owner);\r\n\tevent Unregistered(bytes32 indexed id);\r\n\r\n\tmapping (bytes32 => Dapp) dapps;\r\n\tbytes32[] ids;\r\n\r\n\tuint public fee = 1 ether;\r\n\r\n\t// returns the count of the dapps we have\r\n\tfunction count() constant returns (uint) {\r\n\t\treturn ids.length;\r\n\t}\r\n\r\n\t// a dapp from the list\r\n\tfunction at(uint _index) constant returns (bytes32 id, address owner) {\r\n\t\tDapp d = dapps[ids[_index]];\r\n\t\tid = d.id;\r\n\t\towner = d.owner;\r\n\t}\r\n\r\n\t// get with the id\r\n\tfunction get(bytes32 _id) constant returns (bytes32 id, address owner) {\r\n\t\tDapp d = dapps[_id];\r\n\t\tid = d.id;\r\n\t\towner = d.owner;\r\n\t}\r\n\r\n\t// add apps\r\n\tfunction register(bytes32 _id) when_fee_paid when_id_free(_id) {\r\n\t\tids.push(_id);\r\n\t\tdapps[_id] = Dapp(_id, msg.sender);\r\n\t\tRegistered(_id, msg.sender);\r\n\t}\r\n\r\n\t// remove apps\r\n\tfunction unregister(bytes32 _id) either_owner(_id) {\r\n\t\tdelete dapps[_id];\r\n\t\tUnregistered(_id);\r\n\t}\r\n\r\n\t// get meta information\r\n\tfunction meta(bytes32 _id, bytes32 _key) constant returns (bytes32) {\r\n\t\treturn dapps[_id].meta[_key];\r\n\t}\r\n\r\n\t// set meta information\r\n\tfunction setMeta(bytes32 _id, bytes32 _key, bytes32 _value) only_dapp_owner(_id) {\r\n\t\tdapps[_id].meta[_key] = _value;\r\n\t\tMetaChanged(_id, _key, _value);\r\n\t}\r\n\r\n\t// set the dapp owner\r\n\tfunction setDappOwner(bytes32 _id, address _owner) only_dapp_owner(_id) {\r\n\t\tdapps[_id].owner = _owner;\r\n\t\tOwnerChanged(_id, _owner);\r\n\t}\r\n\r\n\t// set the registration fee\r\n\tfunction setFee(uint _fee) only_owner {\r\n\t\tfee = _fee;\r\n\t}\r\n\r\n\t// retrieve funds paid\r\n\tfunction drain() only_owner {\r\n\t\tif (!msg.sender.send(this.balance)) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"meta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"unregister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setMeta\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setDappOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"MetaChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]", "ContractName": "DappReg", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}