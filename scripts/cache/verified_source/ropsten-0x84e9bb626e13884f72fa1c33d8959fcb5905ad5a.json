{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.1;\r\n\r\n// ECR20 standard token interface\r\ncontract Token {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\tfunction approve(address _spender, uint256 _value) returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\ncontract EtherianToken is Token{\r\n\r\n\tstruct Receipt {  \r\n\t\taddress minter;\r\n\t\taddress beneficiary;\r\n\t\tstring data;\r\n\t}\r\n\r\n\t// this is as basic as can be, only the associated balance & allowances\r\n\tstruct Account {\r\n\t\tuint balance;\r\n\t\tmapping (address => uint) allowanceOf;\r\n\t\tbool minter;\r\n\t}\r\n\r\n\t// the balance should be available\r\n\tmodifier when_minter(address _minter) {\r\n\t\tif (!accounts[_minter].minter) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// the balance should be available\r\n\tmodifier when_owns(address _owner, uint _amount) {\r\n\t\tif (accounts[_owner].balance < _amount) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// an allowance should be available\r\n\tmodifier when_has_allowance(address _owner, address _spender, uint _amount) {\r\n\t\tif (accounts[_owner].allowanceOf[_spender] < _amount) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// no ETH should be sent with the transaction\r\n\tmodifier when_no_eth {\r\n\t\tif (msg.value > 0) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// a value should be > 0\r\n\tmodifier when_non_zero(uint _value) {\r\n\t\tif (_value == 0) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// the base, tokens denoted in micros\r\n\tuint constant public base = 1;\r\n\r\n\t// available token supply\r\n\tuint public totalSupply;\r\n\r\n\t// storage and mapping of minting receipts\r\n    mapping (uint => Receipt) public receipts;\r\n\r\n\t// storage and mapping of all balances & allowances\r\n\tmapping (address => Account) public accounts;\r\n\r\n\t// constructor sets the parameters of execution, _totalSupply is all units\r\n\tfunction EtherianToken(address _minter) when_no_eth {\r\n\t    _minter = _minter == 0x0 ? msg.sender : _minter;\r\n\t\taccounts[_minter].minter = true;\r\n\t}\r\n\r\n    function mint(address _beneficiary,string _data) when_minter(msg.sender){\r\n\t\ttotalSupply++;\r\n        receipts[totalSupply].minter = msg.sender;\r\n        receipts[totalSupply].beneficiary = _beneficiary;\r\n        receipts[totalSupply].data = _data;\r\n        accounts[_beneficiary].balance++;\r\n    }\r\n\r\n\t// balance of a specific address\r\n\tfunction balanceOf(address _who) constant returns (uint256) {\r\n\t\treturn accounts[_who].balance;\r\n\t}\r\n\r\n\t// transfer\r\n\tfunction transfer(address _to, uint256 _value) when_no_eth when_owns(msg.sender, _value) returns (bool) {\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\taccounts[msg.sender].balance -= _value;\r\n\t\taccounts[_to].balance += _value;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// transfer via allowance\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) when_no_eth when_owns(_from, _value) when_has_allowance(_from, msg.sender, _value) returns (bool) {\r\n\t\tTransfer(_from, _to, _value);\r\n\t\taccounts[_from].allowanceOf[msg.sender] -= _value;\r\n\t\taccounts[_from].balance -= _value;\r\n\t\taccounts[_to].balance += _value;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// approve allowances\r\n\tfunction approve(address _spender, uint256 _value) when_no_eth returns (bool) {\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\taccounts[msg.sender].allowanceOf[_spender] += _value;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// available allowance\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256) {\r\n\t\treturn accounts[_owner].allowanceOf[_spender];\r\n\t}\r\n\r\n\t// no default function, simple contract only, entry-level users\r\n\tfunction() {\r\n\t\tthrow;\r\n\t}\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receipts\",\"outputs\":[{\"name\":\"minter\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"minter\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "EtherianToken", "CompilerVersion": "v0.4.9+commit.364da425", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f435dbee10fddb1c803068270283b26a89531d1f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cb616d4855cf0cd42d793f7aa71e2ce3131bc2d8d16fc72891bbe941dfda1e8a"}]}