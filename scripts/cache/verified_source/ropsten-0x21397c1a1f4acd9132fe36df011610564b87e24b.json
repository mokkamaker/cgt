{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.0;\r\n\r\ncontract AbstractENS {\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n\r\n    event Transfer(bytes32 indexed node, address owner);\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}\r\n\r\n/**\r\n * A registrar that allocates subdomains to the first person to claim them, but\r\n * expires registrations a fixed period after they're initially claimed.\r\n */\r\ncontract TestRegistrar {\r\n    uint constant registrationPeriod = 4 weeks;\r\n    \r\n    AbstractENS public ens;\r\n    bytes32 public rootNode;\r\n    mapping(bytes32=>uint) public expiryTimes;\r\n    \r\n    /**\r\n     * Constructor.\r\n     * @param ensAddr The address of the ENS registry.\r\n     * @param node The node that this registrar administers.\r\n     */\r\n    function TestRegistrar(address ensAddr, bytes32 node) {\r\n        ens = AbstractENS(ensAddr);\r\n        rootNode = node;\r\n    }\r\n\r\n    /**\r\n     * Register a name that's not currently registered\r\n     * @param subnode The hash of the label to register.\r\n     * @param owner The address of the new owner.\r\n     */    \r\n    function register(bytes32 subnode, address owner) {\r\n        if(expiryTimes[subnode] >= now)\r\n            throw;\r\n\r\n        expiryTimes[subnode] = now + registrationPeriod;\r\n        ens.setSubnodeOwner(rootNode, subnode, owner);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"expiryTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subnode\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"ensAddr\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"bytes32\"}],\"type\":\"constructor\"}]", "ContractName": "TestRegistrar", "CompilerVersion": "v0.4.4+commit.4633f3de", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000112234455c3a32fd11230c42e7bccd4a84e0201004f740db81dc36c853ab4205bddd785f46e79ccedca351fc6dfcbd8cc9a33dd6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}