{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.8;\r\n//interfaces for correct compiling\r\ncontract IProxyElectricCharger\r\n{\r\n     function createOrder (uint chargerId,uint orderId,address user,uint startTime,uint endTime , uint electricity,uint payedSum) external;   \r\n     function confirmOrder (uint chargerId,uint orderId ,uint actualElectricity) external returns (bool success) ;\r\n     function addNewCharger(uint id, address _address);\r\n        \r\n}\r\ncontract IElectricCharger {\r\n   \r\n    function createInvestor(uint _id ,address _address,uint _balance) internal;\r\n    function setInvestors(uint[] ids,address[] addresses,uint[] balances,uint investmentsCount);\r\n\r\n    function evaluateProfit();\r\n\r\n    function transferMoney(uint chargerId,address user ,uint amount ,uint actualElectricity)  internal returns(bool success);\r\n    \r\n    function giveProfitForInvestors(  uint256   amount,uint chargerId) internal returns (bool success);\r\n   \r\n    function changeElectricCoefficient(uint newCoefficient);\r\n    function createOrder(uint orderId,address user, uint startDate,uint endDate , uint electricity,uint payedSum) external;\r\n   \r\n    function confirmOrder(uint chargerId,uint orderId ,uint actualElectricity)  external returns(bool success,uint unfreezeSum);\r\n    function getPrice() external returns (uint price);\r\n}\r\ncontract IElectricAccounts{\r\n   function freezeMoney(address userAddress,uint frozenSum);\r\n   function isUserActive(address userAddress) constant  external  returns (bool _state);\r\n   function unfreezeOddMoney(address userAddress,uint unfreezeSum) constant external ;\r\n}\r\n//contract\r\ncontract ProxyElectricCharger \r\n{\r\n    address public Owner = msg.sender;\r\n    address public Manager;\r\n    uint public ChargersCount;\r\n    uint[] public ChargersIds;\r\n    mapping (uint=>Charger) Chargers;\r\n  \r\n    struct Charger{\r\n            IElectricCharger Charger;\r\n           bool State;\r\n    }\r\n   IElectricAccounts public Accounts;\r\n   function setAccountsBase(address accountsBase){\r\n       if (msg.sender != Owner && msg.sender != Manager) return ;\r\n       Accounts = IElectricAccounts(accountsBase);\r\n   }\r\n      function setManager(address manager) external{\r\n             if (msg.sender != Owner) return ;\r\n             Manager = manager;\r\n        }\r\n   function createOrder (uint chargerId,uint orderId,address userAddress,uint startTime,uint endTime , uint electricity,uint payedSum) external {\r\n            if (msg.sender != Owner && msg.sender != Manager) return ;\r\n           if(!Accounts.isUserActive(userAddress)) return;\r\n           if(Chargers[chargerId].Charger != IElectricCharger(address(0x0)) && Chargers[chargerId].State){\r\n                    Accounts.freezeMoney(userAddress,payedSum);\r\n                    Chargers[chargerId].Charger.createOrder(orderId,userAddress,startTime,endTime,electricity,payedSum);\r\n           }\r\n       }\r\n   function confirmOrder (uint chargerId,uint orderId,address userAddress ,uint actualElectricity) external returns (bool success) {\r\n              if (msg.sender != Owner && msg.sender != Manager) return ;\r\n           if(Chargers[chargerId].Charger != IElectricCharger(address(0x0)) && Chargers[chargerId].State){\r\n                var (result,unfreezeSum) =  Chargers[chargerId].Charger.confirmOrder(chargerId,orderId,actualElectricity);\r\n                if(result){\r\n                     Accounts.unfreezeOddMoney(userAddress,unfreezeSum);\r\n                }\r\n                return(result);\r\n           }\r\n    }\r\n   \r\n   \r\n    function addNewCharger(uint id, address chargerAddress){\r\n         if (msg.sender != Owner && msg.sender != Manager) return ;\r\n         Chargers[id].Charger = IElectricCharger(chargerAddress);\r\n         Chargers[id].State = true;\r\n         ChargersIds.push(id);\r\n         ChargersCount++;\r\n    }\r\n    function setStatusOfCharger(uint id,bool state){\r\n              if (msg.sender != Owner && msg.sender != Manager) return ;\r\n              Chargers[id].State = state;\r\n    }\r\n    function isChargerExist(address chargerAddress , uint chargerId) external returns (bool isExist){\r\n         if(IElectricCharger(chargerAddress) != Chargers[chargerId].Charger) \r\n                    return false;\r\n        return true;\r\n    }\r\n      function getChargers() external constant returns(  address[] addresses ,bool[] statuses) {\r\n                address []  memory _addresses = new address[](ChargersCount);\r\n                bool []  memory _statuses = new bool[](ChargersCount);\r\n                for (var i = 0; i < ChargersCount; i++) {\r\n                   _addresses[i]=Chargers[ChargersIds[i]].Charger;\r\n                   _statuses[i]=Chargers[ChargersIds[i]].State;\r\n                }\r\n                return (_addresses,_statuses);\r\n          }\r\n   \r\n \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"chargerId\",\"type\":\"uint256\"},{\"name\":\"orderId\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"electricity\",\"type\":\"uint256\"},{\"name\":\"payedSum\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountsBase\",\"type\":\"address\"}],\"name\":\"setAccountsBase\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ChargersIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ChargersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chargerId\",\"type\":\"uint256\"},{\"name\":\"orderId\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"actualElectricity\",\"type\":\"uint256\"}],\"name\":\"confirmOrder\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"chargerAddress\",\"type\":\"address\"}],\"name\":\"addNewCharger\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setStatusOfCharger\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChargers\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"statuses\",\"type\":\"bool[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chargerAddress\",\"type\":\"address\"},{\"name\":\"chargerId\",\"type\":\"uint256\"}],\"name\":\"isChargerExist\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]", "ContractName": "ProxyElectricCharger", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://acf0c6123f2773d80c37607ffd0db9be7b88b61f2cb4088a011d9f12e2ca1109"}]}