{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.6;\r\n\r\ncontract RandomReality {\r\n\r\n    // Key used for managing the contract, should usually be stored offline and may be a multisig contract\r\n    address owner;\r\n\r\n    // Keys with permission to send responses\r\n    address publisher;\r\n\r\n    // Key with permission to disable the contract\r\n    // This may be kept online, monitoring the contract\r\n    // Once pulled, only the owner can restart\r\n    address emergency_brake;\r\n\r\n    // Fee per request\r\n    uint256 fee = 2000000000000000;\r\n\r\n    // Gas price to request from new contracts\r\n    uint256 gas_price = 20000000000;\r\n\r\n    // Last-changed timestamps, used to restrict price increases\r\n    uint256 last_gas_price_increase_ts;\r\n    uint256 last_fee_increase_ts;\r\n\r\n    // Hash of the random.org API key we'll be using, keccak-hashed to save space\r\n    bytes32 default_api_key;\r\n\r\n    event LogRequest(bytes32 indexed request_id, address indexed sender, uint256 wait_blocks, uint256 wait_secs, uint256 min, uint256 max, uint256 counter, uint256 gas, bytes32 keccak_api_key);\r\n\r\n    uint256 counter = 0;\r\n\r\n    bool public isActive = false;\r\n    \r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function RandomReality() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateOwner(address _addr) onlyOwner {\r\n        owner = _addr;\r\n    }\r\n\r\n    function updateEmergencyBrake(address _addr) onlyOwner {\r\n        emergency_brake = _addr;\r\n    }\r\n\r\n    function activate() onlyOwner {\r\n        isActive = true;\r\n    }\r\n\r\n    function deactivate() {\r\n        if ( (msg.sender != owner) && (msg.sender != emergency_brake) && (msg.sender != publisher) ) throw;\r\n        isActive = false;\r\n    }\r\n\r\n    function setDefaultAPIKey(bytes32 api_key) onlyOwner {\r\n        default_api_key = api_key;\r\n    }\r\n\r\n    function setGasPrice(uint256 _price) onlyOwner {\r\n        // Only allow the gas price to be increased once per 24 hours\r\n        if (_price > gas_price) {\r\n            if ( (now - last_gas_price_increase_ts) < 1 days ) throw;\r\n            last_gas_price_increase_ts = now;\r\n        }\r\n        // Only allow the gas price to be doubled each time\r\n        if ( _price > gas_price * 2 ) {\r\n            throw;\r\n        }\r\n        gas_price = _price;\r\n    }\r\n\r\n    function getGasPrice() constant returns (uint256) {\r\n        return gas_price;\r\n    }\r\n\r\n    function getFee() constant returns (uint256) {\r\n        return fee;\r\n    }\r\n\r\n    function getPrice(uint256 gas) constant returns (uint256) {\r\n        return fee + (gas_price * gas);\r\n    }\r\n\r\n    function setFee(uint256 _fee) onlyOwner {\r\n        // Only allow the fee to be increased once per 24 hours\r\n        if (_fee > fee) {\r\n            if ( (now - last_fee_increase_ts) < 1 days ) throw;\r\n            last_fee_increase_ts = now;\r\n        }\r\n        // Only allow the fee to be doubled each time\r\n        if ( _fee > fee * 2 ) {\r\n            throw;\r\n        }\r\n        fee = _fee;\r\n    }\r\n\r\n    function withdraw(address addr, uint256 amount) onlyOwner {\r\n        bool r = addr.send(amount);\r\n    }\r\n\r\n    function setPublisher(address addr) onlyOwner {\r\n        publisher = addr;\r\n    }\r\n\r\n    // The ID be unique per sender + block height + block time + settings.\r\n    // This should be normally unique in practice.\r\n    // It may be possible for a miner to arrange to create the same ID twice in different (mutually exclusive) blocks, one of which will be orphaned.\r\n    // However, they will have to be at the same height, with the same claimed timestamp.\r\n\r\n    // If the block that triggers the request is orphaned by the time\r\n    // ...we are supposed to send the request for a number, we will never ask for a number for it from random.org\r\n    // ...and it will be as if nothing happened.\r\n\r\n    // If the block is orphaned between requesting the number and creating the response\r\n    // ...we want a permanent record of the request happening as we have a random.org response to explain\r\n    // ...so we will send it to your contract anyway.\r\n\r\n    // If the gas you intend to use is very high and the number of blocks you wait is very short\r\n    // ...we reserve the right to wait longer than you asked to reduce the risk of getting orphaned.\r\n\r\n    function requestNumber(uint256 min, uint256 max, uint256 wait_blocks, uint256 wait_secs) payable returns (bytes32) {\r\n\r\n        if (msg.value < fee) throw;\r\n        if (min > max) throw;\r\n        if (!isActive) throw;\r\n\r\n        uint256 gas_amount = (msg.value - fee) / gas_price;\r\n        counter++;\r\n\r\n        bytes32 request_id = sha3(msg.sender, wait_blocks, wait_secs, min, max, counter, gas_amount, default_api_key, block.number, now); \r\n\r\n        // Log everything used in the request_id except block number and timestamp, which we can recover from the block\r\n        // This allows us to recreate the request ID on the server side\r\n        // That way we don't have to trust the node feeding us event log information: \r\n        // If it feeds us the wrong settings for a real request_id, we can detect it\r\n        // ...and if it feeds us non-existent requests, we'll make bogus requests to random.org, but nobody will care\r\n\r\n        LogRequest(request_id, msg.sender, wait_blocks, wait_secs, min, max, counter, gas_amount, default_api_key); \r\n\r\n        return request_id;\r\n\r\n    }\r\n\r\n    // Putting this here for now - belongs somewhere else\r\n    function __random_callback(bytes32 request_id, uint256 val, uint256 err, bytes32 ipfs_proof) {}\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_id\",\"type\":\"bytes32\"},{\"name\":\"val\",\"type\":\"uint256\"},{\"name\":\"err\",\"type\":\"uint256\"},{\"name\":\"ipfs_proof\",\"type\":\"bytes32\"}],\"name\":\"__random_callback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPublisher\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateEmergencyBrake\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"wait_blocks\",\"type\":\"uint256\"},{\"name\":\"wait_secs\",\"type\":\"uint256\"}],\"name\":\"requestNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"api_key\",\"type\":\"bytes32\"}],\"name\":\"setDefaultAPIKey\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"request_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wait_blocks\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wait_secs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"counter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keccak_api_key\",\"type\":\"bytes32\"}],\"name\":\"LogRequest\",\"type\":\"event\"}]", "ContractName": "RandomReality", "CompilerVersion": "v0.4.7+commit.822622cf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a899f8e87dbba297e5b62f8c3da4ff597c8fac86fb1516cf7960ea5a0ab8e648"}]}