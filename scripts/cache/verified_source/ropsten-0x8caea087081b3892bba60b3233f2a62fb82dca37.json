{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\ncontract ModifierEntrancy {\r\n\r\n  mapping (address => uint) public tokenBalance;\r\n  string constant name = \"Nu Token\";\r\n  Bank bank;\r\n  \r\n  constructor() public{\r\n      bank = new Bank();\r\n  }\r\n\r\n  //If a contract has a zero balance and supports the token give them some token\r\n  function airDrop() hasNoBalance supportsToken  public{\r\n    tokenBalance[msg.sender] += 20;\r\n  }\r\n  \r\n  //Checks that the contract responds the way we want\r\n  modifier supportsToken() {\r\n    require(keccak256(abi.encodePacked(\"Nu Token\")) == bank.supportsToken());\r\n    _;\r\n  }\r\n  \r\n  //Checks that the caller has a zero balance\r\n  modifier hasNoBalance {\r\n      require(tokenBalance[msg.sender] == 0);\r\n      _;\r\n  }\r\n}\r\n\r\ncontract Bank{\r\n\r\n    function supportsToken() external returns(bytes32) {\r\n        return keccak256(abi.encodePacked(\"Nu Token\"));\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"supportsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bank", "CompilerVersion": "v0.5.7+commit.6da8b019", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c29f6825e1b3ef1efe1e33063f8d78f8a15b5c8c8083321518fcc51840732b44"}]}