{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.4.6;\r\n\r\ncontract mortal {\r\n\taddress owner;\r\n\t\r\n\tfunction mortal() { owner = msg.sender; }\r\n\t\r\n\tfunction kill() { if (msg.sender == owner) suicide(owner); }\r\n}\r\n\r\ncontract marketPayEscrow is mortal {\r\n\r\n\t// Data\r\n\tstruct escrow {\r\n\t\taddress buyer;\r\n\t\taddress seller;\r\n\t\taddress thirdParty;\r\n\t\taddress recipient;\r\n\t\tuint amount;\r\n\t\tuint revokedByBuyer;\r\n\t\tuint revokedBySeller;\r\n\t\tuint revokedByThirdParty;\r\n\t\tuint releasedByBuyer;\r\n\t\tuint releasedBySeller;\r\n\t\tuint releasedByThirdParty;\r\n\t\t// For unknown reasons enum doesn't work => enum statuses {started, revoked, paid}; statuses status;\r\n\t\tuint status; // 0 => non-existent 1 => started, 2 => revoked, 3 => paid\r\n\t}\r\n\tmapping (uint => escrow) escrows;\r\n\tuint public numEscrows = 0;\r\n\r\n\t// Events\r\n\tevent escrowStart(address buyer, address seller, address thirdParty);\r\n\tevent escrowRevoke(address recipient, uint amount);\r\n\tevent escrowRelease(address recipient, uint amount);\r\n\r\n\t// Functions\r\n\tfunction queryStatus(uint escrowId) constant returns (uint status) {\r\n\t\tescrow e = escrows[escrowId];\r\n\t\treturn e.status;\r\n\t}\r\n\t\r\n\tfunction start(address seller, address thirdParty) returns (uint) {\r\n\t\tuint escrowId = numEscrows;\r\n\t\tnumEscrows++;\r\n\t\tescrow memory e;\r\n\t\te.thirdParty = thirdParty;\r\n\t\te.seller = seller;\r\n\t\te.buyer = msg.sender;\r\n\t\te.amount = msg.value;\r\n\t\te.recipient = seller;\r\n\t\te.status = 1; // started\r\n\t\tescrows[escrowId] = e;\r\n\t\t\r\n\t\tescrowStart(e.buyer, e.seller, e.thirdParty); // Log\r\n\t\t\r\n\t\treturn escrowId;\r\n\t}\r\n\t\r\n\tfunction revoke(uint escrowId) returns (uint amount) {\r\n\t\tescrow e = escrows[escrowId];\r\n\t\tif (e.status != 1) { // started\r\n\t\t\t//MyLog(bytes32(\"Sorry, but this escrow status is not 1: \")); MyLog(bytes32(e.status));\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif (msg.sender == e.buyer) {\r\n\t\t\t\te.revokedByBuyer = 1;\r\n\t\t} else if (msg.sender == e.thirdParty) {\r\n\t\t\t\te.revokedByThirdParty = 1;\r\n\t\t} else if (msg.sender == e.seller) {\r\n\t\t\t\te.revokedBySeller = 1;\r\n\t\t} else {\r\n\t\t\t// MyLog('Sorry, but revoke must be invoked by buyer, seller or thirdParty only.');\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tif (e.revokedByBuyer + e.revokedByThirdParty + e.revokedBySeller >= 2) {\r\n\t\t\tbool kk = e.buyer.send(e.amount);\r\n\t\t\te.status = 2; // revoked\r\n\t\t\t// MyLog('Thanks. The revoke process has been completed. Funds (' + e.amount + ') have been transferred to buyer ' + e.buyer + '.');\r\n\t\t\tescrowRevoke(e.buyer, e.amount); // Log\r\n\t\t\treturn e.amount;\r\n\t\t} else {\r\n\t\t\t// MyLog('Thanks. To complete the process at least two parties (buyer, seller or thirdParty) must invoke the revoke.');\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction release(uint escrowId) returns (uint amount) {\r\n\t\tescrow e = escrows[escrowId];\r\n\t\tif (e.status != 1) { // started\r\n\t\t\t// MyLog('Sorry, but this escrow status is not 1: ' + e.status);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif (msg.sender == e.buyer) {\r\n\t\t\t\te.releasedByBuyer = 1;\r\n\t\t} else if (msg.sender == e.thirdParty) {\r\n\t\t\t\te.releasedByThirdParty = 1;\r\n\t\t} else if (msg.sender == e.seller) {\r\n\t\t\t\te.releasedBySeller = 1;\r\n\t\t} else {\r\n\t\t\t//MyLog('Sorry, but release must be invoked by buyer, seller or thirdParty only.');\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tif (e.releasedByBuyer + e.releasedByThirdParty + e.releasedBySeller >= 2) {\r\n\t\t\tbool kk = e.seller.send(e.amount);\r\n\t\t\te.status = 3; // paid\r\n\t\t\t//MyLog('Thanks. The release process has been completed. Funds (' + e.amount + ') have been transferred to seller ' + e.seller + '.');\r\n\t\t\tescrowRelease(e.seller, e.amount); // Log\r\n\t\t\treturn e.amount;\r\n\t\t} else {\r\n\t\t\t//MyLog('Thanks. To complete the process at least two parties (buyer, seller or thirdParty) must invoke the release.');\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"queryStatus\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numEscrows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"thirdParty\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"thirdParty\",\"type\":\"address\"}],\"name\":\"escrowStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"escrowRevoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"escrowRelease\",\"type\":\"event\"}]", "ContractName": "marketPayEscrow", "CompilerVersion": "v0.4.6+commit.2dabbdf0", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}