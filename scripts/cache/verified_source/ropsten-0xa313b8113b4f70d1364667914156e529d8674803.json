{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.4;\r\n\r\ncontract payrollSystem{\r\n    \r\n    address company;\r\n    \r\n    struct employee {\r\n        bool active;\r\n        bool paid;\r\n        uint salary;\r\n        uint balance;\r\n    }\r\n    \r\n    event Transfer(address indexed from, address indexed to,uint amount);\r\n    \r\n    mapping(address => employee) employeeMapper; \r\n    address[] employeeList;\r\n    \r\n    //constructor of the contract\r\n    function payrollSystem(){\r\n        company = msg.sender;\r\n    }\r\n    \r\n    //to allow transactions only through the company account\r\n    modifier onlyCompany(){\r\n       if(msg.sender != company){\r\n           revert();\r\n       }\r\n        _;\r\n    }\r\n    \r\n    //to add an employee to the company's list of employees\r\n    function addEmployee(address newEmployee, uint salary) onlyCompany{\r\n        var _employee = employeeMapper[newEmployee];\r\n        _employee.active = true;\r\n        _employee.salary = salary;\r\n        _employee.balance = 0;\r\n        employeeList.push(newEmployee);\r\n    }\r\n    \r\n    //if at all the employee leaves the company, we can use this function to turn him inactive\r\n    function removeEmployee(address _address) onlyCompany{\r\n        employeeMapper[_address].active = false;\r\n    }\r\n    \r\n    //this function can be used to give a raise in the salary of an employee\r\n    function updateSalary(address _address, uint newSalary) onlyCompany{\r\n        employeeMapper[_address].salary = newSalary;\r\n    }\r\n    \r\n    function listOutEmployees() onlyCompany constant returns(address[]){\r\n        return employeeList;\r\n    }\r\n    \r\n    //deposit the initial amount a company would start with. It can be updated as the investment grows\r\n    function depositInvestment() onlyCompany payable{\r\n     \r\n    }\r\n    \r\n    function totalSupply() onlyCompany constant returns(uint){\r\n       return this.balance;\r\n    }\r\n    \r\n    //validate whether the employee is still working in the company\r\n    function isActive(address check) constant returns(bool){\r\n        return employeeMapper[check].active;\r\n    }\r\n    \r\n\r\n    //this sends the salary to the employee account    \r\n    function transfer(address _address) private{\r\n       if(employeeMapper[_address].salary < this.balance){\r\n           transferLog(_address);\r\n           employeeMapper[_address].paid = true;\r\n           employeeMapper[_address].balance += employeeMapper[_address].salary;\r\n       }else{\r\n           employeeMapper[_address].paid = false;\r\n       }\r\n    }\r\n    \r\n    function transferLog(address _address) private{\r\n        Transfer(msg.sender,_address,employeeMapper[_address].salary);\r\n    }\r\n    \r\n    //first we check whether the employee is working in the company and then check for double spend\r\n    function sendSalary(address sendTo){\r\n        if(isActive(sendTo) && !employeeMapper[sendTo].paid){\r\n            transfer(sendTo);\r\n        }\r\n    } \r\n    \r\n    \r\n    function balanceOf(address empAd) public constant returns(uint){\r\n        return employeeMapper[empAd].balance;\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"newSalary\",\"type\":\"uint256\"}],\"name\":\"updateSalary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"sendSalary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositInvestment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"empAd\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"check\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeEmployee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listOutEmployees\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEmployee\",\"type\":\"address\"},{\"name\":\"salary\",\"type\":\"uint256\"}],\"name\":\"addEmployee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "payrollSystem", "CompilerVersion": "v0.4.22-nightly.2018.4.12+commit.c3dc67d0", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4850df7eba84f3fe65ca05bfce4814350dab07c6dbccf7fa126e5cad9c1aad06"}]}