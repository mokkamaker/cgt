{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n * This file is part of Safether.\r\n *\r\n * Safether is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Safether is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Safether.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/* \r\n * SafetherStorage Contract\r\n * For storing depositor data.\r\n */\r\ncontract SafetherStorage {\r\n    \r\n    /*\r\n     * Depositor Struct is storage for user.\r\n     * \r\n     * _token is access key required for find assets.\r\n     * _data is storage for depositor.\r\n     *\r\n     * _data[0] : Register Block Number.\r\n     * _data[1] : Period holding assets.\r\n     * _data[2] : Amount of holding assets.\r\n     *\r\n     */\r\n    struct Depositor {\r\n        bytes8     _token;\r\n        uint256[3]  _data;\r\n    }\r\n    \r\n    mapping (address=>Depositor) internal _depositor;\r\n}\r\n\r\n/* \r\n * SafetherModifier Contract\r\n * For declaring modifier function.\r\n */\r\ncontract SafetherModifier is SafetherStorage {\r\n    modifier isRegisterd {\r\n        require(_depositor[msg.sender]._token != 0x0);\r\n        _;\r\n    }\r\n    \r\n    modifier isNotRegisterd {\r\n        require(_depositor[msg.sender]._token == 0x0);\r\n        _;\r\n    }\r\n    \r\n    /*\r\n     * isValidDespositor\r\n     * Modifier function for finding assets.\r\n     */\r\n    modifier isValidDepositor(address depositor, bytes8 token) {\r\n        require(_depositor[depositor]._token == token);\r\n        require(_depositor[depositor]._data[2] > 0);\r\n        require(block.number >= _depositor[depositor]._data[1]);\r\n        _;\r\n    }\r\n}\r\n\r\n/* \r\n * SafetherInterface Contract\r\n * Interface contract for declaring Safether Contract.\r\n */\r\ncontract SafetherInterface {\r\n    function authentication(bytes8 token) public constant returns(bool);\r\n    function getDepositor() public constant returns(uint256[3]);\r\n    \r\n    function register(bytes7 password) public;\r\n    function deposit(uint256 period) public payable;\r\n    function withdraw(address depositor, bytes8 token) public payable;\r\n    function cancel() public payable;\r\n}\r\n\r\n/* \r\n * Safether Contract\r\n * Implements the inherited functions of interface contract.\r\n */\r\ncontract Safether is SafetherModifier, SafetherInterface {\r\n\r\n    /* \r\n     * authentication Function\r\n     *\r\n     * It only returns information about msg.sender to \r\n     * prevent hacking through DoS attack.\r\n     * \r\n     */\r\n    function authentication(bytes8 token) public constant returns(bool) {\r\n        return _depositor[msg.sender]._token == token;\r\n    }\r\n    \r\n    /* \r\n     * getDepositor Function\r\n     *\r\n     * It only returns information about msg.sender to \r\n     * prevent hacking through DoS attack.\r\n     * \r\n     */\r\n    function getDepositor() public constant returns (uint256[3]) {\r\n        return (_depositor[msg.sender]._data);\r\n    }\r\n    \r\n    function register(bytes7 password) public isNotRegisterd {\r\n        _depositor[msg.sender]._token = bytes8(keccak256(block.number, msg.sender, password));\r\n        _depositor[msg.sender]._data[0] = block.number;\r\n    }\r\n    \r\n    function deposit(uint256 period) public payable isRegisterd {\r\n        _depositor[msg.sender]._data[1] = block.number + period;\r\n        _depositor[msg.sender]._data[2] += msg.value;\r\n    }\r\n    \r\n    /* \r\n     * withdraw Function\r\n     * \r\n     * Recipients can not know how much money is stored, \r\n     * nor can they know the duration. \r\n     \r\n     * This is a preventive measure to prevent DoS attacks from hackers. \r\n     * This is because the metamask informs the modifier of the error in the context execution stage. \r\n     * \r\n     * Hackers can try this information without paying for it, \r\n     * but they do not know if the password is wrong, the storage period has not expired, \r\n     * or the money does not exist. \r\n     *\r\n     * Even if you hacked the correct token, This makes hacking difficult.\r\n     *\r\n     */\r\n    function withdraw(address depositor, bytes8 token) public payable isValidDepositor(depositor, token) {\r\n        uint256 tempDeposit = _depositor[depositor]._data[2];\r\n         _depositor[depositor]._data[2] = 0;\r\n         msg.sender.transfer(tempDeposit + msg.value);\r\n    }\r\n    \r\n    function cancel() public payable isRegisterd {\r\n        uint256 tempDeposit = _depositor[msg.sender]._data[2];\r\n        delete _depositor[msg.sender];\r\n        msg.sender.transfer(tempDeposit + msg.value);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"bytes8\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"bytes8\"}],\"name\":\"authentication\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"bytes7\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Safether", "CompilerVersion": "v0.4.20+commit.3155dd80", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "Library": "", "SwarmSource": "bzzr://6bbb51ef204aee0639282e3d9cda7c269c50faf2ca296d4fd497f3dd3ed6b5e5"}]}