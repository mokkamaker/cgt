{u'source_code/test1170.sol': {u'Minewar': {'vulnerabilities': {'callstack': [], 'time_dependency': [], 'reentrancy': [], 'integer_overflow': [u'source_code/test1170.sol:260:22: Warning: Integer Overflow.\n        lastupdate = p.lastUpdateTime\nInteger Overflow occurs if:\n    CRTSTAL_MINING_PERIOD = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    round = 0', u'source_code/test1170.sol:316:48: Warning: Integer Overflow.\n        return getCurrentPrice(getCurrentLevel(booster.startingLevel', u'source_code/test1170.sol:259:33: Warning: Integer Overflow.\n        crystals = SafeMath.div(p.crystals\nInteger Overflow occurs if:\n    round = 0', u'source_code/test1170.sol:265:25: Warning: Integer Overflow.\n            miners[i] = p.minerCount\nInteger Overflow occurs if:\n    numberOfMiners = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    CRTSTAL_MINING_PERIOD = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    round = 0', u'source_code/test1170.sol:276:80: Warning: Integer Overflow.\n            personalProduction = SafeMath.div(SafeMath.mul(personalProduction, b.boostRate\nInteger Overflow occurs if:\n    players[addr].lastUpdateTime = 8590852140718699206516388272987255553582183577583476007668501492485448531967\n    numberOfBoosts = 10\n    index = 0\n    amount = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    boostData[revert_i].owner = 0\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    boostData[revert_i].owner = 1461501637330902918203684832716283019655932542975\n    numberOfOrders = 1\n    deadline = 29402102004977093628595653709862907021885159527907175083947476124036291887104\n    round = 0\n    players[msg.sender].round = 0', u'source_code/test1170.sol:418:5: Warning: Integer Overflow.\n    function sellCrystalDemand(uint256 amount, uint256 unitPrice, string title, string description) public \r\n    ^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    title = 115792089237316195423570985008687907853269984665640564039457584007913129639935', u'source_code/test1170.sol:316:71: Warning: Integer Overflow.\n        return getCurrentPrice(getCurrentLevel(booster.startingLevel, booster.startingTime', u'source_code/test1170.sol:261:26: Warning: Integer Overflow.\n        hashratePerDay = p.hashrate\nInteger Overflow occurs if:\n    CRTSTAL_MINING_PERIOD = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    round = 0', u'source_code/test1170.sol:316:93: Warning: Integer Overflow.\n        return getCurrentPrice(getCurrentLevel(booster.startingLevel, booster.startingTime, booster.halfLife'], 'parity_multisig_bug_2': [], 'integer_underflow': [], 'money_concurrency': [], 'assertion_failure': []}, 'evm_code_coverage': '11.4'}, u'SafeMath': {'vulnerabilities': {'callstack': [], 'time_dependency': [], 'reentrancy': [], 'integer_overflow': [], 'parity_multisig_bug_2': [], 'integer_underflow': [], 'money_concurrency': [], 'assertion_failure': []}, 'evm_code_coverage': '100.0'}}}

