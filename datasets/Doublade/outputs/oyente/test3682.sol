{u'source_code/test3682.sol': {u'FMToken': {'vulnerabilities': {'callstack': [], 'time_dependency': [], 'reentrancy': [], 'integer_overflow': [u'source_code/test3682.sol:242:33: Warning: Integer Overflow.\n        uint256 releaseAmount = lockupInfo[_holder].lockupBalance\nInteger Overflow occurs if:\n    locks[_holder] = 255\n    owner = 0', u'source_code/test3682.sol:333:17: Warning: Integer Overflow.\n            if (lockupInfo[_holder].lockupBalance\nInteger Overflow occurs if:\n    lockupInfo[_holder].releaseTime = 0\n    locks[_from] = 255\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:333:54: Warning: Integer Overflow.\n            if (lockupInfo[_holder].lockupBalance <= lockupInfo[_holder].unlockAmountPerRound\nInteger Overflow occurs if:\n    lockupInfo[_holder].releaseTime = 0\n    locks[_from] = 255\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:339:51: Warning: Integer Overflow.\n                releaseAmount = releaseAmount.add(lockupInfo[_holder].unlockAmountPerRound\nInteger Overflow occurs if:\n    lockupInfo[_holder].unlockAmountPerRound = 0\n    lockupInfo[_holder].lockupBalance = 1\n    lockupInfo[_holder].releaseTime = 0\n    locks[_from] = 255\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:272:33: Warning: Integer Overflow.\n        return (locks[_holder], lockupInfo[_holder].lockupBalance', u'source_code/test3682.sol:340:91: Warning: Integer Overflow.\n                lockupInfo[_holder].lockupBalance = lockupInfo[_holder].lockupBalance.sub(lockupInfo[_holder].unlockAmountPerRound\nInteger Overflow occurs if:\n    lockupInfo[_holder].unlockAmountPerRound = 0\n    lockupInfo[_holder].lockupBalance = 1\n    lockupInfo[_holder].releaseTime = 0\n    locks[_from] = 255\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:28:21: Warning: Integer Overflow.\n        uint256 c = a + b\nInteger Overflow occurs if:\n    balances[_to] = 95515132405035013240498949941729301185179799140209929091396633094036584928231\n    _value = 37717208912933073374861050775867160511051478474789766132129094234564326678807\n    allowed[_from][msg.sender] = 37717208912933073374861050775867160511051478474789766132129094234564326678807\n    balances[_from] = 37717208912933073374861050775867160511051478474789766132129094234564326678807\n    _to = 1461501637330902918203684832716283019655932542975\n    locks[_from] = 0\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:340:53: Warning: Integer Overflow.\n                lockupInfo[_holder].lockupBalance = lockupInfo[_holder].lockupBalance\nInteger Overflow occurs if:\n    lockupInfo[_holder].unlockAmountPerRound = 0\n    lockupInfo[_holder].lockupBalance = 1\n    lockupInfo[_holder].releaseTime = 0\n    locks[_from] = 255\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:342:87: Warning: Integer Overflow.\n                lockupInfo[_holder].releaseTime = lockupInfo[_holder].releaseTime.add(lockupInfo[_holder].termOfRound\nInteger Overflow occurs if:\n    lockupInfo[_holder].lockupBalance = 115792089237316195423570985008687907851908855197956810185604085578185788358656\n    lockupInfo[_holder].unlockAmountPerRound = 33554427\n    lockupInfo[_holder].releaseTime = 0\n    locks[_from] = 255\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:334:51: Warning: Integer Overflow.\n                releaseAmount = releaseAmount.add(lockupInfo[_holder].lockupBalance\nInteger Overflow occurs if:\n    lockupInfo[_holder].unlockAmountPerRound = 0\n    lockupInfo[_holder].lockupBalance = 0\n    lockupInfo[_holder].releaseTime = 0\n    locks[_from] = 255\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:272:101: Warning: Integer Overflow.\n        return (locks[_holder], lockupInfo[_holder].lockupBalance, lockupInfo[_holder].releaseTime, lockupInfo[_holder].termOfRound', u'source_code/test3682.sol:185:16: Warning: Integer Overflow.\n        return lockupInfo[_holder].lockupBalance', u'source_code/test3682.sol:272:134: Warning: Integer Overflow.\n        return (locks[_holder], lockupInfo[_holder].lockupBalance, lockupInfo[_holder].releaseTime, lockupInfo[_holder].termOfRound, lockupInfo[_holder].unlockAmountPerRound', u'source_code/test3682.sol:340:17: Warning: Integer Overflow.\n                lockupInfo[_holder].lockupBalance\nInteger Overflow occurs if:\n    lockupInfo[_holder].lockupBalance = 115792089237316195423570985008687907851908855197956810185604085578185788358656\n    lockupInfo[_holder].unlockAmountPerRound = 33554427\n    lockupInfo[_holder].releaseTime = 0\n    locks[_from] = 255\n    frozen[_holder] = 0\n    paused = 0', u'source_code/test3682.sol:210:5: Warning: Integer Overflow.\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n    ^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    _extraData = 115792089237316195423570985008687907853269984665640564039457584007913129639935'], 'parity_multisig_bug_2': [], 'integer_underflow': [u'source_code/test3682.sol:124:5: Warning: Integer Underflow.\n    string public symbol', u'source_code/test3682.sol:123:5: Warning: Integer Underflow.\n    string public name'], 'money_concurrency': [], 'assertion_failure': []}, 'evm_code_coverage': '74.3'}, u'SafeMath': {'vulnerabilities': {'callstack': [], 'time_dependency': [], 'reentrancy': [], 'integer_overflow': [], 'parity_multisig_bug_2': [], 'integer_underflow': [], 'money_concurrency': [], 'assertion_failure': []}, 'evm_code_coverage': '100.0'}, u'Pausable': {'vulnerabilities': {'callstack': [], 'time_dependency': [], 'reentrancy': [], 'integer_overflow': [], 'parity_multisig_bug_2': [], 'integer_underflow': [], 'money_concurrency': [], 'assertion_failure': []}, 'evm_code_coverage': '99.8'}, u'Ownable': {'vulnerabilities': {'callstack': [], 'time_dependency': [], 'reentrancy': [], 'integer_overflow': [], 'parity_multisig_bug_2': [], 'integer_underflow': [], 'money_concurrency': [], 'assertion_failure': []}, 'evm_code_coverage': '99.7'}}}

