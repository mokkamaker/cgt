{u'source_code/test1169.sol': {u'usingOraclize': {'vulnerabilities': {'callstack': [], 'time_dependency': [], 'reentrancy': [], 'integer_overflow': [u'source_code/test1169.sol:125:5: Warning: Integer Overflow.\n    function __callback(bytes32 myid, string result, bytes proof) {\r\n    ^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    result = 115792089237316195423570985008687907853269984665640564039457584007913129639935', u'source_code/test1169.sol:122:5: Warning: Integer Overflow.\n    function __callback(bytes32 myid, string result) {\r\n    ^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    result = 115792089237316195423570985008687907853269984665640564039457584007913129639935'], 'parity_multisig_bug_2': [], 'integer_underflow': [], 'money_concurrency': [], 'assertion_failure': []}, 'evm_code_coverage': '40.6'}, u'BananaGame': {'vulnerabilities': {'callstack': [], 'time_dependency': [], 'reentrancy': [], 'integer_overflow': [u'source_code/test1169.sol:1492:31: Warning: Integer Overflow.\n        uint originInvested = investors[n].originInvested\nInteger Overflow occurs if:\n    investorsNum = 0\n    n = 0', u'source_code/test1169.sol:1341:68: Warning: Integer Overflow.\n            if ((investors[i].amountInvested + profitOfInvestor >= investors[i].amountInvested\nInteger Overflow occurs if:\n    invest = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    investorsNum = 1\n    profitDistributed = 0\n    investorIDs[msg.sender] = 115792089237316195423570985008687907853269984665640564039457584007913129639935', u'source_code/test1169.sol:1394:13: Warning: Integer Overflow.\n            investors[investorIDs[msg.sender]].amountInvested\nInteger Overflow occurs if:\n    profitDistributed = 255\n    investorIDs[msg.sender] = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    isStopped = 0', u'source_code/test1169.sol:1417:9: Warning: Integer Overflow.\n        investors[id].amountInvested\nInteger Overflow occurs if:\n    profitDistributed = 255\n    maxInvestors = 0\n    investorsNum = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    isStopped = 0\n    investorIDs[msg.sender] = 0', u'source_code/test1169.sol:1341:18: Warning: Integer Overflow.\n            if ((investors[i].amountInvested\nInteger Overflow occurs if:\n    invest = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    investorsNum = 1\n    profitDistributed = 0\n    investorIDs[msg.sender] = 115792089237316195423570985008687907853269984665640564039457584007913129639935', u'source_code/test1169.sol:1418:9: Warning: Integer Overflow.\n        investors[id].originInvested\nInteger Overflow occurs if:\n    profitDistributed = 255\n    maxInvestors = 0\n    investorsNum = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    isStopped = 0\n    investorIDs[msg.sender] = 0', u'source_code/test1169.sol:1047:5: Warning: Integer Overflow.\n    mapping(uint => Investor) public investors', u'source_code/test1169.sol:1405:17: Warning: Integer Overflow.\n                investorsNum++\nInteger Overflow occurs if:\n    investorsNum = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    profitDistributed = 255\n    maxInvestors = 0\n    isStopped = 0\n    investorIDs[msg.sender] = 0', u'source_code/test1169.sol:1318:16: Warning: Integer Overflow.\n        return investors[investorIDs[currentInvestor]].amountInvested\nInteger Overflow occurs if:\n    profitDistributed = 255\n    investorIDs[msg.sender] = 115792089237316195423570985008687907853269984665640564039457584007913129639935', u'source_code/test1169.sol:1152:5: Warning: Integer Overflow.\n    function __callback(bytes32 myid, string result, bytes proof) onlyOraclize onlyIfBetExist(myid) \r\n    ^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    result = 115792089237316195423570985008687907853269984665640564039457584007913129639935', u'source_code/test1169.sol:122:5: Warning: Integer Overflow.\n    function __callback(bytes32 myid, string result) {\r\n    ^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    result = 115792089237316195423570985008687907853269984665640564039457584007913129639935', u'source_code/test1169.sol:1312:16: Warning: Integer Overflow.\n        return investors[investorIDs[currentInvestor]].amountInvested\nInteger Overflow occurs if:\n    invest = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    profitDistributed = 255\n    investorIDs[msg.sender] = 115792089237316195423570985008687907853269984665640564039457584007913129639935', u'source_code/test1169.sol:1322:25: Warning: Integer Overflow.\n        uint invested = investors[investorIDs[currentInvestor]].amountInvested\nInteger Overflow occurs if:\n    profitDistributed = 255\n    investorIDs[msg.sender] = 115792089237316195423570985008687907853269984665640564039457584007913129639935'], 'parity_multisig_bug_2': [], 'integer_underflow': [u'source_code/test1169.sol:1032:1: Warning: Integer Underflow.\ncontract BananaGame is usingOraclize{\r\n^\nSpanning multiple lines.\nInteger Underflow occurs if:\n    OAR = 0\n    _proofType = 115339776388732929035197660848497720713218148788040405586178452820382218977280\n    owner = 0', u'source_code/test1169.sol:1246:5: Warning: Integer Underflow.\n    function getBet(uint id) constant returns(address,uint,string){\r\n    ^\nSpanning multiple lines.\nInteger Underflow occurs if:\n    id = 0\n    betsKeys.length = 0', u'source_code/test1169.sol:1493:49: Warning: Integer Underflow.\n        uint currentCaptial = getBalance(addr)*(10000-divestFee\nInteger Underflow occurs if:\n    divestFee = 57896044618658097711785492504343953926634992332820282019728792003956564819968\n    investorsNum = 0\n    n = 0'], 'money_concurrency': [], 'assertion_failure': []}, 'evm_code_coverage': '34.5'}}}

